{"version":3,"sources":["../src/function.ts","../src/assertion.ts"],"sourcesContent":["import { isFunction } from \"./assertion\"\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = () => {}\n\nexport function runIfFunc<T, U extends any[]>(\n  valOrFunc: ((...funcArgs: U) => T) | T,\n  ...args: U\n): T {\n  return isFunction(valOrFunc) ? valOrFunc(...args) : valOrFunc\n}\n\nexport function handlerAll<T extends (event: any, ...args: any[]) => void>(\n  ...funcs: (T | undefined)[]\n) {\n  return function (\n    event: T extends (event: infer R, ...args: any[]) => any ? R : never,\n    ...args: T extends (event: any, ...args: infer R) => any ? R : never\n  ) {\n    funcs.some((func) => {\n      func?.(event, ...args)\n\n      return event?.defaultPrevented\n    })\n  }\n}\n\nexport function funcAll<T extends (...args: any[]) => any>(\n  ...funcs: (T | undefined)[]\n) {\n  return function (...args: T extends (...args: infer R) => any ? R : never) {\n    return funcs.forEach((func) => func?.(...args))\n  }\n}\n","import type { Dict } from \"./index.types\"\n\nexport function is(x: any, y: any) {\n  return (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y)\n}\n\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport function isNotNumber(value: any): boolean {\n  return (\n    typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n  )\n}\n\nexport function isNumeric(value: any): boolean {\n  return (\n    !isNaN(parseFloat(String(value))) &&\n    isFinite(Number(value)) &&\n    /^-?\\d*\\.?\\d+$/.test(String(value))\n  )\n}\n\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\nexport function isBoolean(value: any): value is boolean {\n  return typeof value === \"boolean\"\n}\n\nexport function isUndefined(value: any): value is undefined {\n  return typeof value === \"undefined\"\n}\n\nexport function isNull(value: any): value is null {\n  return value === null\n}\n\nexport function isObject<T extends Dict>(value: any): value is T {\n  return (\n    value !== null &&\n    (typeof value === \"object\" || typeof value === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport function isArray<T extends any[]>(value: any): value is T {\n  return Array.isArray(value)\n}\n\nexport function isEmpty(value: any): boolean {\n  return !isArray(value) || !value.length || value.every((v) => v == null)\n}\n\nexport function isEmptyObject(value: any): boolean {\n  return isObject(value) && !Object.keys(value).length\n}\n\nexport function isFunction<T extends Function = Function>(\n  value: any,\n): value is T {\n  return typeof value === \"function\"\n}\n\nexport function isUnit(value: any): boolean {\n  return /[0-9].*(em|rem|ex|rex|cap|rcap|ch|rch|ic|ric|lh|rlh|vw|svw|lvw|dvw|vh|svh|lvh|dvh|vi|svi|lvi|dvi|vb|svb|lvb|dvb|vmin|svmin|lvmin|dvmin|vmax|svmax|lvmax|dvmax|cm|mm|Q|in|pc|pt|px|%|cqw|cqh|cqi|cqb|cqmin|cqmax)$/.test(\n    value,\n  )\n}\n\nexport function cast<T>(value: any) {\n  return value as T\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AC4DO,SAAS,WACd,OACY;AACZ,SAAO,OAAO,UAAU;AAC1B;;;AD7DO,IAAM,OAAO,MAAM;AAAC;AAEpB,SAAS,UACd,cACG,MACA;AACH,SAAO,WAAW,SAAS,IAAI,UAAU,GAAG,IAAI,IAAI;AACtD;AAEO,SAAS,cACX,OACH;AACA,SAAO,SACL,UACG,MACH;AACA,UAAM,KAAK,CAAC,SAAS;AACnB,mCAAO,OAAO,GAAG;AAEjB,aAAO,+BAAO;AAAA,IAChB,CAAC;AAAA,EACH;AACF;AAEO,SAAS,WACX,OACH;AACA,SAAO,YAAa,MAAuD;AACzE,WAAO,MAAM,QAAQ,CAAC,SAAS,6BAAO,GAAG,KAAK;AAAA,EAChD;AACF;","names":[]}