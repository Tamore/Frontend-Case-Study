type AnyPointerEvent = MouseEvent | PointerEvent | TouchEvent;
type PointType = "client" | "page";
interface Point {
    x: number;
    y: number;
}
interface PointerEventInfo {
    point: Point;
}
type MixedEventListener = (e: AnyPointerEvent, info: PointerEventInfo) => void;
declare function isMouseEvent(ev: any): ev is MouseEvent;
declare function isTouchEvent(ev: AnyPointerEvent): ev is TouchEvent;
declare function isMultiTouchEvent(ev: AnyPointerEvent): boolean;
declare function getEventWindow(ev: Event): typeof globalThis;
declare function pointFromTouch(e: TouchEvent, type?: PointType): {
    x: number;
    y: number;
};
declare function pointFromMouse(point: MouseEvent | PointerEvent, type?: PointType): {
    x: number;
    y: number;
};
declare function getEventPoint(ev: AnyPointerEvent, type?: PointType): {
    x: number;
    y: number;
};
declare function addDomEvent(target: EventTarget, type: string, cb: EventListener, options?: AddEventListenerOptions): () => void;
declare function addPointerEvent(target: EventTarget, type: string, cb: MixedEventListener, options?: AddEventListenerOptions): () => void;

export { type AnyPointerEvent, type MixedEventListener, type Point, type PointType, type PointerEventInfo, addDomEvent, addPointerEvent, getEventPoint, getEventWindow, isMouseEvent, isMultiTouchEvent, isTouchEvent, pointFromMouse, pointFromTouch };
