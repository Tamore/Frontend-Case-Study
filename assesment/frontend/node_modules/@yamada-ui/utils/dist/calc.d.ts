type Operand = number | string;
declare function add(...args: Operand[]): string;
declare function subtract(...args: Operand[]): string;
declare function multiply(...args: Operand[]): string;
declare function divide(...args: Operand[]): string;
declare function negate(value: Operand): string;
interface Calc {
    add: (...args: Operand[]) => Calc;
    divide: (...args: Operand[]) => Calc;
    multiply: (...args: Operand[]) => Calc;
    negate: () => Calc;
    subtract: (...args: Operand[]) => Calc;
    toString: () => string;
}
declare const calc: ((x: Operand) => Calc) & {
    add: typeof add;
    divide: typeof divide;
    multiply: typeof multiply;
    negate: typeof negate;
    subtract: typeof subtract;
};

export { type Operand, calc };
