"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/assertion.ts
var assertion_exports = {};
__export(assertion_exports, {
  cast: () => cast,
  is: () => is,
  isArray: () => isArray,
  isBoolean: () => isBoolean,
  isEmpty: () => isEmpty,
  isEmptyObject: () => isEmptyObject,
  isFunction: () => isFunction,
  isNotNumber: () => isNotNumber,
  isNull: () => isNull,
  isNumber: () => isNumber,
  isNumeric: () => isNumeric,
  isObject: () => isObject,
  isString: () => isString,
  isUndefined: () => isUndefined,
  isUnit: () => isUnit
});
module.exports = __toCommonJS(assertion_exports);
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
}
function isNumber(value) {
  return typeof value === "number";
}
function isNotNumber(value) {
  return typeof value !== "number" || Number.isNaN(value) || !Number.isFinite(value);
}
function isNumeric(value) {
  return !isNaN(parseFloat(String(value))) && isFinite(Number(value)) && /^-?\d*\.?\d+$/.test(String(value));
}
function isString(value) {
  return Object.prototype.toString.call(value) === "[object String]";
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function isUndefined(value) {
  return typeof value === "undefined";
}
function isNull(value) {
  return value === null;
}
function isObject(value) {
  return value !== null && (typeof value === "object" || typeof value === "function") && !isArray(value);
}
function isArray(value) {
  return Array.isArray(value);
}
function isEmpty(value) {
  return !isArray(value) || !value.length || value.every((v) => v == null);
}
function isEmptyObject(value) {
  return isObject(value) && !Object.keys(value).length;
}
function isFunction(value) {
  return typeof value === "function";
}
function isUnit(value) {
  return /[0-9].*(em|rem|ex|rex|cap|rcap|ch|rch|ic|ric|lh|rlh|vw|svw|lvw|dvw|vh|svh|lvh|dvh|vi|svi|lvi|dvi|vb|svb|lvb|dvb|vmin|svmin|lvmin|dvmin|vmax|svmax|lvmax|dvmax|cm|mm|Q|in|pc|pt|px|%|cqw|cqh|cqi|cqb|cqmin|cqmax)$/.test(
    value
  );
}
function cast(value) {
  return value;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cast,
  is,
  isArray,
  isBoolean,
  isEmpty,
  isEmptyObject,
  isFunction,
  isNotNumber,
  isNull,
  isNumber,
  isNumeric,
  isObject,
  isString,
  isUndefined,
  isUnit
});
//# sourceMappingURL=assertion.js.map