import {
  getMemoizedObject
} from "./chunk-EJPLJ6FG.mjs";
import {
  isArray,
  isNumber,
  isObject
} from "./chunk-QWVYBC6R.mjs";

// src/color.ts
import * as c from "color2k";
var SEMANTIC_COLOR_SCHEMES = [
  "primary",
  "secondary",
  "info",
  "success",
  "warning",
  "danger",
  "link"
];
var COLOR_SCHEMES = [
  "gray",
  "neutral",
  "red",
  "rose",
  "pink",
  "flashy",
  "orange",
  "amber",
  "yellow",
  "lime",
  "green",
  "emerald",
  "teal",
  "cyan",
  "sky",
  "blue",
  "indigo",
  "violet",
  "purple",
  "fuchsia"
];
var TONES = [
  50,
  100,
  200,
  300,
  400,
  500,
  600,
  700,
  800,
  900,
  950
];
function isGray(colorScheme) {
  return colorScheme === "gray" || colorScheme === "neutral";
}
function isAccessible(colorScheme) {
  return colorScheme === "yellow" || colorScheme === "cyan" || colorScheme === "lime";
}
function getColor(color, fallback = "#000000") {
  return function(theme = {}, colorMode = "light", breakpoint = "base") {
    var _a, _b, _c, _d, _e, _f;
    const [token, tone] = color.split(".");
    if (tone) {
      const [, relatedToken] = (_c = Object.entries((_b = (_a = theme.semantics) == null ? void 0 : _a.colorSchemes) != null ? _b : {}).find(
        ([semanticToken]) => token === semanticToken
      )) != null ? _c : [];
      if (relatedToken) color = `${relatedToken}.${tone}`;
    } else {
      const [, relatedColor] = (_f = Object.entries((_e = (_d = theme.semantics) == null ? void 0 : _d.colors) != null ? _e : {}).find(
        ([semanticToken]) => token === semanticToken
      )) != null ? _f : [];
      if (relatedColor) color = relatedColor;
    }
    const hex = getMemoizedObject(
      theme,
      `colors.${color}`,
      color
    );
    try {
      if (isArray(hex)) {
        return c.toHex(String(hex[colorMode !== "dark" ? 0 : 1]));
      } else if (isObject(hex)) {
        return c.toHex(String(hex[breakpoint]));
      } else {
        return c.toHex(String(hex));
      }
    } catch {
      try {
        return c.toHex(fallback);
      } catch {
        return "#000000";
      }
    }
  };
}
function lightenColor(color, amount) {
  return function(theme, colorMode, breakpoint) {
    const raw = getColor(color, color)(theme, colorMode, breakpoint);
    return c.toHex(c.lighten(raw, amount / 100));
  };
}
function darkenColor(color, amount) {
  return function(theme, colorMode, breakpoint) {
    const raw = getColor(color, color)(theme, colorMode, breakpoint);
    return c.toHex(c.darken(raw, amount / 100));
  };
}
function tintColor(color, amount) {
  return function(theme, colorMode, breakpoint) {
    const raw = getColor(color, color)(theme, colorMode, breakpoint);
    return c.toHex(c.mix(raw, "#fff", amount / 100));
  };
}
function shadeColor(color, amount) {
  return function(theme, colorMode, breakpoint) {
    const raw = getColor(color, color)(theme, colorMode, breakpoint);
    return c.toHex(c.mix(raw, "#000", amount / 100));
  };
}
function transparentizeColor(color, alpha) {
  return function(theme, colorMode, breakpoint) {
    const raw = getColor(color, color)(theme, colorMode, breakpoint);
    return c.transparentize(raw, 1 - alpha);
  };
}
function randomColor({
  colors,
  string
} = {}) {
  var _a, _b;
  const fallback = randomHex();
  if (string && colors) return (_a = randomColorFromList(string, colors)) != null ? _a : fallback;
  if (string && !colors) return randomColorFromString(string);
  if (colors && !string) return (_b = randomFromList(colors)) != null ? _b : fallback;
  return fallback;
}
function randomHex() {
  return `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
}
function randomColorFromString(str) {
  let hash = 0;
  if (str.length === 0) return hash.toString();
  for (let i = 0; i < str.length; i += 1) {
    hash = str.charCodeAt(i) + ((hash << 5) - hash);
    hash = hash & hash;
  }
  let color = "#";
  for (let j = 0; j < 3; j += 1) {
    const value = hash >> j * 8 & 255;
    color += `00${value.toString(16)}`.substr(-2);
  }
  return color;
}
function randomColorFromList(str, list) {
  let index = 0;
  if (str.length === 0) return list[0];
  for (let i = 0; i < str.length; i += 1) {
    index = str.charCodeAt(i) + ((index << 5) - index);
    index = index & index;
  }
  index = (index % list.length + list.length) % list.length;
  return list[index];
}
function randomFromList(list) {
  return list[Math.floor(Math.random() * list.length)];
}
function getBrightness(color) {
  const [r, g, b] = c.parseToRgba(color);
  return (r * 299 + g * 587 + b * 114) / 1e3;
}
function isTone(color) {
  return function(theme, colorMode, breakpoint) {
    const raw = theme ? getColor(color)(theme, colorMode, breakpoint) : color;
    const brightness = getBrightness(raw);
    const isDark2 = brightness < 128;
    return isDark2 ? "dark" : "light";
  };
}
function isLight(color) {
  return function(theme, colorMode) {
    return isTone(color)(theme, colorMode) === "dark";
  };
}
function isDark(color) {
  return function(theme, colorMode) {
    return isTone(color)(theme, colorMode) === "light";
  };
}
function convertColor(color, fallback) {
  return function(format) {
    try {
      const isAlpha = format.endsWith("a");
      if (/^[0-9a-fA-F]{6}$/.test(color)) color = "#" + color;
      if (format.startsWith("hex")) {
        let hexa = c.toHex(color);
        if (isAlpha) {
          if (hexa.length === 7) hexa += "ff";
        } else {
          hexa = hexa.replace(/(?<=^#([0-9a-fA-F]{6}))[0-9a-fA-F]{2}$/, "");
        }
        return hexa;
      } else if (format.startsWith("hsl")) {
        let hsla2 = c.toHsla(color);
        if (!isAlpha) {
          hsla2 = hsla2.replace(/hsla/, "hsl");
          hsla2 = hsla2.replace(/,\s*\d+(\.\d+)?\)$/, ")");
        }
        return hsla2;
      } else {
        let rgba2 = c.toRgba(color);
        if (!isAlpha) {
          rgba2 = rgba2.replace(/rgba/, "rgb");
          rgba2 = rgba2.replace(/,\s*\d+(\.\d+)?\)$/, ")");
        }
        return rgba2;
      }
    } catch {
      if (fallback) return convertColor(fallback)(format);
    }
  };
}
function calcFormat(color) {
  if (color.startsWith("hsl")) {
    return color.startsWith("hsla") ? "hsla" : "hsl";
  } else if (color.startsWith("rgb")) {
    return color.startsWith("rgba") ? "rgba" : "rgb";
  } else {
    return color.length === 9 ? "hexa" : "hex";
  }
}
function getAlpha(color) {
  return c.parseToRgba(color)[3];
}
function alphaToHex(a) {
  if (0 > a) a = 0;
  if (1 < a) a = 1;
  return Math.round(a * 255).toString(16).padStart(2, "0");
}
function parseToRgba2(color, fallback) {
  try {
    if (/^[0-9a-fA-F]{6}$/.test(color)) color = "#" + color;
    return c.parseToRgba(color);
  } catch {
    if (fallback) return c.parseToRgba(fallback);
  }
}
function parseToHsla2(color, fallback) {
  try {
    if (/^[0-9a-fA-F]{6}$/.test(color)) color = "#" + color;
    return c.parseToHsla(color);
  } catch {
    if (fallback) return c.parseToHsla(fallback);
  }
}
function parseToHsv(color, fallback) {
  var _a;
  let [r, g, b, a] = (_a = parseToRgba2(color, fallback)) != null ? _a : [255, 255, 255, 1];
  r = r / 255;
  g = g / 255;
  b = b / 255;
  const [min, max] = [Math.min(r, g, b), Math.max(r, g, b)];
  const delta = max - min;
  let [h, v, s] = [0, max, max == 0 ? 0 : delta / max];
  switch (min) {
    case max:
      h = 0;
      break;
    case r:
      h = 60 * ((b - g) / delta) + 180;
      break;
    case g:
      h = 60 * ((r - b) / delta) + 300;
      break;
    case b:
      h = 60 * ((g - r) / delta) + 60;
      break;
  }
  return [h, s, v, a];
}
function rgbaTo([r, g, b, a], fallback) {
  return function(format = "hex") {
    return convertColor(c.rgba(r, g, b, a), fallback)(format);
  };
}
function hslaTo([h, s, l, a], fallback) {
  return function(format = "hex") {
    return convertColor(c.hsla(h, s, l, a), fallback)(format);
  };
}
function hsvTo([h, s, v, a], fallback) {
  return function(format = "hex") {
    h = h / 60;
    let rgb = [v, v, v];
    let i = Math.floor(h);
    let f = h - i;
    let p = v * (1 - s);
    let q = v * (1 - s * f);
    let t = v * (1 - s * (1 - f));
    switch (i) {
      case 0:
      case 6:
        rgb = [v, t, p];
        break;
      case 1:
        rgb = [q, v, p];
        break;
      case 2:
        rgb = [p, v, t];
        break;
      case 3:
        rgb = [p, q, v];
        break;
      case 4:
        rgb = [t, p, v];
        break;
      case 5:
        rgb = [v, p, q];
        break;
    }
    let color = `rgb(${rgb.map((v2) => Math.round(v2 * 255)).join(", ")})`;
    if (isNumber(a)) color = color.replace(/\)$/, `, ${a})`);
    return convertColor(color, fallback)(format);
  };
}
function sameColor(color, comparison) {
  var _a, _b;
  if (!color) return false;
  if (!comparison) return false;
  const a = (_a = parseToRgba2(color)) != null ? _a : [];
  const b = (_b = parseToRgba2(comparison)) != null ? _b : [];
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

export {
  SEMANTIC_COLOR_SCHEMES,
  COLOR_SCHEMES,
  TONES,
  isGray,
  isAccessible,
  getColor,
  lightenColor,
  darkenColor,
  tintColor,
  shadeColor,
  transparentizeColor,
  randomColor,
  isTone,
  isLight,
  isDark,
  convertColor,
  calcFormat,
  getAlpha,
  alphaToHex,
  parseToRgba2 as parseToRgba,
  parseToHsla2 as parseToHsla,
  parseToHsv,
  rgbaTo,
  hslaTo,
  hsvTo,
  sameColor
};
//# sourceMappingURL=chunk-YREUKSHW.mjs.map