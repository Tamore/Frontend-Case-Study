// src/event.ts
function isMouseEvent(ev) {
  const win = getEventWindow(ev);
  if (typeof win.PointerEvent !== "undefined" && ev instanceof win.PointerEvent)
    return !!(ev.pointerType === "mouse");
  return ev instanceof win.MouseEvent;
}
function isTouchEvent(ev) {
  return !!ev.touches;
}
function isMultiTouchEvent(ev) {
  return isTouchEvent(ev) && ev.touches.length > 1;
}
function getEventWindow(ev) {
  var _a;
  return (_a = ev.view) != null ? _a : window;
}
function pointFromTouch(e, type = "page") {
  var _a, _b;
  const point = e.touches[0] || e.changedTouches[0];
  return { x: (_a = point == null ? void 0 : point[`${type}X`]) != null ? _a : 0, y: (_b = point == null ? void 0 : point[`${type}Y`]) != null ? _b : 0 };
}
function pointFromMouse(point, type = "page") {
  return {
    x: point[`${type}X`],
    y: point[`${type}Y`]
  };
}
function getEventPoint(ev, type = "page") {
  return isTouchEvent(ev) ? pointFromTouch(ev, type) : pointFromMouse(ev, type);
}
function addDomEvent(target, type, cb, options) {
  target.addEventListener(type, cb, options);
  return () => {
    target.removeEventListener(type, cb, options);
  };
}
function filter(cb) {
  return function(ev) {
    const isMouse = isMouseEvent(ev);
    if (!isMouse || ev.button === 0) cb(ev);
  };
}
function wrap(cb, filterPrimary = false) {
  function listener(ev) {
    return cb(ev, { point: getEventPoint(ev) });
  }
  const fn = filterPrimary ? filter(listener) : listener;
  return fn;
}
function addPointerEvent(target, type, cb, options) {
  return addDomEvent(target, type, wrap(cb, type === "pointerdown"), options);
}

export {
  isMouseEvent,
  isTouchEvent,
  isMultiTouchEvent,
  getEventWindow,
  pointFromTouch,
  pointFromMouse,
  getEventPoint,
  addDomEvent,
  addPointerEvent
};
//# sourceMappingURL=chunk-SAYAT2RG.mjs.map