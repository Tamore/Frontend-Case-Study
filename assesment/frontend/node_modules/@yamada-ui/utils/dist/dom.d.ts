import React__default from 'react';

declare function createdDom(): boolean;
declare function getPlatform(): string;
declare function vendor(v: RegExp): boolean;
declare function platform(v: RegExp): boolean;
declare function isMac(): boolean;
declare function isApple(): boolean;
declare function isSafari(): boolean;
declare function isElement(el: any): el is Element;
declare function isHTMLElement(el: any): el is HTMLElement;
declare function isHidden(el: HTMLElement): boolean;
declare function isDisabled(el: HTMLElement): boolean;
declare function hasTabIndex(el: HTMLElement): boolean;
declare function isContentEditable(el: HTMLElement): boolean;
declare function isContains(parent: HTMLElement | null, child: HTMLElement | null): boolean | undefined;
declare function getPx(value: number | string | undefined): number;
declare function getEventRelatedTarget(ev: React__default.FocusEvent | React__default.MouseEvent): HTMLElement | null;
type Booleanish = "false" | "true" | boolean;
declare function dataAttr(condition: boolean | undefined): Booleanish;
declare function ariaAttr(condition: boolean | undefined): boolean | undefined;
interface FocusableElement {
    focus: (options?: FocusOptions) => void;
}
declare function getAllFocusable<T extends HTMLElement>(container: T): T[];
declare function isFocusable(el: HTMLElement): boolean;
declare function hasNegativeTabIndex(el: HTMLElement): boolean;
declare function isTabbable(el?: HTMLElement | null): boolean;
declare function isTouchDevice(): boolean;
declare function getOwnerWindow(node?: Element | null): typeof globalThis & Window;
declare function getOwnerDocument(el?: Element | null): Document;
declare function getActiveElement(el?: HTMLElement): HTMLElement | null;
declare function isActiveElement(el: HTMLElement): boolean;

export { type FocusableElement, ariaAttr, createdDom, dataAttr, getActiveElement, getAllFocusable, getEventRelatedTarget, getOwnerDocument, getOwnerWindow, getPlatform, getPx, hasNegativeTabIndex, hasTabIndex, isActiveElement, isApple, isContains, isContentEditable, isDisabled, isElement, isFocusable, isHTMLElement, isHidden, isMac, isSafari, isTabbable, isTouchDevice, platform, vendor };
