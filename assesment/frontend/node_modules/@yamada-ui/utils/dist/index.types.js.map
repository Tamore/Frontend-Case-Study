{"version":3,"sources":["../src/index.types.ts"],"sourcesContent":["export type Primitive =\n  | bigint\n  | boolean\n  | null\n  | number\n  | string\n  | symbol\n  | undefined\n\ntype PathImpl<Y extends number | string | symbol, M> = Y extends number | string\n  ? M extends Primitive\n    ? `${Y}`\n    : `${Y}.${Path<M>}`\n  : ``\n\nexport type Path<Y> = {\n  [M in keyof Y]-?: PathImpl<M, Y[M]>\n}[keyof Y]\n\nexport interface Dict<Y = any> {\n  [key: string]: Y\n}\n\nexport interface ObjectLiteral {}\n\nexport type StringLiteral = {} & string\n\nexport type Replace<\n  Y extends string,\n  M extends string,\n  D extends string,\n  H extends string = \"\",\n> = Y extends `${infer T}${M}${infer R}`\n  ? Replace<R, M, D, `${H}${T}${D}`>\n  : `${H}${Y}`\n\nexport type Union<Y> = StringLiteral | Y\n\nexport type Length<T extends any[]> = T[\"length\"]\n\nexport type Merge<Y, M> = M & Omit<Y, keyof M>\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}