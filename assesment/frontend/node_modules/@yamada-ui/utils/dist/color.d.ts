import { StringLiteral, Dict } from './index.types.js';

type Breakpoint = "base" | StringLiteral;
type ColorMode = "dark" | "light";
type ColorFormat = "hex" | "hexa" | "hsl" | "hsla" | "rgb" | "rgba";
declare const SEMANTIC_COLOR_SCHEMES: readonly ["primary", "secondary", "info", "success", "warning", "danger", "link"];
declare const COLOR_SCHEMES: readonly ["gray", "neutral", "red", "rose", "pink", "flashy", "orange", "amber", "yellow", "lime", "green", "emerald", "teal", "cyan", "sky", "blue", "indigo", "violet", "purple", "fuchsia"];
type SemanticColorScheme = (typeof SEMANTIC_COLOR_SCHEMES)[number] | StringLiteral;
type ColorScheme = (typeof COLOR_SCHEMES)[number] | StringLiteral;
declare const TONES: readonly [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950];
declare function isGray(colorScheme: string): colorScheme is "gray" | "neutral";
declare function isAccessible(colorScheme: string): colorScheme is "yellow" | "lime" | "cyan";
declare function getColor(color: string, fallback?: string): (theme?: Dict, colorMode?: ColorMode, breakpoint?: Breakpoint) => string;
declare function lightenColor(color: string, amount: number): (theme?: Dict, colorMode?: ColorMode, breakpoint?: Breakpoint) => string;
declare function darkenColor(color: string, amount: number): (theme?: Dict, colorMode?: ColorMode, breakpoint?: Breakpoint) => string;
declare function tintColor(color: string, amount: number): (theme?: Dict, colorMode?: ColorMode, breakpoint?: Breakpoint) => string;
declare function shadeColor(color: string, amount: number): (theme?: Dict, colorMode?: ColorMode, breakpoint?: Breakpoint) => string;
declare function transparentizeColor(color: string, alpha: number): (theme?: Dict, colorMode?: ColorMode, breakpoint?: Breakpoint) => string;
declare function randomColor({ colors, string, }?: {
    colors?: string[];
    string?: string;
}): string;
declare function isTone(color: string): (theme?: Dict, colorMode?: ColorMode, breakpoint?: Breakpoint) => "dark" | "light";
declare function isLight(color: string): (theme?: Dict, colorMode?: ColorMode) => boolean;
declare function isDark(color: string): (theme?: Dict, colorMode?: ColorMode) => boolean;
declare function convertColor(color: string, fallback?: string): (format: ColorFormat) => string | undefined;
declare function calcFormat(color: string): ColorFormat;
declare function getAlpha(color: string): number;
declare function alphaToHex(a: number): string;
declare function parseToRgba(color: string, fallback?: string): [number, number, number, number] | undefined;
declare function parseToHsla(color: string, fallback?: string): [number, number, number, number] | undefined;
declare function parseToHsv(color: string, fallback?: string): [number, number, number, number];
declare function rgbaTo([r, g, b, a]: [number, number, number, number], fallback?: string): (format?: ColorFormat) => string | undefined;
declare function hslaTo([h, s, l, a]: [number, number, number, number], fallback?: string): (format?: ColorFormat) => string | undefined;
declare function hsvTo([h, s, v, a]: [number, number, number, number?], fallback?: string): (format?: ColorFormat) => string | undefined;
declare function sameColor(color: string | undefined, comparison: string | undefined): boolean;

export { COLOR_SCHEMES, type ColorFormat, type ColorScheme, SEMANTIC_COLOR_SCHEMES, type SemanticColorScheme, TONES, alphaToHex, calcFormat, convertColor, darkenColor, getAlpha, getColor, hslaTo, hsvTo, isAccessible, isDark, isGray, isLight, isTone, lightenColor, parseToHsla, parseToHsv, parseToRgba, randomColor, rgbaTo, sameColor, shadeColor, tintColor, transparentizeColor };
