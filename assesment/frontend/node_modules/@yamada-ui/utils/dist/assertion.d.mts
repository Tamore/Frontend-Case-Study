import { Dict } from './index.types.mjs';

declare function is(x: any, y: any): boolean;
declare function isNumber(value: any): value is number;
declare function isNotNumber(value: any): boolean;
declare function isNumeric(value: any): boolean;
declare function isString(value: any): value is string;
declare function isBoolean(value: any): value is boolean;
declare function isUndefined(value: any): value is undefined;
declare function isNull(value: any): value is null;
declare function isObject<T extends Dict>(value: any): value is T;
declare function isArray<T extends any[]>(value: any): value is T;
declare function isEmpty(value: any): boolean;
declare function isEmptyObject(value: any): boolean;
declare function isFunction<T extends Function = Function>(value: any): value is T;
declare function isUnit(value: any): boolean;
declare function cast<T>(value: any): T;

export { cast, is, isArray, isBoolean, isEmpty, isEmptyObject, isFunction, isNotNumber, isNull, isNumber, isNumeric, isObject, isString, isUndefined, isUnit };
