"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/dom.ts
var dom_exports = {};
__export(dom_exports, {
  ariaAttr: () => ariaAttr,
  createdDom: () => createdDom,
  dataAttr: () => dataAttr,
  getActiveElement: () => getActiveElement,
  getAllFocusable: () => getAllFocusable,
  getEventRelatedTarget: () => getEventRelatedTarget,
  getOwnerDocument: () => getOwnerDocument,
  getOwnerWindow: () => getOwnerWindow,
  getPlatform: () => getPlatform,
  getPx: () => getPx,
  hasNegativeTabIndex: () => hasNegativeTabIndex,
  hasTabIndex: () => hasTabIndex,
  isActiveElement: () => isActiveElement,
  isApple: () => isApple,
  isContains: () => isContains,
  isContentEditable: () => isContentEditable,
  isDisabled: () => isDisabled,
  isElement: () => isElement,
  isFocusable: () => isFocusable,
  isHTMLElement: () => isHTMLElement,
  isHidden: () => isHidden,
  isMac: () => isMac,
  isSafari: () => isSafari,
  isTabbable: () => isTabbable,
  isTouchDevice: () => isTouchDevice,
  platform: () => platform,
  vendor: () => vendor
});
module.exports = __toCommonJS(dom_exports);

// src/assertion.ts
function isNumber(value) {
  return typeof value === "number";
}
function isUndefined(value) {
  return typeof value === "undefined";
}

// src/dom.ts
function createdDom() {
  var _a;
  return !!(typeof window !== "undefined" && // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  ((_a = window.document) == null ? void 0 : _a.createElement));
}
function getPlatform() {
  var _a, _b;
  return (_b = (_a = navigator.userAgentData) == null ? void 0 : _a.platform) != null ? _b : navigator.platform;
}
function vendor(v) {
  return createdDom() && v.test(navigator.vendor);
}
function platform(v) {
  return createdDom() && v.test(getPlatform());
}
function isMac() {
  return platform(/^mac/i);
}
function isApple() {
  return platform(/mac|iphone|ipad|ipod/i);
}
function isSafari() {
  return isApple() && vendor(/apple/i);
}
function isElement(el) {
  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function isHTMLElement(el) {
  var _a;
  if (!isElement(el)) return false;
  const win = (_a = el.ownerDocument.defaultView) != null ? _a : window;
  return el instanceof win.HTMLElement;
}
function isHidden(el) {
  if (el.parentElement && isHidden(el.parentElement)) return true;
  return el.hidden;
}
function isDisabled(el) {
  return Boolean(el.getAttribute("disabled")) || Boolean(el.getAttribute("data-disabled")) || Boolean(el.getAttribute("aria-disabled"));
}
function isVisible(el) {
  return el.offsetWidth > 0 && el.offsetHeight > 0;
}
function hasTabIndex(el) {
  return el.hasAttribute("tabindex");
}
function isContentEditable(el) {
  const value = el.getAttribute("contenteditable");
  return value !== "false" && value != null;
}
function isContains(parent, child) {
  return parent === child || (parent == null ? void 0 : parent.contains(child));
}
function getPx(value) {
  if (isNumber(value)) return value;
  if (isUndefined(value)) return 0;
  if (value.includes("px")) return parseFloat(value);
  const isBrowser = createdDom();
  let fontSize = 16;
  if (isBrowser) {
    const style = window.getComputedStyle(document.documentElement);
    const computedFontSize = parseFloat(style.fontSize);
    if (!isNaN(computedFontSize)) fontSize = computedFontSize;
  }
  return parseFloat(value) * fontSize;
}
function getEventRelatedTarget(ev) {
  var _a;
  return (_a = ev.relatedTarget) != null ? _a : ev.currentTarget.ownerDocument.activeElement;
}
function dataAttr(condition) {
  return condition ? "" : void 0;
}
function ariaAttr(condition) {
  return condition ? true : void 0;
}
var focusableElList = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();
function getAllFocusable(container) {
  const focusableEls = Array.from(
    container.querySelectorAll(focusableElSelector)
  );
  focusableEls.unshift(container);
  return focusableEls.filter((el) => isFocusable(el) && isVisible(el));
}
function isFocusable(el) {
  if (!isHTMLElement(el) || isHidden(el) || isDisabled(el)) {
    return false;
  }
  const { localName } = el;
  const focusableTags = ["input", "select", "textarea", "button"];
  if (focusableTags.includes(localName)) return true;
  const others = {
    a: () => el.hasAttribute("href"),
    audio: () => el.hasAttribute("controls"),
    video: () => el.hasAttribute("controls")
  };
  if (localName in others) return others[localName]();
  if (isContentEditable(el)) return true;
  return hasTabIndex(el);
}
function hasNegativeTabIndex(el) {
  return hasTabIndex(el) && el.tabIndex === -1;
}
function isTabbable(el) {
  return el ? isHTMLElement(el) && isFocusable(el) && !hasNegativeTabIndex(el) : false;
}
function isTouchDevice() {
  return "ontouchstart" in window;
}
function getOwnerWindow(node) {
  var _a;
  return (_a = getOwnerDocument(node).defaultView) != null ? _a : window;
}
function getOwnerDocument(el) {
  return isElement(el) ? el.ownerDocument : document;
}
function getActiveElement(el) {
  return getOwnerDocument(el).activeElement;
}
function isActiveElement(el) {
  return getActiveElement(el) === el;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ariaAttr,
  createdDom,
  dataAttr,
  getActiveElement,
  getAllFocusable,
  getEventRelatedTarget,
  getOwnerDocument,
  getOwnerWindow,
  getPlatform,
  getPx,
  hasNegativeTabIndex,
  hasTabIndex,
  isActiveElement,
  isApple,
  isContains,
  isContentEditable,
  isDisabled,
  isElement,
  isFocusable,
  isHTMLElement,
  isHidden,
  isMac,
  isSafari,
  isTabbable,
  isTouchDevice,
  platform,
  vendor
});
//# sourceMappingURL=dom.js.map