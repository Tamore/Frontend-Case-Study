"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/number.ts
var number_exports = {};
__export(number_exports, {
  clampNumber: () => clampNumber,
  countDecimal: () => countDecimal,
  percentToValue: () => percentToValue,
  roundNumberToStep: () => roundNumberToStep,
  toNumber: () => toNumber,
  toPrecision: () => toPrecision,
  valueToPercent: () => valueToPercent
});
module.exports = __toCommonJS(number_exports);
function toNumber(n) {
  const num = parseFloat(n);
  return typeof num !== "number" || Number.isNaN(num) ? 0 : num;
}
function toPrecision(n, precision) {
  n = toNumber(n);
  const scale = 10 ** (precision != null ? precision : 10);
  n = Math.round(n * scale) / scale;
  return precision ? n.toFixed(precision) : n.toString();
}
function countDecimal(n) {
  if (!Number.isFinite(n)) return 0;
  let e = 1;
  let p = 0;
  while (Math.round(n * e) / e !== n) {
    e *= 10;
    p += 1;
  }
  return p;
}
function roundNumberToStep(n, from, step) {
  const nextValue = Math.round((n - from) / step) * step + from;
  const precision = countDecimal(step);
  return toPrecision(nextValue, precision);
}
function valueToPercent(n, min, max) {
  return (n - min) * 100 / (max - min);
}
function percentToValue(n, min, max) {
  return (max - min) * n + min;
}
function clampNumber(n, min, max) {
  return Math.min(Math.max(n, min), max);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  clampNumber,
  countDecimal,
  percentToValue,
  roundNumberToStep,
  toNumber,
  toPrecision,
  valueToPercent
});
//# sourceMappingURL=number.js.map