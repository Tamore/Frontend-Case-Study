"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/react.tsx
var react_exports = {};
__export(react_exports, {
  assignRef: () => assignRef,
  createContext: () => createContext2,
  createId: () => createId,
  cx: () => cx,
  findChild: () => findChild,
  findChildren: () => findChildren,
  getValidChildren: () => getValidChildren,
  includesChildren: () => includesChildren,
  isRefObject: () => isRefObject,
  isSomeElement: () => isSomeElement,
  isValidElement: () => isValidElement2,
  mergeRefs: () => mergeRefs,
  omitChildren: () => omitChildren,
  pickChildren: () => pickChildren,
  useAsync: () => useAsync,
  useAsyncFunc: () => useAsyncFunc,
  useAsyncRetry: () => useAsyncRetry,
  useCallbackRef: () => useCallbackRef,
  useIsMounted: () => useIsMounted,
  useMergeRefs: () => useMergeRefs,
  useSafeLayoutEffect: () => useSafeLayoutEffect,
  useUnmountEffect: () => useUnmountEffect,
  useUpdateEffect: () => useUpdateEffect
});
module.exports = __toCommonJS(react_exports);
var React = __toESM(require("react"));

// src/assertion.ts
function isNumber(value) {
  return typeof value === "number";
}
function isString(value) {
  return Object.prototype.toString.call(value) === "[object String]";
}
function isObject(value) {
  return value !== null && (typeof value === "object" || typeof value === "function") && !isArray(value);
}
function isArray(value) {
  return Array.isArray(value);
}

// src/react.tsx
function createContext2({
  name,
  defaultValue,
  errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
  strict = true
} = {}) {
  const Context = React.createContext(defaultValue);
  Context.displayName = name;
  const useContext2 = () => {
    const context = React.useContext(Context);
    if (!context && strict) {
      const error = new Error(errorMessage);
      error.name = "ContextError";
      Error.captureStackTrace(error, useContext2);
      throw error;
    }
    return context;
  };
  return [Context.Provider, useContext2, Context];
}
var useSafeLayoutEffect = Boolean(globalThis.document) ? React.useLayoutEffect : React.useEffect;
function useUnmountEffect(callback) {
  return React.useEffect(() => () => callback(), []);
}
function useIsMounted({
  delay = 0,
  rerender = false
} = {}) {
  const isMountedRef = React.useRef(false);
  const [isMounted, setIsMounted] = React.useState(false);
  useSafeLayoutEffect(() => {
    isMountedRef.current = true;
    let timeoutId = null;
    if (rerender) {
      if (delay > 0) {
        timeoutId = setTimeout(() => setIsMounted(true), delay);
      } else {
        setIsMounted(true);
      }
    }
    return () => {
      isMountedRef.current = false;
      if (rerender) setIsMounted(false);
      if (timeoutId) clearTimeout(timeoutId);
    };
  }, [delay, rerender]);
  return [React.useCallback(() => isMountedRef.current, []), isMounted];
}
function getValidChildren(children) {
  return React.Children.toArray(children).filter(
    (child) => React.isValidElement(child)
  );
}
function isValidElement2(child) {
  return React.isValidElement(child) || isString(child) || isNumber(child);
}
function isSomeElement(child, type) {
  var _a, _b;
  if (child.type === type) return true;
  if (!!child.__ui__ && !!type.__ui__) {
    if (child.__ui__ === type.__ui__) return true;
  }
  const payload = child.type._payload;
  if (!!((_a = payload == null ? void 0 : payload.value) == null ? void 0 : _a.__ui__) && !!type.__ui__) {
    if (((_b = payload == null ? void 0 : payload.value) == null ? void 0 : _b.__ui__) === type.__ui__) return true;
  }
  return false;
}
function findChild(children, ...types) {
  const child = children.find(
    (child2) => types.some((type) => isSomeElement(child2, type))
  );
  return child;
}
function findChildren(children, ...types) {
  const child = children.find(
    (child2) => types.some((type) => isSomeElement(child2, type))
  );
  if (child) {
    return children.sort((a, b) => {
      if (types.some((type) => isSomeElement(a, type))) {
        return -1;
      } else if (types.some((type) => isSomeElement(b, type))) {
        return 1;
      } else {
        return 0;
      }
    });
  } else {
    return [void 0, ...children];
  }
}
function includesChildren(children, ...types) {
  return children.some((child) => {
    if (types.some((type) => isSomeElement(child, type))) return true;
    const children2 = getValidChildren(child.props.children);
    return children2.length ? includesChildren(children2, ...types) : false;
  });
}
function omitChildren(children, ...types) {
  return children.filter(
    (child) => types.every((type) => !isSomeElement(child, type))
  );
}
function pickChildren(children, ...types) {
  return children.filter(
    (child) => types.every((type) => isSomeElement(child, type))
  );
}
function cx(...classNames) {
  return classNames.filter(Boolean).join(" ");
}
function isRefObject(val) {
  return isObject(val) && "current" in val;
}
function assignRef(ref, value) {
  if (ref == null) return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}
function mergeRefs(...refs) {
  return function(node) {
    return refs.forEach((ref) => {
      assignRef(ref, node);
    });
  };
}
function useMergeRefs(...refs) {
  return React.useMemo(() => mergeRefs(...refs), [refs]);
}
function useCallbackRef(callback, deps = []) {
  const callbackRef = React.useRef(callback);
  React.useEffect(() => {
    callbackRef.current = callback;
  });
  return React.useCallback(
    (...args) => {
      var _a;
      return (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef, ...args);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
}
function useUpdateEffect(callback, deps) {
  const renderCycleRef = React.useRef(false);
  const effectCycleRef = React.useRef(false);
  React.useEffect(() => {
    const mounted = renderCycleRef.current;
    const run = mounted && effectCycleRef.current;
    if (run) return callback();
    effectCycleRef.current = true;
  }, deps);
  React.useEffect(() => {
    renderCycleRef.current = true;
    return () => {
      renderCycleRef.current = false;
    };
  }, []);
}
function useAsync(func, deps = []) {
  const [state, callback] = useAsyncFunc(func, deps, { loading: true });
  React.useEffect(() => {
    callback();
  }, [callback]);
  return state;
}
function useAsyncFunc(func, deps = [], initialState = { loading: false }) {
  const lastCallId = React.useRef(0);
  const [isMounted] = useIsMounted();
  const [state, setState] = React.useState(initialState);
  const callback = React.useCallback(
    (...args) => {
      const callId = ++lastCallId.current;
      if (!state.loading)
        setState((prevState) => ({ ...prevState, loading: true }));
      return func(...args).then(
        (value) => {
          if (isMounted() && callId === lastCallId.current)
            setState({ loading: false, value });
          return value;
        },
        (error) => {
          if (isMounted() && callId === lastCallId.current)
            setState({ error, loading: false });
          return error;
        }
      );
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  return [state, callback];
}
function useAsyncRetry(func, deps = []) {
  const [attempt, setAttempt] = React.useState(0);
  const state = useAsync(func, [...deps, attempt]);
  const stateLoading = state.loading;
  const retry = React.useCallback(() => {
    if (stateLoading) return;
    setAttempt((currentAttempt) => currentAttempt + 1);
  }, [...deps, stateLoading]);
  return { ...state, retry };
}
var createIdCounter = 0;
function createId(prefix) {
  return `${prefix}-${++createIdCounter}-${(/* @__PURE__ */ new Date()).getTime()}`;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assignRef,
  createContext,
  createId,
  cx,
  findChild,
  findChildren,
  getValidChildren,
  includesChildren,
  isRefObject,
  isSomeElement,
  isValidElement,
  mergeRefs,
  omitChildren,
  pickChildren,
  useAsync,
  useAsyncFunc,
  useAsyncRetry,
  useCallbackRef,
  useIsMounted,
  useMergeRefs,
  useSafeLayoutEffect,
  useUnmountEffect,
  useUpdateEffect
});
//# sourceMappingURL=react.js.map