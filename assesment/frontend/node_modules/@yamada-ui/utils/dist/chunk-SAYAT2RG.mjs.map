{"version":3,"sources":["../src/event.ts"],"sourcesContent":["export type AnyPointerEvent = MouseEvent | PointerEvent | TouchEvent\n\nexport type PointType = \"client\" | \"page\"\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nexport interface PointerEventInfo {\n  point: Point\n}\n\nexport type MixedEventListener = (\n  e: AnyPointerEvent,\n  info: PointerEventInfo,\n) => void\n\nexport function isMouseEvent(ev: any): ev is MouseEvent {\n  const win = getEventWindow(ev)\n\n  if (typeof win.PointerEvent !== \"undefined\" && ev instanceof win.PointerEvent)\n    return !!(ev.pointerType === \"mouse\")\n\n  return ev instanceof win.MouseEvent\n}\n\nexport function isTouchEvent(ev: AnyPointerEvent): ev is TouchEvent {\n  return !!(ev as TouchEvent).touches\n}\n\nexport function isMultiTouchEvent(ev: AnyPointerEvent) {\n  return isTouchEvent(ev) && ev.touches.length > 1\n}\n\nexport function getEventWindow(ev: Event): typeof globalThis {\n  return ((ev as UIEvent).view ?? window) as unknown as typeof globalThis\n}\n\nexport function pointFromTouch(e: TouchEvent, type: PointType = \"page\") {\n  const point = e.touches[0] || e.changedTouches[0]\n\n  return { x: point?.[`${type}X`] ?? 0, y: point?.[`${type}Y`] ?? 0 }\n}\n\nexport function pointFromMouse(\n  point: MouseEvent | PointerEvent,\n  type: PointType = \"page\",\n) {\n  return {\n    x: point[`${type}X`],\n    y: point[`${type}Y`],\n  }\n}\n\nexport function getEventPoint(ev: AnyPointerEvent, type: PointType = \"page\") {\n  return isTouchEvent(ev) ? pointFromTouch(ev, type) : pointFromMouse(ev, type)\n}\n\nexport function addDomEvent(\n  target: EventTarget,\n  type: string,\n  cb: EventListener,\n  options?: AddEventListenerOptions,\n) {\n  target.addEventListener(type, cb, options)\n\n  return () => {\n    target.removeEventListener(type, cb, options)\n  }\n}\n\nfunction filter(cb: EventListener): EventListener {\n  return function (ev: Event) {\n    const isMouse = isMouseEvent(ev)\n\n    if (!isMouse || ev.button === 0) cb(ev)\n  }\n}\n\nfunction wrap(cb: MixedEventListener, filterPrimary = false): EventListener {\n  function listener(ev: any) {\n    return cb(ev, { point: getEventPoint(ev) })\n  }\n\n  const fn = filterPrimary ? filter(listener) : listener\n\n  return fn as EventListener\n}\n\nexport function addPointerEvent(\n  target: EventTarget,\n  type: string,\n  cb: MixedEventListener,\n  options?: AddEventListenerOptions,\n) {\n  return addDomEvent(target, type, wrap(cb, type === \"pointerdown\"), options)\n}\n"],"mappings":";AAkBO,SAAS,aAAa,IAA2B;AACtD,QAAM,MAAM,eAAe,EAAE;AAE7B,MAAI,OAAO,IAAI,iBAAiB,eAAe,cAAc,IAAI;AAC/D,WAAO,CAAC,EAAE,GAAG,gBAAgB;AAE/B,SAAO,cAAc,IAAI;AAC3B;AAEO,SAAS,aAAa,IAAuC;AAClE,SAAO,CAAC,CAAE,GAAkB;AAC9B;AAEO,SAAS,kBAAkB,IAAqB;AACrD,SAAO,aAAa,EAAE,KAAK,GAAG,QAAQ,SAAS;AACjD;AAEO,SAAS,eAAe,IAA8B;AAnC7D;AAoCE,UAAS,QAAe,SAAf,YAAuB;AAClC;AAEO,SAAS,eAAe,GAAe,OAAkB,QAAQ;AAvCxE;AAwCE,QAAM,QAAQ,EAAE,QAAQ,CAAC,KAAK,EAAE,eAAe,CAAC;AAEhD,SAAO,EAAE,IAAG,oCAAQ,GAAG,IAAI,SAAf,YAAuB,GAAG,IAAG,oCAAQ,GAAG,IAAI,SAAf,YAAuB,EAAE;AACpE;AAEO,SAAS,eACd,OACA,OAAkB,QAClB;AACA,SAAO;AAAA,IACL,GAAG,MAAM,GAAG,IAAI,GAAG;AAAA,IACnB,GAAG,MAAM,GAAG,IAAI,GAAG;AAAA,EACrB;AACF;AAEO,SAAS,cAAc,IAAqB,OAAkB,QAAQ;AAC3E,SAAO,aAAa,EAAE,IAAI,eAAe,IAAI,IAAI,IAAI,eAAe,IAAI,IAAI;AAC9E;AAEO,SAAS,YACd,QACA,MACA,IACA,SACA;AACA,SAAO,iBAAiB,MAAM,IAAI,OAAO;AAEzC,SAAO,MAAM;AACX,WAAO,oBAAoB,MAAM,IAAI,OAAO;AAAA,EAC9C;AACF;AAEA,SAAS,OAAO,IAAkC;AAChD,SAAO,SAAU,IAAW;AAC1B,UAAM,UAAU,aAAa,EAAE;AAE/B,QAAI,CAAC,WAAW,GAAG,WAAW,EAAG,IAAG,EAAE;AAAA,EACxC;AACF;AAEA,SAAS,KAAK,IAAwB,gBAAgB,OAAsB;AAC1E,WAAS,SAAS,IAAS;AACzB,WAAO,GAAG,IAAI,EAAE,OAAO,cAAc,EAAE,EAAE,CAAC;AAAA,EAC5C;AAEA,QAAM,KAAK,gBAAgB,OAAO,QAAQ,IAAI;AAE9C,SAAO;AACT;AAEO,SAAS,gBACd,QACA,MACA,IACA,SACA;AACA,SAAO,YAAY,QAAQ,MAAM,KAAK,IAAI,SAAS,aAAa,GAAG,OAAO;AAC5E;","names":[]}