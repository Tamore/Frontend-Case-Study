declare const noop: () => void;
declare function runIfFunc<T, U extends any[]>(valOrFunc: ((...funcArgs: U) => T) | T, ...args: U): T;
declare function handlerAll<T extends (event: any, ...args: any[]) => void>(...funcs: (T | undefined)[]): (event: T extends (event: infer R, ...args: any[]) => any ? R : never, ...args: T extends (event: any, ...args: infer R) => any ? R : never) => void;
declare function funcAll<T extends (...args: any[]) => any>(...funcs: (T | undefined)[]): (...args: T extends (...args: infer R) => any ? R : never) => void;

export { funcAll, handlerAll, noop, runIfFunc };
