// src/assertion.ts
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
}
function isNumber(value) {
  return typeof value === "number";
}
function isNotNumber(value) {
  return typeof value !== "number" || Number.isNaN(value) || !Number.isFinite(value);
}
function isNumeric(value) {
  return !isNaN(parseFloat(String(value))) && isFinite(Number(value)) && /^-?\d*\.?\d+$/.test(String(value));
}
function isString(value) {
  return Object.prototype.toString.call(value) === "[object String]";
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function isUndefined(value) {
  return typeof value === "undefined";
}
function isNull(value) {
  return value === null;
}
function isObject(value) {
  return value !== null && (typeof value === "object" || typeof value === "function") && !isArray(value);
}
function isArray(value) {
  return Array.isArray(value);
}
function isEmpty(value) {
  return !isArray(value) || !value.length || value.every((v) => v == null);
}
function isEmptyObject(value) {
  return isObject(value) && !Object.keys(value).length;
}
function isFunction(value) {
  return typeof value === "function";
}
function isUnit(value) {
  return /[0-9].*(em|rem|ex|rex|cap|rcap|ch|rch|ic|ric|lh|rlh|vw|svw|lvw|dvw|vh|svh|lvh|dvh|vi|svi|lvi|dvi|vb|svb|lvb|dvb|vmin|svmin|lvmin|dvmin|vmax|svmax|lvmax|dvmax|cm|mm|Q|in|pc|pt|px|%|cqw|cqh|cqi|cqb|cqmin|cqmax)$/.test(
    value
  );
}
function cast(value) {
  return value;
}

export {
  is,
  isNumber,
  isNotNumber,
  isNumeric,
  isString,
  isBoolean,
  isUndefined,
  isNull,
  isObject,
  isArray,
  isEmpty,
  isEmptyObject,
  isFunction,
  isUnit,
  cast
};
//# sourceMappingURL=chunk-QWVYBC6R.mjs.map