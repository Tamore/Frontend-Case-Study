{"version":3,"sources":["../src/string.ts"],"sourcesContent":["import type { StringLiteral } from \"./index.types\"\n\nexport function escape(value: string, replaceValue = \"\"): string {\n  return value.replace(/\\s+/g, replaceValue)\n}\n\nexport function antonym(value: string): string {\n  switch (value) {\n    case \"top\":\n      return \"bottom\"\n\n    case \"bottom\":\n      return \"top\"\n\n    case \"left\":\n      return \"right\"\n\n    case \"right\":\n      return \"left\"\n\n    case \"start\":\n      return \"end\"\n\n    case \"end\":\n      return \"start\"\n\n    case \"x\":\n      return \"y\"\n\n    case \"y\":\n      return \"x\"\n\n    case \"enter\":\n      return \"exit\"\n\n    case \"exit\":\n      return \"enter\"\n\n    case \"vertical\":\n      return \"horizontal\"\n\n    case \"horizontal\":\n      return \"vertical\"\n\n    case \"up\":\n      return \"down\"\n\n    case \"down\":\n      return \"up\"\n\n    case \"block\":\n      return \"inline\"\n\n    case \"inline\":\n      return \"block\"\n\n    default:\n      return value\n  }\n}\n\nconst sizeMap: StringLiteral[] = [\n  \"9xs\",\n  \"8xs\",\n  \"7xs\",\n  \"6xs\",\n  \"5xs\",\n  \"4xs\",\n  \"3xs\",\n  \"2xs\",\n  \"xs\",\n  \"sm\",\n  \"md\",\n  \"normal\",\n  \"lg\",\n  \"xl\",\n  \"2xl\",\n  \"3xl\",\n  \"4xl\",\n  \"5xl\",\n  \"6xl\",\n  \"7xl\",\n  \"8xl\",\n  \"9xl\",\n]\n\nexport function transformSize(\n  token: string | undefined,\n  value: number,\n  omitTokens: null | string[] = [\"normal\"],\n): string | undefined {\n  if (!token) return undefined\n\n  let resolvedSizeMap = sizeMap\n\n  if (omitTokens)\n    resolvedSizeMap = sizeMap.filter((size) => !omitTokens.includes(size))\n\n  const index = resolvedSizeMap.indexOf(token)\n  const size = resolvedSizeMap[index + value]\n\n  return size ?? token\n}\n\nexport function toCamelCase(value: StringLiteral): string {\n  return value.toLowerCase().replace(/[_-](.)/g, (_, val) => val.toUpperCase())\n}\n\nexport function toPascalCase(value: StringLiteral): string {\n  return toCamelCase(value).replace(/^(.)/, (_, val) => val.toUpperCase())\n}\n\nexport function toKebabCase(value: StringLiteral): string {\n  return value\n    .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1-$2\")\n    .toLowerCase()\n    .replace(/^-/, \"\")\n}\n\nexport function toTitleCase(value: StringLiteral): string {\n  return value\n    .replace(/([A-Z])/g, \" $1\")\n    .replace(/[_-](.)/g, (_, val) => ` ${val.toUpperCase()}`)\n    .replace(/^./, (str) => str.toUpperCase())\n    .trim()\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,SAAS,OAAO,OAAe,eAAe,IAAY;AAC/D,SAAO,MAAM,QAAQ,QAAQ,YAAY;AAC3C;AAEO,SAAS,QAAQ,OAAuB;AAC7C,UAAQ,OAAO;AAAA,IACb,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET,KAAK;AACH,aAAO;AAAA,IAET;AACE,aAAO;AAAA,EACX;AACF;AAEA,IAAM,UAA2B;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEO,SAAS,cACd,OACA,OACA,aAA8B,CAAC,QAAQ,GACnB;AACpB,MAAI,CAAC,MAAO,QAAO;AAEnB,MAAI,kBAAkB;AAEtB,MAAI;AACF,sBAAkB,QAAQ,OAAO,CAACA,UAAS,CAAC,WAAW,SAASA,KAAI,CAAC;AAEvE,QAAM,QAAQ,gBAAgB,QAAQ,KAAK;AAC3C,QAAM,OAAO,gBAAgB,QAAQ,KAAK;AAE1C,SAAO,sBAAQ;AACjB;AAEO,SAAS,YAAY,OAA8B;AACxD,SAAO,MAAM,YAAY,EAAE,QAAQ,YAAY,CAAC,GAAG,QAAQ,IAAI,YAAY,CAAC;AAC9E;AAEO,SAAS,aAAa,OAA8B;AACzD,SAAO,YAAY,KAAK,EAAE,QAAQ,QAAQ,CAAC,GAAG,QAAQ,IAAI,YAAY,CAAC;AACzE;AAEO,SAAS,YAAY,OAA8B;AACxD,SAAO,MACJ,QAAQ,gCAAgC,OAAO,EAC/C,YAAY,EACZ,QAAQ,MAAM,EAAE;AACrB;AAEO,SAAS,YAAY,OAA8B;AACxD,SAAO,MACJ,QAAQ,YAAY,KAAK,EACzB,QAAQ,YAAY,CAAC,GAAG,QAAQ,IAAI,IAAI,YAAY,CAAC,EAAE,EACvD,QAAQ,MAAM,CAAC,QAAQ,IAAI,YAAY,CAAC,EACxC,KAAK;AACV;","names":["size"]}