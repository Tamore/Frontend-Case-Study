import * as _yamada_ui_utils from '@yamada-ui/utils';
import { StringLiteral, Dict, Union, ObjectLiteral, Merge } from '@yamada-ui/utils';
import * as React from 'react';
import { RefObject, FC as FC$1, ReactNode, ForwardedRef } from 'react';
import { PortalProps } from '@yamada-ui/portal';
import { MotionConfigProps, Variants, HTMLMotionProps } from 'framer-motion';
import { GeneratedTheme } from './generated-theme.types.mjs';
import { UITheme } from './ui-theme.types.mjs';
import { CSSObject, Keyframes, Interpolation, ThemeProviderProps as ThemeProviderProps$1 } from '@emotion/react';
export { CSSObject, Interpolation, Keyframes } from '@emotion/react';
import * as CSS from 'csstype';
export { CSS };
import * as react_jsx_runtime from 'react/jsx-runtime';
import { FunctionInterpolation } from '@emotion/styled';

type BreakpointDirection = "down" | "up";
interface BreakpointOptions {
    /**
     * The base value for the `breakpoint` when `direction` is "down".
     * This is treated as the largest `breakpoint`.
     *
     * @default "9999px"
     */
    base?: string;
    /**
     * The `ref` of the container element used in `useBreakpoint` and others.
     *
     * Even if this `ref` is not set, CSS query will work, but JavaScript operations such as `useBreakpoint` will not work.
     *
     * @external
     */
    containerRef?: RefObject<HTMLElement>;
    /**
     * The `breakpoint` direction controls the responsive design approach.
     *
     * - `up`: mobile-first using `min-width`.
     * - `down`: desktop-first using `max-width`.
     *
     * @default "down"
     */
    direction?: BreakpointDirection;
    /**
     * The `breakpoint` custom identifier.
     *
     * @external
     *
     * @default "@media screen"
     */
    identifier?: "@media screen" | `@container ${string}` | `@container`;
}
type LoadingVariant = "audio" | "circles" | "dots" | "grid" | "oval" | "puff" | "rings";
type LoadingComponent = "background" | "custom" | "page" | "screen";
type NoticePlacement = "bottom" | "bottom-left" | "bottom-right" | "top" | "top-left" | "top-right";
type AlertStatuses = {
    [key in AlertStatus]?: {
        colorScheme?: Theme["colorSchemes"];
        icon?: FC$1;
    };
};
type AlertStatus = "error" | "info" | "loading" | "success" | "warning";
interface NoticeComponentProps extends NoticeConfigOptions {
    onClose: () => void;
}
interface NoticeConfigOptions extends ThemeProps<"Alert"> {
    /**
     * The custom style to use.
     */
    style?: CSSUIObject;
    /**
     * The strategy to remove the notice when `isClosable` is set to `true`
     *
     * @default 'button'
     */
    closeStrategy?: "both" | "button" | "element";
    /**
     * The custom notice component to use.
     */
    component?: (props: NoticeComponentProps) => ReactNode;
    /**
     * The description of the notice.
     */
    description?: ReactNode;
    /**
     * The number of `ms` the notice will continue to be displayed.
     *
     * If `null`, the notice will continue to display.
     * Please use in conjunction with `isClosable`.
     *
     * @default 5000
     */
    duration?: null | number;
    /**
     * The loading icon to use.
     */
    icon?: {
        variant?: LoadingVariant;
        children?: ReactNode;
        /**
         * The CSS `color` property.
         */
        color?: CSSUIProps["color"];
    };
    /**
     * If `true`, allows the notice to be removed.
     *
     * @default false
     */
    isClosable?: boolean;
    /**
     * The maximum value at which notice will be displayed.
     */
    limit?: number;
    /**
     * The placement of the notice.
     *
     * @default 'top'
     */
    placement?: NoticePlacement;
    /**
     * The status of the notice.
     *
     * @default 'info'
     */
    status?: AlertStatus;
    /**
     * The title of the notice.
     */
    title?: ReactNode;
}
type SnackDirection = "bottom" | "top";
interface SnackComponentProps extends SnackConfigOptions {
    index: number;
    onClose: () => void;
}
interface SnackConfigOptions extends ThemeProps<"Alert"> {
    /**
     * The custom style to use.
     */
    style?: CSSUIObject;
    /**
     * The CSS `box-shadow` property.
     *
     * @default '["base", "dark-sm"]'
     */
    boxShadow?: CSSUIProps["boxShadow"];
    /**
     * The strategy to remove the snack when `isClosable` is set to `true`
     *
     * @default 'button'
     */
    closeStrategy?: "both" | "button" | "element";
    /**
     * The custom snack component to use.
     */
    component?: (props: SnackComponentProps) => ReactNode;
    /**
     * The description of the snack.
     */
    description?: ReactNode;
    /**
     * The direction of the snacks.
     *
     * @default 'top'
     */
    direction?: SnackDirection;
    /**
     * The number of `ms` the snack will continue to be displayed.
     *
     * If `null`, the snack will continue to display.
     * Please use in conjunction with `isClosable`.
     *
     * @default null
     */
    duration?: null | number;
    /**
     * The loading icon to use.
     */
    icon?: {
        variant?: LoadingVariant;
        children?: ReactNode;
        /**
         * The CSS `color` property.
         */
        color?: CSSUIProps["color"];
    };
    /**
     * If `true`, allows the snack to be removed.
     *
     * @default true
     */
    isClosable?: boolean;
    /**
     * The maximum value at which snack will be displayed.
     *
     * @default 3
     */
    limit?: null | number;
    /**
     * If set the stack will start from the given index.
     *
     * @default 0
     */
    startIndex?: number;
    /**
     * The status of the snack.
     *
     * @default 'info'
     */
    status?: AlertStatus;
    /**
     * The title of the snack.
     */
    title?: ReactNode;
}
interface LoadingComponentProps {
    duration: null | number;
    icon: LoadingConfigOptions["icon"];
    message: ReactNode | undefined;
    text: LoadingConfigOptions["text"];
    onFinish: () => void;
    initialState?: boolean;
}
interface LoadingConfigOptions {
    /**
     * Handle zoom or pinch gestures on iOS devices when scroll locking is enabled.
     *
     * @default false.
     */
    allowPinchZoom?: boolean;
    /**
     * If `true`, the portal will check if it is within a parent portal
     * and append itself to the parent's portal node.
     * This provides nesting for portals.
     *
     * If `false`, the portal will always append to `document.body`
     * regardless of nesting. It is used to opt out of portal nesting.
     *
     * @default true
     */
    appendToParentPortal?: PortalProps["appendToParentPortal"];
    /**
     * If `true`, scrolling will be disabled on the `body` when the modal opens.
     *
     * @default true
     */
    blockScrollOnMount?: boolean;
    /**
     * The custom loading component to use.
     */
    component?: (props: LoadingComponentProps, ref: ForwardedRef<any>) => ReactNode;
    /**
     * The `ref` to the component where the portal will be attached to.
     */
    containerRef?: PortalProps["containerRef"];
    /**
     * The number of `ms` the loading will continue to be displayed.
     *
     * If `null`, the loading will continue to display.
     *
     * @default null
     */
    duration?: null | number;
    /**
     * Props for loading icon element.
     */
    icon?: {
        /**
         * The CSS `box-size` property.
         */
        size?: CSSUIProps["boxSize"];
        variant?: LoadingVariant;
        /**
         * The CSS `color` property.
         */
        color?: CSSUIProps["color"];
        /**
         * The CSS `color` property.
         */
        secondaryColor?: CSSUIProps["color"];
    };
    /**
     * If `true`, loaded from the initial rendering.
     *
     * @default false
     */
    initialState?: boolean;
    /**
     * Props for loading text element.
     */
    text?: {
        /**
         * The CSS `color` property.
         */
        color?: CSSUIProps["color"];
        /**
         * The CSS `font-family` property.
         */
        fontFamily?: CSSUIProps["fontFamily"];
        /**
         * The CSS `font-size` property.
         */
        fontSize?: CSSUIProps["fontSize"];
        /**
         * The CSS `font-weight` property.
         */
        fontWeight?: CSSUIProps["fontWeight"];
        /**
         * The CSS `letter-spacing` property.
         */
        letterSpacing?: CSSUIProps["letterSpacing"];
        /**
         * The CSS `line-height` property.
         */
        lineHeight?: CSSUIProps["letterSpacing"];
    };
}
interface ThemeConfig {
    /**
     * The config of the alert.
     */
    alert?: {
        /**
         * The statuses of the alert.
         */
        statuses?: AlertStatuses;
    };
    /**
     * The config of breakpoint.
     */
    breakpoint?: BreakpointOptions;
    /**
     * The config of the calendar or date picker etc.
     */
    date?: {
        /**
         * The locale of the calendar or date picker etc.
         * Check the docs to see the locale of possible modifiers you can pass.
         *
         * @see Docs https://day.js.org/docs/en/i18n/instance-locale
         * @default 'en'
         */
        locale?: string;
    };
    /**
     * If `true`, temporarily disable transitions.
     * This is used to avoid unnecessary movements caused by transitions during color mode switching, for example.
     *
     * @default false
     */
    disableTransitionOnChange?: boolean;
    /**
     * The initial color mode.
     * If `system`, the system will apply the color mode.
     *
     * @default 'light'
     */
    initialColorMode?: "dark" | "light" | "system";
    /**
     * The initial theme scheme.
     * This is only applicable if multiple themes are provided.
     *
     * @default 'base'
     */
    initialThemeScheme?: Theme["themeSchemes"];
    /**
     * The config of the loading.
     */
    loading?: {
        /**
         * The options of the background loading.
         */
        background?: LoadingConfigOptions;
        /**
         * The options of the custom loading.
         */
        custom?: LoadingConfigOptions;
        /**
         * The default component to use for `useAsyncCallback` and similar hooks.
         */
        defaultComponent?: LoadingComponent;
        /**
         * The options of the page loading.
         */
        page?: LoadingConfigOptions;
        /**
         * The options of the screen loading.
         */
        screen?: LoadingConfigOptions;
    };
    /**
     * The config of the `framer-motion`.
     */
    motion?: {
        /**
         * Set configuration options for `framer-motion`.
         *
         * @see Docs https://www.framer.com/motion/motion-config/
         */
        config?: Omit<MotionConfigProps, "children">;
    };
    /**
     * The config of the notice.
     */
    notice?: {
        /**
         * If `true`, the portal will check if it is within a parent portal
         * and append itself to the parent's portal node.
         * This provides nesting for portals.
         *
         * If `false`, the portal will always append to `document.body`
         * regardless of nesting. It is used to opt out of portal nesting.
         *
         * @default true
         */
        appendToParentPortal?: PortalProps["appendToParentPortal"];
        /**
         * The `ref` to the component where the portal will be attached to.
         */
        containerRef?: PortalProps["containerRef"];
        /**
         * The CSS `gap` property.
         *
         * @default 'md'
         */
        gap?: CSSUIProps["gap"];
        /**
         * The options of the notice.
         */
        options?: NoticeConfigOptions;
        /**
         * The variants of the notice.
         * Check the docs to see the variants of possible modifiers you can pass.
         *
         * @see Docs https://www.framer.com/motion/animation/#variants
         */
        variants?: Variants;
        /**
         * Props for notice item element.
         */
        itemProps?: HTMLMotionProps<"li">;
        /**
         * Props for notice list element.
         */
        listProps?: HTMLUIProps<"ul">;
    };
    /**
     * The config of the snacks.
     */
    snacks?: {
        /**
         * The CSS `gap` property.
         *
         * @default 'md'
         */
        gap?: CSSUIProps["gap"];
        /**
         * A property that provides spacing between the top and bottom.
         *
         * @default "[0, 0]"
         */
        gutter?: [CSSUIProps["paddingTop"], CSSUIProps["paddingBottom"]];
        /**
         * If `true`, apply gutter value to negative margin
         *
         * @default true
         */
        negateMargin?: boolean;
        /**
         * The options of the snack.
         */
        options?: SnackConfigOptions;
        /**
         * The variants of the snack.
         * Check the docs to see the variants of possible modifiers you can pass.
         *
         * @see Docs https://www.framer.com/motion/animation/#variants
         */
        variants?: Variants;
    };
    /**
     * The config of the theme.
     */
    theme?: {
        /**
         * If `true`, the theme tokens are converted into responsive object.
         *
         * @default false
         */
        responsive?: boolean;
    };
    /**
     * The config of CSS variables.
     */
    var?: {
        /**
         * The prefix to attach to variable names when converting each token of the theme to CSS variable names.
         *
         * @default 'ui'
         */
        prefix?: StringLiteral;
    };
}
interface LayerStyles {
    [key: string]: CSSUIObject;
}
interface TextStyles {
    [key: string]: CSSUIObject;
}
type ThemeValue = number | string;
interface ThemeTokens {
    [key: ThemeValue]: [Dict<ThemeValue> | ThemeValue, Dict<ThemeValue> | ThemeValue] | ThemeTokens | ThemeValue;
}
interface ThemeAnimationTokens<T extends AnimationStyle | string = AnimationStyle> {
    [key: ThemeValue]: T | T[] | ThemeAnimationTokens<T>;
}
interface ThemeTransitionTokens {
    duration?: ThemeTokens;
    easing?: ThemeTokens;
    property?: ThemeTokens;
}
interface ThemeBreakpointTokens {
    [key: ThemeValue]: ThemeValue;
}
interface SemanticColorSchemes {
    [key: string]: [Theme["colorSchemes"], Theme["colorSchemes"]] | Theme["colorSchemes"] | ThemeTokens;
}
interface ThemeSemanticTokens extends Omit<BaseTheme, "animations" | "breakpoints" | "components" | "semantics" | "styles" | "themeSchemes"> {
}
interface ThemeSemantics extends ThemeSemanticTokens {
    animations?: ThemeAnimationTokens<AnimationStyle | string>;
    colorSchemes?: SemanticColorSchemes;
}
interface NestedTheme extends Omit<BaseTheme, "breakpoints" | "components" | "styles" | "themeSchemes"> {
}
interface ThemeSchemes {
    [key: string]: NestedTheme;
}
interface ThemeComponents {
    [key: string]: ComponentMultiStyle | ComponentStyle;
}
interface BaseTheme {
    animations?: ThemeAnimationTokens;
    blurs?: ThemeTokens;
    borders?: ThemeTokens;
    breakpoints?: ThemeBreakpointTokens;
    colors?: ThemeTokens;
    components?: ThemeComponents;
    fonts?: ThemeTokens;
    fontSizes?: ThemeTokens;
    fontWeights?: ThemeTokens;
    gradients?: ThemeTokens;
    letterSpacings?: ThemeTokens;
    lineHeights?: ThemeTokens;
    radii?: ThemeTokens;
    semantics?: ThemeSemantics;
    shadows?: ThemeTokens;
    sizes?: ThemeTokens;
    spaces?: ThemeTokens;
    styles?: {
        [key: string]: any;
        globalStyle?: UIStyle;
        layerStyles?: LayerStyles;
        resetStyle?: UIStyle;
        textStyles?: TextStyles;
    };
    themeSchemes?: ThemeSchemes;
    transitions?: ThemeTransitionTokens;
    zIndices?: ThemeTokens;
}
interface UsageTheme extends BaseTheme {
    [key: string]: any;
}
type ComponentBaseStyle<Y extends Dict = Dict> = UIStyle<Y>;
interface ComponentVariants<Y extends Dict = Dict> {
    [key: string]: UIStyle<Y>;
}
interface ComponentSizes<Y extends Dict = Dict> {
    [key: string]: UIStyle<Y>;
}
type ComponentProps$1<Y extends keyof Theme["components"] | unknown = unknown, M extends Dict = Dict> = Partial<Omit<M, "colorScheme" | "size" | "variant">> & ThemeProps<Y>;
type ComponentDefaultProps<Y extends keyof Theme["components"] | unknown = unknown, M extends Dict = Dict> = ComponentProps$1<Y, M>;
type ComponentOverrideProps<Y extends keyof Theme["components"] | unknown = unknown, M extends Dict = Dict> = ((props: ComponentProps$1<Y, M>) => ComponentProps$1<Y, M>) | ComponentProps$1<Y, M>;
interface ComponentSharedStyle<Y extends keyof Theme["components"] | unknown = unknown, M extends Dict = Dict> {
    /**
     * The default props of the component.
     */
    defaultProps?: ComponentDefaultProps<Y, M>;
    /**
     * The override props of the component.
     */
    overrideProps?: ComponentOverrideProps<Y, M>;
}
interface ComponentStyle<Y extends keyof Theme["components"] | unknown = unknown, M extends Dict = Dict> extends ComponentSharedStyle<Y, M> {
    /**
     * The base style of the component.
     */
    baseStyle?: ComponentBaseStyle<M>;
    /**
     * The sizes of the component.
     */
    sizes?: ComponentSizes<M>;
    /**
     * The variants of the component.
     */
    variants?: ComponentVariants<M>;
}
type ComponentMultiBaseStyle<Y extends Dict = Dict> = UIMultiStyle<Y>;
interface ComponentMultiVariants<Y extends Dict = Dict> {
    [key: string]: UIMultiStyle<Y>;
}
interface ComponentMultiSizes<Y extends Dict = Dict> {
    [key: string]: UIMultiStyle<Y>;
}
interface ComponentMultiStyle<Y extends keyof Theme["components"] | unknown = unknown, M extends Dict = Dict> extends ComponentSharedStyle<Y, M> {
    /**
     * The base style of the component.
     */
    baseStyle?: ComponentMultiBaseStyle<M>;
    /**
     * The sizes of the component.
     */
    sizes?: ComponentMultiSizes<M>;
    /**
     * The variants of the component.
     */
    variants?: ComponentMultiVariants<M>;
}
interface CSSMap {
    [key: string]: {
        ref: string;
        var: string;
    };
}
interface CustomTheme {
}
interface CustomInternalTheme {
}
type InternalTheme = CustomInternalTheme extends Required<UsageTheme> ? CustomInternalTheme : UsageTheme;
type Theme = CustomTheme extends UITheme ? CustomTheme : GeneratedTheme;
type ChangeThemeScheme = (themeScheme: Theme["themeSchemes"]) => void;
type StyledTheme<T extends InternalTheme = InternalTheme> = {
    changeThemeScheme: ChangeThemeScheme;
    themeScheme: Theme["themeSchemes"];
    __breakpoints?: AnalyzeBreakpointsReturn;
    __config?: ThemeConfig;
    __cssMap?: CSSMap;
    __cssVars?: Dict;
} & T;

interface BreakpointQuery {
    breakpoint: string;
    maxW: number | undefined;
    maxWQuery: string | undefined;
    minMaxQuery: string | undefined;
    minW: number | undefined;
    minWQuery: string | undefined;
    query: string | undefined;
}
type BreakpointQueries = BreakpointQuery[];
interface Breakpoints {
    isResponsive: (obj: Dict, strict?: boolean) => boolean;
    keys: string[];
    queries: BreakpointQueries;
}
declare function createQuery(min: number | undefined, max: number | undefined, identifier?: string): string | undefined;
declare function analyzeBreakpoints(breakpoints: ThemeBreakpointTokens | undefined, options?: BreakpointOptions): Breakpoints | undefined;
type AnalyzeBreakpointsReturn = ReturnType<typeof analyzeBreakpoints>;
declare function getMinMaxQuery(queries: BreakpointQueries, direction: BreakpointDirection, pickKey?: string[]): {
    maxQuery: BreakpointQuery | undefined;
    minQuery: BreakpointQuery | undefined;
};

declare const attributes: {
    /**
     * The CSS `[data-accept]` attribute selector.
     */
    readonly _accept: "&[data-accept]";
    /**
     * The CSS `[data-between]` attribute selector.
     */
    readonly _between: "&[data-between]";
    /**
     * The CSS `[data-end]` attribute selector.
     */
    readonly _end: "&[data-end]";
    /**
     * The CSS `[aria-selected=true]` attribute selector.
     *
     * - `[aria-expanded=true]`
     * - `[data-expanded]`
     */
    readonly _expanded: "&[data-expanded], &[aria-expanded=true]";
    /**
     * The CSS `[data-filled]` attribute selector.
     */
    readonly _filled: "&[data-filled]";
    /**
     * The CSS `[data-grabbed]` attribute selector.
     *
     * - `[data-grabbed]`
     * - `[aria-grabbed=true]`
     */
    readonly _grabbed: "&[data-grabbed], &[aria-grabbed=true]";
    /**
     * The CSS `[hidden]` attribute selector.
     *
     * - `[hidden]`
     * - `[data-hidden]`
     */
    readonly _hidden: "&[hidden], &[data-hidden]";
    /**
     * The CSS `[data-holiday]` attribute selector.
     */
    readonly _holiday: "&[data-holiday]";
    /**
     * The CSS `[data-idle]` attribute selector.
     */
    readonly _idle: "&[data-idle]";
    /**
     * The CSS `[data-loaded]` attribute selector.
     */
    readonly _loaded: "&[data-loaded]";
    /**
     * The CSS `[aria-busy=true]` attribute selector.
     *
     * - `[data-loading]`
     * - `[aria-busy=true]`
     */
    readonly _loading: "&[data-loading], &[aria-busy=true]";
    /**
     * The CSS `[hidden]` attribute selector.
     */
    readonly _nativeHidden: "&[hidden]";
    /**
     * The CSS `[data-not-allowed]` attribute selector.
     *
     * - `[data-not-allowed]`
     */
    readonly _notAllowed: "&[data-not-allowed]";
    /**
     * The CSS `:where([data-outside])` attribute selector.
     */
    readonly _outside: "&:where([data-outside])";
    /**
     * The CSS `[data-pressed]` attribute selector.
     *
     * - `[data-pressed]`
     * - `[aria-pressed=true]`
     */
    readonly _pressed: "&[data-pressed], &[aria-pressed=true]";
    /**
     * The CSS `[data-reject]` attribute selector.
     */
    readonly _reject: "&[data-reject]";
    readonly _ripple: "& .ui-ripple";
    /**
     * The CSS `:selected` attribute selector.
     *
     * - `[data-selected]`
     * - `[aria-selected=true]`
     */
    readonly _selected: "&[data-selected], &[aria-selected=true]";
    /**
     * The CSS `[data-start]` attribute selector.
     */
    readonly _start: "&[data-start]";
    /**
     * The CSS `[data-today]` attribute selector.
     */
    readonly _today: "&[data-today]";
    /**
     * The CSS `:where([data-weekend])` attribute selector.
     */
    readonly _weekend: "&:where([data-weekend])";
};
type Attributes = typeof attributes;
type AttributeProperty = keyof Attributes;
type AttributeSelector = Attributes[AttributeProperty];
type AttributeProps = {
    [K in AttributeProperty]?: CSSUIObject;
};
declare const attributeProperties: AttributeProperty[];
declare const attributeSelectors: ("&[data-accept]" | "&[data-between]" | "&[data-end]" | "&[data-expanded], &[aria-expanded=true]" | "&[data-filled]" | "&[data-grabbed], &[aria-grabbed=true]" | "&[hidden], &[data-hidden]" | "&[data-holiday]" | "&[data-idle]" | "&[data-loaded]" | "&[data-loading], &[aria-busy=true]" | "&[hidden]" | "&[data-not-allowed]" | "&:where([data-outside])" | "&[data-pressed], &[aria-pressed=true]" | "&[data-reject]" | "& .ui-ripple" | "&[data-selected], &[aria-selected=true]" | "&[data-start]" | "&[data-today]" | "&:where([data-weekend])")[];
declare const pseudoElements: {
    /**
     * The CSS `::after` pseudo-element.
     */
    readonly _after: "&::after";
    /**
     * The CSS `::backdrop` pseudo-element.
     */
    readonly _backdrop: "&::backdrop";
    /**
     * The CSS `::before` pseudo-element.
     */
    readonly _before: "&::before";
    /**
     * The CSS `::cue` pseudo-element.
     */
    readonly _cue: "&::cue";
    /**
     * The CSS `::cue-region` pseudo-element.
     */
    readonly _cueRegion: "&::cue-region";
    /**
     * The CSS `::file-selector-button` pseudo-element.
     */
    readonly _fileSelector: "&::file-selector-button";
    /**
     * The CSS `::first-letter` pseudo-element.
     */
    readonly _firstLetter: "&::first-letter";
    /**
     * The CSS `::first-line` pseudo-element.
     */
    readonly _firstLine: "&::first-line";
    /**
     * The CSS `::marker` pseudo-element.
     */
    readonly _marker: "&::marker";
    /**
     * The CSS `::placeholder` pseudo-element.
     *
     * - `::placeholder`
     * - `[data-placeholder]`
     */
    readonly _placeholder: "&::placeholder, &[data-placeholder]";
    /**
     * The CSS `::-webkit-scrollbar` pseudo-element.
     *
     * - `::-webkit-scrollbar`
     * - `[data-scrollbar]`
     */
    readonly _scrollbar: "&::-webkit-scrollbar, &[data-scrollbar]";
    /**
     * The CSS `::-webkit-scrollbar-button` pseudo-element.
     */
    readonly _scrollbarButton: "&::-webkit-scrollbar-button";
    /**
     * The CSS `::-webkit-scrollbar-corner` pseudo-element.
     */
    readonly _scrollbarCorner: "&::-webkit-scrollbar-corner";
    /**
     * The CSS `::-webkit-scrollbar-thumb` pseudo-element.
     */
    readonly _scrollbarThumb: "&::-webkit-scrollbar-thumb";
    /**
     * The CSS `::-webkit-scrollbar-track` pseudo-element.
     */
    readonly _scrollbarTrack: "&::-webkit-scrollbar-track";
    /**
     * The CSS `::-webkit-scrollbar-track-piece` pseudo-element.
     */
    readonly _scrollbarTrackPiece: "&::-webkit-scrollbar-track-piece";
    /**
     * The CSS `::selection` pseudo-element.
     */
    readonly _selection: "&::selection";
};
type PseudoElements = typeof pseudoElements;
type PseudoElementProperty = keyof PseudoElements;
type PseudoElementSelector = PseudoElements[PseudoElementProperty];
type PseudoElementProps = {
    [K in PseudoElementProperty]?: CSSUIObject;
};
declare const pseudoElementProperties: PseudoElementProperty[];
declare const pseudoElementSelectors: ("&::after" | "&::backdrop" | "&::before" | "&::cue" | "&::cue-region" | "&::file-selector-button" | "&::first-letter" | "&::first-line" | "&::marker" | "&::placeholder, &[data-placeholder]" | "&::-webkit-scrollbar, &[data-scrollbar]" | "&::-webkit-scrollbar-button" | "&::-webkit-scrollbar-corner" | "&::-webkit-scrollbar-thumb" | "&::-webkit-scrollbar-track" | "&::-webkit-scrollbar-track-piece" | "&::selection")[];
declare const pseudoClasses: {
    /**
     * The CSS `:active` pseudo-class.
     *
     * - `:active`
     * - `[data-active]`
     */
    readonly _active: "&:active, &[data-active]";
    /**
     * The CSS `:any-link` pseudo-class.
     *
     * - `:any-link`
     * - `[data-any-link]`
     */
    readonly _anyLink: "&:any-link, &[data-any-link]";
    /**
     * The CSS `:autofill` pseudo-class.
     */
    readonly _autofill: "&:autofill, &:-webkit-autofill";
    /**
     * The CSS `:blank` pseudo-class.
     *
     * - `:blank`
     * - `[data-blank]`
     */
    readonly _blank: "&:blank, &[data-blank]";
    /**
     * The CSS `:checked` pseudo-class.
     *
     * - `:checked`
     * - `[data-checked]`
     * - `[aria-checked=true]`
     */
    readonly _checked: "&:checked, &[data-checked], &[aria-checked=true]";
    /**
     * The CSS `:default` pseudo-class.
     */
    readonly _default: "&:default";
    /**
     * The CSS `:disabled` pseudo-class.
     *
     * - `:disabled`
     * - `[disabled]`
     * - `[aria-disabled=true]`
     * - `[data-disabled]`
     */
    readonly _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]";
    /**
     * The CSS `:empty` pseudo-class.
     */
    readonly _empty: "&:empty";
    /**
     * The CSS `:enabled` pseudo-class.
     */
    readonly _enabled: "&:enabled, &[data-enabled]";
    /**
     * The CSS `:nth-of-type(even)` pseudo-class.
     */
    readonly _even: "&:nth-of-type(even)";
    /**
     * The CSS `:first-of-type` pseudo-class.
     */
    readonly _first: "&:first-of-type";
    /**
     * The CSS `:focus` pseudo-class.
     *
     * - `:focus`
     * - `[data-focus]`
     */
    readonly _focus: "&:focus, &[data-focus]";
    /**
     * The CSS `:focus-visible` pseudo-class.
     *
     * - `:focus-visible`
     * - `[data-focus-visible]`
     */
    readonly _focusVisible: "&:focus-visible, &[data-focus-visible]";
    /**
     * The CSS `:focus-within` pseudo-class.
     *
     * - `:focus-within`
     * - `[data-focus-within]`
     */
    readonly _focusWithin: "&:focus-within, &[data-focus-within]";
    /**
     * The CSS `:fullscreen` pseudo-class.
     */
    readonly _fullScreen: "&:fullscreen";
    /**
     * The CSS `:horizontal` pseudo-class.
     *
     * - `:horizontal`
     * - `[aria-orientation=horizontal]`
     * - `[data-orientation=horizontal]`
     */
    readonly _horizontal: "&:horizontal, &[data-orientation=horizontal], &[aria-orientation=horizontal]";
    /**
     * The CSS `:hover` pseudo-class.
     *
     * - `:hover`
     * - `[data-hover]`
     */
    readonly _hover: "&:hover, &[data-hover]";
    /**
     * The CSS `:indeterminate` pseudo-class.
     *
     * - `:indeterminate`
     * - `[aria-checked=mixed]`
     * - `[data-indeterminate]`
     */
    readonly _indeterminate: "&:indeterminate, &[data-indeterminate], &[aria-checked=mixed]";
    /**
     * The CSS `:in-range` pseudo-class.
     *
     * - `:in-range`
     * - `[data-in-range]`
     */
    readonly _inRange: "&:in-range, &[data-in-range]";
    /**
     * The CSS `:invalid` attribute selector.
     *
     * - `[data-invalid]`
     * - `[aria-invalid=true]`
     */
    readonly _invalid: "&[data-invalid], &[aria-invalid=true]";
    /**
     * The CSS `:last-of-type` pseudo-class.
     */
    readonly _last: "&:last-of-type";
    /**
     * The CSS `:link` pseudo-class.
     *
     * - `:link`
     * - `[data-link]`
     */
    readonly _link: "&:link, &[data-link]";
    /**
     * The CSS `:modal` pseudo-class.
     */
    readonly _modal: "&:modal";
    /**
     * The CSS `:active` pseudo-class.
     */
    readonly _nativeActive: "&:active";
    /**
     * The CSS `:checked` pseudo-class.
     */
    readonly _nativeChecked: "&:checked";
    /**
     * The CSS `:disabled` pseudo-class.
     *
     * - `:disabled`
     * - `[disabled]`
     */
    readonly _nativeDisabled: "&:disabled, &[disabled]";
    /**
     * The CSS `:focus` pseudo-class.
     */
    readonly _nativeFocus: "&:focus";
    /**
     * The CSS `:focus-visible` pseudo-class.
     */
    readonly _nativeFocusVisible: "&:focus-visible";
    /**
     * The CSS `:focus-within` pseudo-class.
     */
    readonly _nativeFocusWithin: "&:focus-within";
    /**
     * The CSS `:hover` pseudo-class.
     */
    readonly _nativeHover: "&:hover";
    /**
     * The CSS `:read-only` pseudo-class.
     *
     * - `[readonly]`
     * - `[aria-readonly=true]`
     */
    readonly _nativeReadOnly: "&[readonly], &[aria-readonly=true]";
    /**
     * The CSS `:target` pseudo-class.
     */
    readonly _nativeTarget: "&:target";
    /**
     * The CSS `:valid` pseudo-class.
     */
    readonly _nativeValid: "&:valid";
    /**
     * The CSS `:not(:first-of-type)` pseudo-class.
     */
    readonly _notFirst: "&:not(:first-of-type)";
    /**
     * The CSS `:not(:last-of-type)` pseudo-class.
     */
    readonly _notLast: "&:not(:last-of-type)";
    /**
     * The CSS `:not(:target)` pseudo-class.
     */
    readonly _notTarget: "&:not(:target)";
    /**
     * The CSS `:nth-of-type(odd)` pseudo-class.
     */
    readonly _odd: "&:nth-of-type(odd)";
    /**
     * The CSS `:only-of-type` pseudo-class.
     */
    readonly _only: "&:only-of-type";
    /**
     * The CSS `:optional` pseudo-class.
     *
     * - `:optional`
     * - `[data-optional]`
     */
    readonly _optional: "&:optional, &[data-optional]";
    /**
     * The CSS `:out-of-range` pseudo-class.
     *
     * - `:out-of-range`
     * - `[data-out-of-range]`
     */
    readonly _outRange: "&:out-of-range, &[data-out-of-range]";
    /**
     * The CSS `:paused` pseudo-class.
     *
     * - `:paused`
     * - `[data-paused]`
     */
    readonly _paused: "&:paused, &[data-paused]";
    /**
     * The CSS `:picture-in-picture` pseudo-class.
     */
    readonly _picture: "&:picture-in-picture";
    /**
     * The CSS `:placeholder-shown` pseudo-class.
     */
    readonly _placeholderShown: "&:placeholder-shown";
    /**
     * The CSS `:playing` pseudo-class.
     *
     * - `:playing`
     * - `[data-playing]`
     */
    readonly _playing: "&:playing, &[data-playing]";
    /**
     * The CSS `:read-only` pseudo-class.
     *
     * - `[readonly]`
     * - `[aria-readonly=true]`
     * - `[data-readonly]`
     */
    readonly _readOnly: "&[readonly], &[data-readonly], &[aria-readonly=true]";
    /**
     * The CSS `:read-write` pseudo-class.
     *
     * - `:read-write`
     * - `[data-read-write]`
     */
    readonly _readWrite: "&:read-write, &[data-read-write]";
    /**
     * The CSS `:required` pseudo-class.
     *
     * - `:required`
     * - `[required]`
     */
    readonly _required: "&:required, &[required]";
    /**
     * The CSS `:target` pseudo-class.
     *
     * - `:target`
     * - `[data-target]`
     */
    readonly _target: "&:target, &[data-target]";
    /**
     * The CSS `:user-invalid` pseudo-class.
     *
     * - `:user-invalid`
     * - `[data-user-invalid]`
     */
    readonly _userInvalid: "&:user-invalid, &[data-user-invalid]";
    /**
     * The CSS `:valid` pseudo-class.
     *
     * - `:valid`
     * - `[data-valid]`
     */
    readonly _valid: "&:valid, &[data-valid]";
    /**
     * The CSS `:vertical` pseudo-class.
     *
     * - `:vertical`
     * - `[aria-orientation=vertical]`
     * - `[data-orientation=vertical]`
     */
    readonly _vertical: "&:vertical, &[data-orientation=vertical], &[aria-orientation=vertical]";
    /**
     * The CSS `:visited` pseudo-class.
     */
    readonly _visited: "&:visited";
};
type PseudoClasses = typeof pseudoClasses;
type PseudoClassProperty = keyof PseudoClasses;
type PseudoClassSelector = PseudoClasses[PseudoClassProperty];
type PseudoClassProps = {
    [K in PseudoClassProperty]?: CSSUIObject;
};
declare const pseudoClassProperties: PseudoClassProperty[];
declare const pseudoClassSelectors: ("&:active, &[data-active]" | "&:any-link, &[data-any-link]" | "&:autofill, &:-webkit-autofill" | "&:blank, &[data-blank]" | "&:checked, &[data-checked], &[aria-checked=true]" | "&:default" | "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]" | "&:empty" | "&:enabled, &[data-enabled]" | "&:nth-of-type(even)" | "&:first-of-type" | "&:focus, &[data-focus]" | "&:focus-visible, &[data-focus-visible]" | "&:focus-within, &[data-focus-within]" | "&:fullscreen" | "&:horizontal, &[data-orientation=horizontal], &[aria-orientation=horizontal]" | "&:hover, &[data-hover]" | "&:indeterminate, &[data-indeterminate], &[aria-checked=mixed]" | "&:in-range, &[data-in-range]" | "&[data-invalid], &[aria-invalid=true]" | "&:last-of-type" | "&:link, &[data-link]" | "&:modal" | "&:active" | "&:checked" | "&:disabled, &[disabled]" | "&:focus" | "&:focus-visible" | "&:focus-within" | "&:hover" | "&[readonly], &[aria-readonly=true]" | "&:target" | "&:valid" | "&:not(:first-of-type)" | "&:not(:last-of-type)" | "&:not(:target)" | "&:nth-of-type(odd)" | "&:only-of-type" | "&:optional, &[data-optional]" | "&:out-of-range, &[data-out-of-range]" | "&:paused, &[data-paused]" | "&:picture-in-picture" | "&:placeholder-shown" | "&:playing, &[data-playing]" | "&[readonly], &[data-readonly], &[aria-readonly=true]" | "&:read-write, &[data-read-write]" | "&:required, &[required]" | "&:target, &[data-target]" | "&:user-invalid, &[data-user-invalid]" | "&:valid, &[data-valid]" | "&:vertical, &[data-orientation=vertical], &[aria-orientation=vertical]" | "&:visited")[];
declare const atRules: {
    /**
     * Styles for when `data-mode` is applied to any parent of this component or element.
     */
    readonly _dark: ".ui-dark &:not([data-mode]), [data-mode=dark] &:not([data-mode]), &[data-mode=dark]";
    /**
     * The CSS `@media (orientation: landscape)` media query.
     */
    readonly _landscape: "@media (orientation: landscape)";
    /**
     * Styles for when `data-mode` is applied to any parent of this component or element.
     */
    readonly _light: ".ui-light &:not([data-mode]), [data-mode=light] &:not([data-mode]), &[data-mode=light]";
    /**
     * The CSS `@media (prefers-color-scheme: dark)` media query.
     */
    readonly _mediaDark: "@media (prefers-color-scheme: dark)";
    /**
     * The CSS `@media (prefers-color-scheme: light)` media query.
     */
    readonly _mediaLight: "@media (prefers-color-scheme: light)";
    /**
     * The CSS `@media (prefers-reduced-motion: reduce)` media query.
     */
    readonly _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)";
    /**
     * The CSS `@media (orientation: portrait)` media query.
     */
    readonly _portrait: "@media (orientation: portrait)";
    /**
     * The CSS `@media print` media query.
     */
    readonly _print: "@media print";
};
type AtRules = typeof atRules;
type AtRuleProperty = keyof AtRules;
type AtRuleSelector = AtRules[AtRuleProperty];
type AtRuleProps = {
    [K in keyof AtRules]?: CSSUIObject;
};
declare const atRuleProperties: AtRuleProperty[];
declare const atRuleSelectors: (".ui-dark &:not([data-mode]), [data-mode=dark] &:not([data-mode]), &[data-mode=dark]" | "@media (orientation: landscape)" | ".ui-light &:not([data-mode]), [data-mode=light] &:not([data-mode]), &[data-mode=light]" | "@media (prefers-color-scheme: dark)" | "@media (prefers-color-scheme: light)" | "@media (prefers-reduced-motion: reduce)" | "@media (orientation: portrait)" | "@media print")[];
declare const groupAttributes: {
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is accepted.
     */
    readonly _groupAccept: "[role=group][data-accept] &, [data-group][data-accept] &, .group[data-accept] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is active.
     */
    readonly _groupActive: "[role=group]:active &, [role=group][data-active] &, [data-group]:active &, [data-group][data-active] &, .group:active &, .group[data-active] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is blank.
     */
    readonly _groupBlank: "[role=group]:blank &, [role=group][data-blank] &, [data-group]:blank &, [data-group][data-blank] &, .group:blank &, .group[data-blank] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is checked.
     */
    readonly _groupChecked: "[role=group]:checked &, [role=group][data-checked] &, [role=group][aria-checked=true] &, [data-group]:checked &, [data-group][data-checked] &, [data-group][aria-checked=true] &, .group:checked &, .group[data-checked] &, .group[aria-checked=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is disabled.
     */
    readonly _groupDisabled: "[role=group]:disabled &, [role=group][disabled] &, [role=group][aria-disabled=true] &, [role=group][data-disabled] &, [data-group]:disabled &, [data-group][disabled] &, [data-group][aria-disabled=true] &, [data-group][data-disabled] &, .group:disabled &, .group[disabled] &, .group[aria-disabled=true] &, .group[data-disabled] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is enabled.
     */
    readonly _groupEnabled: "[role=group]:enabled &, [role=group][data-enabled] &, [data-group]:enabled &, [data-group][data-enabled] &, .group:enabled &, .group[data-enabled] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is expanded.
     */
    readonly _groupExpanded: "[role=group][data-expanded] &, [role=group][aria-expanded=true] &, [data-group][data-expanded] &, [data-group][aria-expanded=true] &, .group[data-expanded] &, .group[aria-expanded=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is focused.
     */
    readonly _groupFocus: "[role=group]:focus &, [role=group][data-focus] &, [data-group]:focus &, [data-group][data-focus] &, .group:focus &, .group[data-focus] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is focused-visible.
     */
    readonly _groupFocusVisible: "[role=group]:focus-visible &, [role=group][data-focus-visible] &, [data-group]:focus-visible &, [data-group][data-focus-visible] &, .group:focus-visible &, .group[data-focus-visible] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is focus-within.
     */
    readonly _groupFocusWithin: "[role=group]:focus-within &, [role=group][data-focus-within] &, [data-group]:focus-within &, [data-group][data-focus-within] &, .group:focus-within &, .group[data-focus-within] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is grabbed.
     */
    readonly _groupGrabbed: "[role=group][data-grabbed] &, [role=group][aria-grabbed=true] &, [data-group][data-grabbed] &, [data-group][aria-grabbed=true] &, .group[data-grabbed] &, .group[aria-grabbed=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is horizontal.
     */
    readonly _groupHorizontal: "[role=group]:horizontal &, [role=group][data-orientation=horizontal] &, [role=group][aria-orientation=horizontal] &, [data-group]:horizontal &, [data-group][data-orientation=horizontal] &, [data-group][aria-orientation=horizontal] &, .group:horizontal &, .group[data-orientation=horizontal] &, .group[aria-orientation=horizontal] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is hovered.
     */
    readonly _groupHover: "[role=group]:hover &, [role=group][data-hover] &, [data-group]:hover &, [data-group][data-hover] &, .group:hover &, .group[data-hover] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is idle.
     */
    readonly _groupIdle: "[role=group][data-idle] &, [data-group][data-idle] &, .group[data-idle] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is invalid.
     */
    readonly _groupInvalid: "[role=group][data-invalid] &, [role=group][aria-invalid=true] &, [data-group][data-invalid] &, [data-group][aria-invalid=true] &, .group[data-invalid] &, .group[aria-invalid=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is loaded.
     */
    readonly _groupLoaded: "[role=group][data-loaded] &, [data-group][data-loaded] &, .group[data-loaded] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is loading.
     */
    readonly _groupLoading: "[role=group][data-loading] &, [role=group][aria-busy=true] &, [data-group][data-loading] &, [data-group][aria-busy=true] &, .group[data-loading] &, .group[aria-busy=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is optional.
     */
    readonly _groupOptional: "[role=group]:optional &, [role=group][data-optional] &, [data-group]:optional &, [data-group][data-optional] &, .group:optional &, .group[data-optional] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` has a placeholder shown.
     */
    readonly _groupPlaceholderShown: "[role=group]:placeholder-shown &, [data-group]:placeholder-shown &, .group:placeholder-shown &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is pressed.
     */
    readonly _groupPressed: "[role=group][data-pressed] &, [role=group][aria-pressed=true] &, [data-group][data-pressed] &, [data-group][aria-pressed=true] &, .group[data-pressed] &, .group[aria-pressed=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is read-only.
     */
    readonly _groupReadOnly: "[role=group][readonly] &, [role=group][data-readonly] &, [role=group][aria-readonly=true] &, [data-group][readonly] &, [data-group][data-readonly] &, [data-group][aria-readonly=true] &, .group[readonly] &, .group[data-readonly] &, .group[aria-readonly=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is read-write.
     */
    readonly _groupReadWrite: "[role=group]:read-write &, [role=group][data-read-write] &, [data-group]:read-write &, [data-group][data-read-write] &, .group:read-write &, .group[data-read-write] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is rejected.
     */
    readonly _groupReject: "[role=group][data-reject] &, [data-group][data-reject] &, .group[data-reject] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is required.
     */
    readonly _groupRequired: "[role=group]:required &, [role=group][required] &, [data-group]:required &, [data-group][required] &, .group:required &, .group[required] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is selected.
     */
    readonly _groupSelected: "[role=group][data-selected] &, [role=group][aria-selected=true] &, [data-group][data-selected] &, [data-group][aria-selected=true] &, .group[data-selected] &, .group[aria-selected=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is user-invalid.
     */
    readonly _groupUserInvalid: "[role=group]:user-invalid &, [role=group][data-user-invalid] &, [data-group]:user-invalid &, [data-group][data-user-invalid] &, .group:user-invalid &, .group[data-user-invalid] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is valid.
     */
    readonly _groupValid: "[role=group]:valid &, [role=group][data-valid] &, [data-group]:valid &, [data-group][data-valid] &, .group:valid &, .group[data-valid] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is vertical.
     */
    readonly _groupVertical: "[role=group]:vertical &, [role=group][data-orientation=vertical] &, [role=group][aria-orientation=vertical] &, [data-group]:vertical &, [data-group][data-orientation=vertical] &, [data-group][aria-orientation=vertical] &, .group:vertical &, .group[data-orientation=vertical] &, .group[aria-orientation=vertical] &";
};
type GroupAttributes = typeof groupAttributes;
type GroupAttributeProperty = keyof GroupAttributes;
type GroupAttributeSelector = GroupAttributes[GroupAttributeProperty];
type GroupAttributeProps = {
    [K in GroupAttributeProperty]?: CSSUIObject;
};
declare const groupAttributeProperties: GroupAttributeProperty[];
declare const groupAttributeSelectors: ("[role=group][data-accept] &, [data-group][data-accept] &, .group[data-accept] &" | "[role=group]:active &, [role=group][data-active] &, [data-group]:active &, [data-group][data-active] &, .group:active &, .group[data-active] &" | "[role=group]:blank &, [role=group][data-blank] &, [data-group]:blank &, [data-group][data-blank] &, .group:blank &, .group[data-blank] &" | "[role=group]:checked &, [role=group][data-checked] &, [role=group][aria-checked=true] &, [data-group]:checked &, [data-group][data-checked] &, [data-group][aria-checked=true] &, .group:checked &, .group[data-checked] &, .group[aria-checked=true] &" | "[role=group]:disabled &, [role=group][disabled] &, [role=group][aria-disabled=true] &, [role=group][data-disabled] &, [data-group]:disabled &, [data-group][disabled] &, [data-group][aria-disabled=true] &, [data-group][data-disabled] &, .group:disabled &, .group[disabled] &, .group[aria-disabled=true] &, .group[data-disabled] &" | "[role=group]:enabled &, [role=group][data-enabled] &, [data-group]:enabled &, [data-group][data-enabled] &, .group:enabled &, .group[data-enabled] &" | "[role=group][data-expanded] &, [role=group][aria-expanded=true] &, [data-group][data-expanded] &, [data-group][aria-expanded=true] &, .group[data-expanded] &, .group[aria-expanded=true] &" | "[role=group]:focus &, [role=group][data-focus] &, [data-group]:focus &, [data-group][data-focus] &, .group:focus &, .group[data-focus] &" | "[role=group]:focus-visible &, [role=group][data-focus-visible] &, [data-group]:focus-visible &, [data-group][data-focus-visible] &, .group:focus-visible &, .group[data-focus-visible] &" | "[role=group]:focus-within &, [role=group][data-focus-within] &, [data-group]:focus-within &, [data-group][data-focus-within] &, .group:focus-within &, .group[data-focus-within] &" | "[role=group][data-grabbed] &, [role=group][aria-grabbed=true] &, [data-group][data-grabbed] &, [data-group][aria-grabbed=true] &, .group[data-grabbed] &, .group[aria-grabbed=true] &" | "[role=group]:horizontal &, [role=group][data-orientation=horizontal] &, [role=group][aria-orientation=horizontal] &, [data-group]:horizontal &, [data-group][data-orientation=horizontal] &, [data-group][aria-orientation=horizontal] &, .group:horizontal &, .group[data-orientation=horizontal] &, .group[aria-orientation=horizontal] &" | "[role=group]:hover &, [role=group][data-hover] &, [data-group]:hover &, [data-group][data-hover] &, .group:hover &, .group[data-hover] &" | "[role=group][data-idle] &, [data-group][data-idle] &, .group[data-idle] &" | "[role=group][data-invalid] &, [role=group][aria-invalid=true] &, [data-group][data-invalid] &, [data-group][aria-invalid=true] &, .group[data-invalid] &, .group[aria-invalid=true] &" | "[role=group][data-loaded] &, [data-group][data-loaded] &, .group[data-loaded] &" | "[role=group][data-loading] &, [role=group][aria-busy=true] &, [data-group][data-loading] &, [data-group][aria-busy=true] &, .group[data-loading] &, .group[aria-busy=true] &" | "[role=group]:optional &, [role=group][data-optional] &, [data-group]:optional &, [data-group][data-optional] &, .group:optional &, .group[data-optional] &" | "[role=group]:placeholder-shown &, [data-group]:placeholder-shown &, .group:placeholder-shown &" | "[role=group][data-pressed] &, [role=group][aria-pressed=true] &, [data-group][data-pressed] &, [data-group][aria-pressed=true] &, .group[data-pressed] &, .group[aria-pressed=true] &" | "[role=group][readonly] &, [role=group][data-readonly] &, [role=group][aria-readonly=true] &, [data-group][readonly] &, [data-group][data-readonly] &, [data-group][aria-readonly=true] &, .group[readonly] &, .group[data-readonly] &, .group[aria-readonly=true] &" | "[role=group]:read-write &, [role=group][data-read-write] &, [data-group]:read-write &, [data-group][data-read-write] &, .group:read-write &, .group[data-read-write] &" | "[role=group][data-reject] &, [data-group][data-reject] &, .group[data-reject] &" | "[role=group]:required &, [role=group][required] &, [data-group]:required &, [data-group][required] &, .group:required &, .group[required] &" | "[role=group][data-selected] &, [role=group][aria-selected=true] &, [data-group][data-selected] &, [data-group][aria-selected=true] &, .group[data-selected] &, .group[aria-selected=true] &" | "[role=group]:user-invalid &, [role=group][data-user-invalid] &, [data-group]:user-invalid &, [data-group][data-user-invalid] &, .group:user-invalid &, .group[data-user-invalid] &" | "[role=group]:valid &, [role=group][data-valid] &, [data-group]:valid &, [data-group][data-valid] &, .group:valid &, .group[data-valid] &" | "[role=group]:vertical &, [role=group][data-orientation=vertical] &, [role=group][aria-orientation=vertical] &, [data-group]:vertical &, [data-group][data-orientation=vertical] &, [data-group][aria-orientation=vertical] &, .group:vertical &, .group[data-orientation=vertical] &, .group[aria-orientation=vertical] &")[];
declare const peerAttributes: {
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is accepted.
     */
    readonly _peerAccept: "[data-peer][data-accept] ~ &, .peer[data-accept] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is active.
     */
    readonly _peerActive: "[data-peer]:active ~ &, [data-peer][data-active] ~ &, .peer:active ~ &, .peer[data-active] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is blank.
     */
    readonly _peerBlank: "[data-peer]:blank ~ &, [data-peer][data-blank] ~ &, .peer:blank ~ &, .peer[data-blank] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is checked.
     */
    readonly _peerChecked: "[data-peer]:checked ~ &, [data-peer][data-checked] ~ &, [data-peer][aria-checked=true] ~ &, .peer:checked ~ &, .peer[data-checked] ~ &, .peer[aria-checked=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is disabled.
     */
    readonly _peerDisabled: "[data-peer]:disabled ~ &, [data-peer][disabled] ~ &, [data-peer][aria-disabled=true] ~ &, [data-peer][data-disabled] ~ &, .peer:disabled ~ &, .peer[disabled] ~ &, .peer[aria-disabled=true] ~ &, .peer[data-disabled] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is enabled.
     */
    readonly _peerEnabled: "[data-peer]:enabled ~ &, [data-peer][data-enabled] ~ &, .peer:enabled ~ &, .peer[data-enabled] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is expanded.
     */
    readonly _peerExpanded: "[data-peer][data-expanded] ~ &, [data-peer][aria-expanded=true] ~ &, .peer[data-expanded] ~ &, .peer[aria-expanded=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is focused.
     */
    readonly _peerFocus: "[data-peer]:focus ~ &, [data-peer][data-focus] ~ &, .peer:focus ~ &, .peer[data-focus] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is focused-visible.
     */
    readonly _peerFocusVisible: "[data-peer]:focus-visible ~ &, [data-peer][data-focus-visible] ~ &, .peer:focus-visible ~ &, .peer[data-focus-visible] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is focus-within.
     */
    readonly _peerFocusWithin: "[data-peer]:focus-within ~ &, [data-peer][data-focus-within] ~ &, .peer:focus-within ~ &, .peer[data-focus-within] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is grabbed.
     */
    readonly _peerGrabbed: "[data-peer][data-grabbed] ~ &, [data-peer][aria-grabbed=true] ~ &, .peer[data-grabbed] ~ &, .peer[aria-grabbed=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is horizontal.
     */
    readonly _peerHorizontal: "[data-peer]:horizontal ~ &, [data-peer][data-orientation=horizontal] ~ &, [data-peer][aria-orientation=horizontal] ~ &, .peer:horizontal ~ &, .peer[data-orientation=horizontal] ~ &, .peer[aria-orientation=horizontal] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is hovered.
     */
    readonly _peerHover: "[data-peer]:hover ~ &, [data-peer][data-hover] ~ &, .peer:hover ~ &, .peer[data-hover] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is idle.
     */
    readonly _peerIdle: "[data-peer][data-idle] ~ &, .peer[data-idle] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is invalid.
     */
    readonly _peerInvalid: "[data-peer][data-invalid] ~ &, [data-peer][aria-invalid=true] ~ &, .peer[data-invalid] ~ &, .peer[aria-invalid=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is loaded.
     */
    readonly _peerLoaded: "[data-peer][data-loaded] ~ &, .peer[data-loaded] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is loading.
     */
    readonly _peerLoading: "[data-peer][data-loading] ~ &, [data-peer][aria-busy=true] ~ &, .peer[data-loading] ~ &, .peer[aria-busy=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is optional.
     */
    readonly _peerOptional: "[data-peer]:optional ~ &, [data-peer][data-optional] ~ &, .peer:optional ~ &, .peer[data-optional] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` has a placeholder shown.
     */
    readonly _peerPlaceholderShown: "[data-peer]:placeholder-shown ~ &, .peer:placeholder-shown ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is pressed.
     */
    readonly _peerPressed: "[data-peer][data-pressed] ~ &, [data-peer][aria-pressed=true] ~ &, .peer[data-pressed] ~ &, .peer[aria-pressed=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is read-only.
     */
    readonly _peerReadOnly: "[data-peer][readonly] ~ &, [data-peer][data-readonly] ~ &, [data-peer][aria-readonly=true] ~ &, .peer[readonly] ~ &, .peer[data-readonly] ~ &, .peer[aria-readonly=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is read-write.
     */
    readonly _peerReadWrite: "[data-peer]:read-write ~ &, [data-peer][data-read-write] ~ &, .peer:read-write ~ &, .peer[data-read-write] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is rejected.
     */
    readonly _peerReject: "[data-peer][data-reject] ~ &, .peer[data-reject] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is required.
     */
    readonly _peerRequired: "[data-peer]:required ~ &, [data-peer][required] ~ &, .peer:required ~ &, .peer[required] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is selected.
     */
    readonly _peerSelected: "[data-peer][data-selected] ~ &, [data-peer][aria-selected=true] ~ &, .peer[data-selected] ~ &, .peer[aria-selected=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is user-invalid.
     */
    readonly _peerUserInvalid: "[data-peer]:user-invalid ~ &, [data-peer][data-user-invalid] ~ &, .peer:user-invalid ~ &, .peer[data-user-invalid] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is valid.
     */
    readonly _peerValid: "[data-peer]:valid ~ &, [data-peer][data-valid] ~ &, .peer:valid ~ &, .peer[data-valid] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is vertical.
     */
    readonly _peerVertical: "[data-peer]:vertical ~ &, [data-peer][data-orientation=vertical] ~ &, [data-peer][aria-orientation=vertical] ~ &, .peer:vertical ~ &, .peer[data-orientation=vertical] ~ &, .peer[aria-orientation=vertical] ~ &";
};
type PeerAttributes = typeof peerAttributes;
type PeerAttributeProperty = keyof PeerAttributes;
type PeerAttributeSelector = PeerAttributes[PeerAttributeProperty];
type PeerAttributeProps = {
    [K in PeerAttributeProperty]?: CSSUIObject;
};
declare const peerAttributeProperties: PeerAttributeProperty[];
declare const peerAttributeSelectors: ("[data-peer][data-accept] ~ &, .peer[data-accept] ~ &" | "[data-peer]:active ~ &, [data-peer][data-active] ~ &, .peer:active ~ &, .peer[data-active] ~ &" | "[data-peer]:blank ~ &, [data-peer][data-blank] ~ &, .peer:blank ~ &, .peer[data-blank] ~ &" | "[data-peer]:checked ~ &, [data-peer][data-checked] ~ &, [data-peer][aria-checked=true] ~ &, .peer:checked ~ &, .peer[data-checked] ~ &, .peer[aria-checked=true] ~ &" | "[data-peer]:disabled ~ &, [data-peer][disabled] ~ &, [data-peer][aria-disabled=true] ~ &, [data-peer][data-disabled] ~ &, .peer:disabled ~ &, .peer[disabled] ~ &, .peer[aria-disabled=true] ~ &, .peer[data-disabled] ~ &" | "[data-peer]:enabled ~ &, [data-peer][data-enabled] ~ &, .peer:enabled ~ &, .peer[data-enabled] ~ &" | "[data-peer][data-expanded] ~ &, [data-peer][aria-expanded=true] ~ &, .peer[data-expanded] ~ &, .peer[aria-expanded=true] ~ &" | "[data-peer]:focus ~ &, [data-peer][data-focus] ~ &, .peer:focus ~ &, .peer[data-focus] ~ &" | "[data-peer]:focus-visible ~ &, [data-peer][data-focus-visible] ~ &, .peer:focus-visible ~ &, .peer[data-focus-visible] ~ &" | "[data-peer]:focus-within ~ &, [data-peer][data-focus-within] ~ &, .peer:focus-within ~ &, .peer[data-focus-within] ~ &" | "[data-peer][data-grabbed] ~ &, [data-peer][aria-grabbed=true] ~ &, .peer[data-grabbed] ~ &, .peer[aria-grabbed=true] ~ &" | "[data-peer]:horizontal ~ &, [data-peer][data-orientation=horizontal] ~ &, [data-peer][aria-orientation=horizontal] ~ &, .peer:horizontal ~ &, .peer[data-orientation=horizontal] ~ &, .peer[aria-orientation=horizontal] ~ &" | "[data-peer]:hover ~ &, [data-peer][data-hover] ~ &, .peer:hover ~ &, .peer[data-hover] ~ &" | "[data-peer][data-idle] ~ &, .peer[data-idle] ~ &" | "[data-peer][data-invalid] ~ &, [data-peer][aria-invalid=true] ~ &, .peer[data-invalid] ~ &, .peer[aria-invalid=true] ~ &" | "[data-peer][data-loaded] ~ &, .peer[data-loaded] ~ &" | "[data-peer][data-loading] ~ &, [data-peer][aria-busy=true] ~ &, .peer[data-loading] ~ &, .peer[aria-busy=true] ~ &" | "[data-peer]:optional ~ &, [data-peer][data-optional] ~ &, .peer:optional ~ &, .peer[data-optional] ~ &" | "[data-peer]:placeholder-shown ~ &, .peer:placeholder-shown ~ &" | "[data-peer][data-pressed] ~ &, [data-peer][aria-pressed=true] ~ &, .peer[data-pressed] ~ &, .peer[aria-pressed=true] ~ &" | "[data-peer][readonly] ~ &, [data-peer][data-readonly] ~ &, [data-peer][aria-readonly=true] ~ &, .peer[readonly] ~ &, .peer[data-readonly] ~ &, .peer[aria-readonly=true] ~ &" | "[data-peer]:read-write ~ &, [data-peer][data-read-write] ~ &, .peer:read-write ~ &, .peer[data-read-write] ~ &" | "[data-peer][data-reject] ~ &, .peer[data-reject] ~ &" | "[data-peer]:required ~ &, [data-peer][required] ~ &, .peer:required ~ &, .peer[required] ~ &" | "[data-peer][data-selected] ~ &, [data-peer][aria-selected=true] ~ &, .peer[data-selected] ~ &, .peer[aria-selected=true] ~ &" | "[data-peer]:user-invalid ~ &, [data-peer][data-user-invalid] ~ &, .peer:user-invalid ~ &, .peer[data-user-invalid] ~ &" | "[data-peer]:valid ~ &, [data-peer][data-valid] ~ &, .peer:valid ~ &, .peer[data-valid] ~ &" | "[data-peer]:vertical ~ &, [data-peer][data-orientation=vertical] ~ &, [data-peer][aria-orientation=vertical] ~ &, .peer:vertical ~ &, .peer[data-orientation=vertical] ~ &, .peer[aria-orientation=vertical] ~ &")[];
declare const pseudos: {
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is accepted.
     */
    readonly _peerAccept: "[data-peer][data-accept] ~ &, .peer[data-accept] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is active.
     */
    readonly _peerActive: "[data-peer]:active ~ &, [data-peer][data-active] ~ &, .peer:active ~ &, .peer[data-active] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is blank.
     */
    readonly _peerBlank: "[data-peer]:blank ~ &, [data-peer][data-blank] ~ &, .peer:blank ~ &, .peer[data-blank] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is checked.
     */
    readonly _peerChecked: "[data-peer]:checked ~ &, [data-peer][data-checked] ~ &, [data-peer][aria-checked=true] ~ &, .peer:checked ~ &, .peer[data-checked] ~ &, .peer[aria-checked=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is disabled.
     */
    readonly _peerDisabled: "[data-peer]:disabled ~ &, [data-peer][disabled] ~ &, [data-peer][aria-disabled=true] ~ &, [data-peer][data-disabled] ~ &, .peer:disabled ~ &, .peer[disabled] ~ &, .peer[aria-disabled=true] ~ &, .peer[data-disabled] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is enabled.
     */
    readonly _peerEnabled: "[data-peer]:enabled ~ &, [data-peer][data-enabled] ~ &, .peer:enabled ~ &, .peer[data-enabled] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is expanded.
     */
    readonly _peerExpanded: "[data-peer][data-expanded] ~ &, [data-peer][aria-expanded=true] ~ &, .peer[data-expanded] ~ &, .peer[aria-expanded=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is focused.
     */
    readonly _peerFocus: "[data-peer]:focus ~ &, [data-peer][data-focus] ~ &, .peer:focus ~ &, .peer[data-focus] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is focused-visible.
     */
    readonly _peerFocusVisible: "[data-peer]:focus-visible ~ &, [data-peer][data-focus-visible] ~ &, .peer:focus-visible ~ &, .peer[data-focus-visible] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is focus-within.
     */
    readonly _peerFocusWithin: "[data-peer]:focus-within ~ &, [data-peer][data-focus-within] ~ &, .peer:focus-within ~ &, .peer[data-focus-within] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is grabbed.
     */
    readonly _peerGrabbed: "[data-peer][data-grabbed] ~ &, [data-peer][aria-grabbed=true] ~ &, .peer[data-grabbed] ~ &, .peer[aria-grabbed=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is horizontal.
     */
    readonly _peerHorizontal: "[data-peer]:horizontal ~ &, [data-peer][data-orientation=horizontal] ~ &, [data-peer][aria-orientation=horizontal] ~ &, .peer:horizontal ~ &, .peer[data-orientation=horizontal] ~ &, .peer[aria-orientation=horizontal] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is hovered.
     */
    readonly _peerHover: "[data-peer]:hover ~ &, [data-peer][data-hover] ~ &, .peer:hover ~ &, .peer[data-hover] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is idle.
     */
    readonly _peerIdle: "[data-peer][data-idle] ~ &, .peer[data-idle] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is invalid.
     */
    readonly _peerInvalid: "[data-peer][data-invalid] ~ &, [data-peer][aria-invalid=true] ~ &, .peer[data-invalid] ~ &, .peer[aria-invalid=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is loaded.
     */
    readonly _peerLoaded: "[data-peer][data-loaded] ~ &, .peer[data-loaded] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is loading.
     */
    readonly _peerLoading: "[data-peer][data-loading] ~ &, [data-peer][aria-busy=true] ~ &, .peer[data-loading] ~ &, .peer[aria-busy=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is optional.
     */
    readonly _peerOptional: "[data-peer]:optional ~ &, [data-peer][data-optional] ~ &, .peer:optional ~ &, .peer[data-optional] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` has a placeholder shown.
     */
    readonly _peerPlaceholderShown: "[data-peer]:placeholder-shown ~ &, .peer:placeholder-shown ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is pressed.
     */
    readonly _peerPressed: "[data-peer][data-pressed] ~ &, [data-peer][aria-pressed=true] ~ &, .peer[data-pressed] ~ &, .peer[aria-pressed=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is read-only.
     */
    readonly _peerReadOnly: "[data-peer][readonly] ~ &, [data-peer][data-readonly] ~ &, [data-peer][aria-readonly=true] ~ &, .peer[readonly] ~ &, .peer[data-readonly] ~ &, .peer[aria-readonly=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is read-write.
     */
    readonly _peerReadWrite: "[data-peer]:read-write ~ &, [data-peer][data-read-write] ~ &, .peer:read-write ~ &, .peer[data-read-write] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is rejected.
     */
    readonly _peerReject: "[data-peer][data-reject] ~ &, .peer[data-reject] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is required.
     */
    readonly _peerRequired: "[data-peer]:required ~ &, [data-peer][required] ~ &, .peer:required ~ &, .peer[required] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is selected.
     */
    readonly _peerSelected: "[data-peer][data-selected] ~ &, [data-peer][aria-selected=true] ~ &, .peer[data-selected] ~ &, .peer[aria-selected=true] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is user-invalid.
     */
    readonly _peerUserInvalid: "[data-peer]:user-invalid ~ &, [data-peer][data-user-invalid] ~ &, .peer:user-invalid ~ &, .peer[data-user-invalid] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is valid.
     */
    readonly _peerValid: "[data-peer]:valid ~ &, [data-peer][data-valid] ~ &, .peer:valid ~ &, .peer[data-valid] ~ &";
    /**
     * Styles to apply when a parent element with `data-peer` or `.peer` is vertical.
     */
    readonly _peerVertical: "[data-peer]:vertical ~ &, [data-peer][data-orientation=vertical] ~ &, [data-peer][aria-orientation=vertical] ~ &, .peer:vertical ~ &, .peer[data-orientation=vertical] ~ &, .peer[aria-orientation=vertical] ~ &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is accepted.
     */
    readonly _groupAccept: "[role=group][data-accept] &, [data-group][data-accept] &, .group[data-accept] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is active.
     */
    readonly _groupActive: "[role=group]:active &, [role=group][data-active] &, [data-group]:active &, [data-group][data-active] &, .group:active &, .group[data-active] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is blank.
     */
    readonly _groupBlank: "[role=group]:blank &, [role=group][data-blank] &, [data-group]:blank &, [data-group][data-blank] &, .group:blank &, .group[data-blank] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is checked.
     */
    readonly _groupChecked: "[role=group]:checked &, [role=group][data-checked] &, [role=group][aria-checked=true] &, [data-group]:checked &, [data-group][data-checked] &, [data-group][aria-checked=true] &, .group:checked &, .group[data-checked] &, .group[aria-checked=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is disabled.
     */
    readonly _groupDisabled: "[role=group]:disabled &, [role=group][disabled] &, [role=group][aria-disabled=true] &, [role=group][data-disabled] &, [data-group]:disabled &, [data-group][disabled] &, [data-group][aria-disabled=true] &, [data-group][data-disabled] &, .group:disabled &, .group[disabled] &, .group[aria-disabled=true] &, .group[data-disabled] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is enabled.
     */
    readonly _groupEnabled: "[role=group]:enabled &, [role=group][data-enabled] &, [data-group]:enabled &, [data-group][data-enabled] &, .group:enabled &, .group[data-enabled] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is expanded.
     */
    readonly _groupExpanded: "[role=group][data-expanded] &, [role=group][aria-expanded=true] &, [data-group][data-expanded] &, [data-group][aria-expanded=true] &, .group[data-expanded] &, .group[aria-expanded=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is focused.
     */
    readonly _groupFocus: "[role=group]:focus &, [role=group][data-focus] &, [data-group]:focus &, [data-group][data-focus] &, .group:focus &, .group[data-focus] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is focused-visible.
     */
    readonly _groupFocusVisible: "[role=group]:focus-visible &, [role=group][data-focus-visible] &, [data-group]:focus-visible &, [data-group][data-focus-visible] &, .group:focus-visible &, .group[data-focus-visible] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is focus-within.
     */
    readonly _groupFocusWithin: "[role=group]:focus-within &, [role=group][data-focus-within] &, [data-group]:focus-within &, [data-group][data-focus-within] &, .group:focus-within &, .group[data-focus-within] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is grabbed.
     */
    readonly _groupGrabbed: "[role=group][data-grabbed] &, [role=group][aria-grabbed=true] &, [data-group][data-grabbed] &, [data-group][aria-grabbed=true] &, .group[data-grabbed] &, .group[aria-grabbed=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is horizontal.
     */
    readonly _groupHorizontal: "[role=group]:horizontal &, [role=group][data-orientation=horizontal] &, [role=group][aria-orientation=horizontal] &, [data-group]:horizontal &, [data-group][data-orientation=horizontal] &, [data-group][aria-orientation=horizontal] &, .group:horizontal &, .group[data-orientation=horizontal] &, .group[aria-orientation=horizontal] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is hovered.
     */
    readonly _groupHover: "[role=group]:hover &, [role=group][data-hover] &, [data-group]:hover &, [data-group][data-hover] &, .group:hover &, .group[data-hover] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is idle.
     */
    readonly _groupIdle: "[role=group][data-idle] &, [data-group][data-idle] &, .group[data-idle] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is invalid.
     */
    readonly _groupInvalid: "[role=group][data-invalid] &, [role=group][aria-invalid=true] &, [data-group][data-invalid] &, [data-group][aria-invalid=true] &, .group[data-invalid] &, .group[aria-invalid=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is loaded.
     */
    readonly _groupLoaded: "[role=group][data-loaded] &, [data-group][data-loaded] &, .group[data-loaded] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is loading.
     */
    readonly _groupLoading: "[role=group][data-loading] &, [role=group][aria-busy=true] &, [data-group][data-loading] &, [data-group][aria-busy=true] &, .group[data-loading] &, .group[aria-busy=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is optional.
     */
    readonly _groupOptional: "[role=group]:optional &, [role=group][data-optional] &, [data-group]:optional &, [data-group][data-optional] &, .group:optional &, .group[data-optional] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` has a placeholder shown.
     */
    readonly _groupPlaceholderShown: "[role=group]:placeholder-shown &, [data-group]:placeholder-shown &, .group:placeholder-shown &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is pressed.
     */
    readonly _groupPressed: "[role=group][data-pressed] &, [role=group][aria-pressed=true] &, [data-group][data-pressed] &, [data-group][aria-pressed=true] &, .group[data-pressed] &, .group[aria-pressed=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is read-only.
     */
    readonly _groupReadOnly: "[role=group][readonly] &, [role=group][data-readonly] &, [role=group][aria-readonly=true] &, [data-group][readonly] &, [data-group][data-readonly] &, [data-group][aria-readonly=true] &, .group[readonly] &, .group[data-readonly] &, .group[aria-readonly=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is read-write.
     */
    readonly _groupReadWrite: "[role=group]:read-write &, [role=group][data-read-write] &, [data-group]:read-write &, [data-group][data-read-write] &, .group:read-write &, .group[data-read-write] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is rejected.
     */
    readonly _groupReject: "[role=group][data-reject] &, [data-group][data-reject] &, .group[data-reject] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is required.
     */
    readonly _groupRequired: "[role=group]:required &, [role=group][required] &, [data-group]:required &, [data-group][required] &, .group:required &, .group[required] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is selected.
     */
    readonly _groupSelected: "[role=group][data-selected] &, [role=group][aria-selected=true] &, [data-group][data-selected] &, [data-group][aria-selected=true] &, .group[data-selected] &, .group[aria-selected=true] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is user-invalid.
     */
    readonly _groupUserInvalid: "[role=group]:user-invalid &, [role=group][data-user-invalid] &, [data-group]:user-invalid &, [data-group][data-user-invalid] &, .group:user-invalid &, .group[data-user-invalid] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is valid.
     */
    readonly _groupValid: "[role=group]:valid &, [role=group][data-valid] &, [data-group]:valid &, [data-group][data-valid] &, .group:valid &, .group[data-valid] &";
    /**
     * Styles to apply when a parent element with `role=group`, `data-group` or `.group` is vertical.
     */
    readonly _groupVertical: "[role=group]:vertical &, [role=group][data-orientation=vertical] &, [role=group][aria-orientation=vertical] &, [data-group]:vertical &, [data-group][data-orientation=vertical] &, [data-group][aria-orientation=vertical] &, .group:vertical &, .group[data-orientation=vertical] &, .group[aria-orientation=vertical] &";
    /**
     * Styles for when `data-mode` is applied to any parent of this component or element.
     */
    readonly _dark: ".ui-dark &:not([data-mode]), [data-mode=dark] &:not([data-mode]), &[data-mode=dark]";
    /**
     * The CSS `@media (orientation: landscape)` media query.
     */
    readonly _landscape: "@media (orientation: landscape)";
    /**
     * Styles for when `data-mode` is applied to any parent of this component or element.
     */
    readonly _light: ".ui-light &:not([data-mode]), [data-mode=light] &:not([data-mode]), &[data-mode=light]";
    /**
     * The CSS `@media (prefers-color-scheme: dark)` media query.
     */
    readonly _mediaDark: "@media (prefers-color-scheme: dark)";
    /**
     * The CSS `@media (prefers-color-scheme: light)` media query.
     */
    readonly _mediaLight: "@media (prefers-color-scheme: light)";
    /**
     * The CSS `@media (prefers-reduced-motion: reduce)` media query.
     */
    readonly _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)";
    /**
     * The CSS `@media (orientation: portrait)` media query.
     */
    readonly _portrait: "@media (orientation: portrait)";
    /**
     * The CSS `@media print` media query.
     */
    readonly _print: "@media print";
    /**
     * The CSS `:active` pseudo-class.
     *
     * - `:active`
     * - `[data-active]`
     */
    readonly _active: "&:active, &[data-active]";
    /**
     * The CSS `:any-link` pseudo-class.
     *
     * - `:any-link`
     * - `[data-any-link]`
     */
    readonly _anyLink: "&:any-link, &[data-any-link]";
    /**
     * The CSS `:autofill` pseudo-class.
     */
    readonly _autofill: "&:autofill, &:-webkit-autofill";
    /**
     * The CSS `:blank` pseudo-class.
     *
     * - `:blank`
     * - `[data-blank]`
     */
    readonly _blank: "&:blank, &[data-blank]";
    /**
     * The CSS `:checked` pseudo-class.
     *
     * - `:checked`
     * - `[data-checked]`
     * - `[aria-checked=true]`
     */
    readonly _checked: "&:checked, &[data-checked], &[aria-checked=true]";
    /**
     * The CSS `:default` pseudo-class.
     */
    readonly _default: "&:default";
    /**
     * The CSS `:disabled` pseudo-class.
     *
     * - `:disabled`
     * - `[disabled]`
     * - `[aria-disabled=true]`
     * - `[data-disabled]`
     */
    readonly _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]";
    /**
     * The CSS `:empty` pseudo-class.
     */
    readonly _empty: "&:empty";
    /**
     * The CSS `:enabled` pseudo-class.
     */
    readonly _enabled: "&:enabled, &[data-enabled]";
    /**
     * The CSS `:nth-of-type(even)` pseudo-class.
     */
    readonly _even: "&:nth-of-type(even)";
    /**
     * The CSS `:first-of-type` pseudo-class.
     */
    readonly _first: "&:first-of-type";
    /**
     * The CSS `:focus` pseudo-class.
     *
     * - `:focus`
     * - `[data-focus]`
     */
    readonly _focus: "&:focus, &[data-focus]";
    /**
     * The CSS `:focus-visible` pseudo-class.
     *
     * - `:focus-visible`
     * - `[data-focus-visible]`
     */
    readonly _focusVisible: "&:focus-visible, &[data-focus-visible]";
    /**
     * The CSS `:focus-within` pseudo-class.
     *
     * - `:focus-within`
     * - `[data-focus-within]`
     */
    readonly _focusWithin: "&:focus-within, &[data-focus-within]";
    /**
     * The CSS `:fullscreen` pseudo-class.
     */
    readonly _fullScreen: "&:fullscreen";
    /**
     * The CSS `:horizontal` pseudo-class.
     *
     * - `:horizontal`
     * - `[aria-orientation=horizontal]`
     * - `[data-orientation=horizontal]`
     */
    readonly _horizontal: "&:horizontal, &[data-orientation=horizontal], &[aria-orientation=horizontal]";
    /**
     * The CSS `:hover` pseudo-class.
     *
     * - `:hover`
     * - `[data-hover]`
     */
    readonly _hover: "&:hover, &[data-hover]";
    /**
     * The CSS `:indeterminate` pseudo-class.
     *
     * - `:indeterminate`
     * - `[aria-checked=mixed]`
     * - `[data-indeterminate]`
     */
    readonly _indeterminate: "&:indeterminate, &[data-indeterminate], &[aria-checked=mixed]";
    /**
     * The CSS `:in-range` pseudo-class.
     *
     * - `:in-range`
     * - `[data-in-range]`
     */
    readonly _inRange: "&:in-range, &[data-in-range]";
    /**
     * The CSS `:invalid` attribute selector.
     *
     * - `[data-invalid]`
     * - `[aria-invalid=true]`
     */
    readonly _invalid: "&[data-invalid], &[aria-invalid=true]";
    /**
     * The CSS `:last-of-type` pseudo-class.
     */
    readonly _last: "&:last-of-type";
    /**
     * The CSS `:link` pseudo-class.
     *
     * - `:link`
     * - `[data-link]`
     */
    readonly _link: "&:link, &[data-link]";
    /**
     * The CSS `:modal` pseudo-class.
     */
    readonly _modal: "&:modal";
    /**
     * The CSS `:active` pseudo-class.
     */
    readonly _nativeActive: "&:active";
    /**
     * The CSS `:checked` pseudo-class.
     */
    readonly _nativeChecked: "&:checked";
    /**
     * The CSS `:disabled` pseudo-class.
     *
     * - `:disabled`
     * - `[disabled]`
     */
    readonly _nativeDisabled: "&:disabled, &[disabled]";
    /**
     * The CSS `:focus` pseudo-class.
     */
    readonly _nativeFocus: "&:focus";
    /**
     * The CSS `:focus-visible` pseudo-class.
     */
    readonly _nativeFocusVisible: "&:focus-visible";
    /**
     * The CSS `:focus-within` pseudo-class.
     */
    readonly _nativeFocusWithin: "&:focus-within";
    /**
     * The CSS `:hover` pseudo-class.
     */
    readonly _nativeHover: "&:hover";
    /**
     * The CSS `:read-only` pseudo-class.
     *
     * - `[readonly]`
     * - `[aria-readonly=true]`
     */
    readonly _nativeReadOnly: "&[readonly], &[aria-readonly=true]";
    /**
     * The CSS `:target` pseudo-class.
     */
    readonly _nativeTarget: "&:target";
    /**
     * The CSS `:valid` pseudo-class.
     */
    readonly _nativeValid: "&:valid";
    /**
     * The CSS `:not(:first-of-type)` pseudo-class.
     */
    readonly _notFirst: "&:not(:first-of-type)";
    /**
     * The CSS `:not(:last-of-type)` pseudo-class.
     */
    readonly _notLast: "&:not(:last-of-type)";
    /**
     * The CSS `:not(:target)` pseudo-class.
     */
    readonly _notTarget: "&:not(:target)";
    /**
     * The CSS `:nth-of-type(odd)` pseudo-class.
     */
    readonly _odd: "&:nth-of-type(odd)";
    /**
     * The CSS `:only-of-type` pseudo-class.
     */
    readonly _only: "&:only-of-type";
    /**
     * The CSS `:optional` pseudo-class.
     *
     * - `:optional`
     * - `[data-optional]`
     */
    readonly _optional: "&:optional, &[data-optional]";
    /**
     * The CSS `:out-of-range` pseudo-class.
     *
     * - `:out-of-range`
     * - `[data-out-of-range]`
     */
    readonly _outRange: "&:out-of-range, &[data-out-of-range]";
    /**
     * The CSS `:paused` pseudo-class.
     *
     * - `:paused`
     * - `[data-paused]`
     */
    readonly _paused: "&:paused, &[data-paused]";
    /**
     * The CSS `:picture-in-picture` pseudo-class.
     */
    readonly _picture: "&:picture-in-picture";
    /**
     * The CSS `:placeholder-shown` pseudo-class.
     */
    readonly _placeholderShown: "&:placeholder-shown";
    /**
     * The CSS `:playing` pseudo-class.
     *
     * - `:playing`
     * - `[data-playing]`
     */
    readonly _playing: "&:playing, &[data-playing]";
    /**
     * The CSS `:read-only` pseudo-class.
     *
     * - `[readonly]`
     * - `[aria-readonly=true]`
     * - `[data-readonly]`
     */
    readonly _readOnly: "&[readonly], &[data-readonly], &[aria-readonly=true]";
    /**
     * The CSS `:read-write` pseudo-class.
     *
     * - `:read-write`
     * - `[data-read-write]`
     */
    readonly _readWrite: "&:read-write, &[data-read-write]";
    /**
     * The CSS `:required` pseudo-class.
     *
     * - `:required`
     * - `[required]`
     */
    readonly _required: "&:required, &[required]";
    /**
     * The CSS `:target` pseudo-class.
     *
     * - `:target`
     * - `[data-target]`
     */
    readonly _target: "&:target, &[data-target]";
    /**
     * The CSS `:user-invalid` pseudo-class.
     *
     * - `:user-invalid`
     * - `[data-user-invalid]`
     */
    readonly _userInvalid: "&:user-invalid, &[data-user-invalid]";
    /**
     * The CSS `:valid` pseudo-class.
     *
     * - `:valid`
     * - `[data-valid]`
     */
    readonly _valid: "&:valid, &[data-valid]";
    /**
     * The CSS `:vertical` pseudo-class.
     *
     * - `:vertical`
     * - `[aria-orientation=vertical]`
     * - `[data-orientation=vertical]`
     */
    readonly _vertical: "&:vertical, &[data-orientation=vertical], &[aria-orientation=vertical]";
    /**
     * The CSS `:visited` pseudo-class.
     */
    readonly _visited: "&:visited";
    /**
     * The CSS `[data-accept]` attribute selector.
     */
    readonly _accept: "&[data-accept]";
    /**
     * The CSS `[data-between]` attribute selector.
     */
    readonly _between: "&[data-between]";
    /**
     * The CSS `[data-end]` attribute selector.
     */
    readonly _end: "&[data-end]";
    /**
     * The CSS `[aria-selected=true]` attribute selector.
     *
     * - `[aria-expanded=true]`
     * - `[data-expanded]`
     */
    readonly _expanded: "&[data-expanded], &[aria-expanded=true]";
    /**
     * The CSS `[data-filled]` attribute selector.
     */
    readonly _filled: "&[data-filled]";
    /**
     * The CSS `[data-grabbed]` attribute selector.
     *
     * - `[data-grabbed]`
     * - `[aria-grabbed=true]`
     */
    readonly _grabbed: "&[data-grabbed], &[aria-grabbed=true]";
    /**
     * The CSS `[hidden]` attribute selector.
     *
     * - `[hidden]`
     * - `[data-hidden]`
     */
    readonly _hidden: "&[hidden], &[data-hidden]";
    /**
     * The CSS `[data-holiday]` attribute selector.
     */
    readonly _holiday: "&[data-holiday]";
    /**
     * The CSS `[data-idle]` attribute selector.
     */
    readonly _idle: "&[data-idle]";
    /**
     * The CSS `[data-loaded]` attribute selector.
     */
    readonly _loaded: "&[data-loaded]";
    /**
     * The CSS `[aria-busy=true]` attribute selector.
     *
     * - `[data-loading]`
     * - `[aria-busy=true]`
     */
    readonly _loading: "&[data-loading], &[aria-busy=true]";
    /**
     * The CSS `[hidden]` attribute selector.
     */
    readonly _nativeHidden: "&[hidden]";
    /**
     * The CSS `[data-not-allowed]` attribute selector.
     *
     * - `[data-not-allowed]`
     */
    readonly _notAllowed: "&[data-not-allowed]";
    /**
     * The CSS `:where([data-outside])` attribute selector.
     */
    readonly _outside: "&:where([data-outside])";
    /**
     * The CSS `[data-pressed]` attribute selector.
     *
     * - `[data-pressed]`
     * - `[aria-pressed=true]`
     */
    readonly _pressed: "&[data-pressed], &[aria-pressed=true]";
    /**
     * The CSS `[data-reject]` attribute selector.
     */
    readonly _reject: "&[data-reject]";
    readonly _ripple: "& .ui-ripple";
    /**
     * The CSS `:selected` attribute selector.
     *
     * - `[data-selected]`
     * - `[aria-selected=true]`
     */
    readonly _selected: "&[data-selected], &[aria-selected=true]";
    /**
     * The CSS `[data-start]` attribute selector.
     */
    readonly _start: "&[data-start]";
    /**
     * The CSS `[data-today]` attribute selector.
     */
    readonly _today: "&[data-today]";
    /**
     * The CSS `:where([data-weekend])` attribute selector.
     */
    readonly _weekend: "&:where([data-weekend])";
    /**
     * The CSS `::after` pseudo-element.
     */
    readonly _after: "&::after";
    /**
     * The CSS `::backdrop` pseudo-element.
     */
    readonly _backdrop: "&::backdrop";
    /**
     * The CSS `::before` pseudo-element.
     */
    readonly _before: "&::before";
    /**
     * The CSS `::cue` pseudo-element.
     */
    readonly _cue: "&::cue";
    /**
     * The CSS `::cue-region` pseudo-element.
     */
    readonly _cueRegion: "&::cue-region";
    /**
     * The CSS `::file-selector-button` pseudo-element.
     */
    readonly _fileSelector: "&::file-selector-button";
    /**
     * The CSS `::first-letter` pseudo-element.
     */
    readonly _firstLetter: "&::first-letter";
    /**
     * The CSS `::first-line` pseudo-element.
     */
    readonly _firstLine: "&::first-line";
    /**
     * The CSS `::marker` pseudo-element.
     */
    readonly _marker: "&::marker";
    /**
     * The CSS `::placeholder` pseudo-element.
     *
     * - `::placeholder`
     * - `[data-placeholder]`
     */
    readonly _placeholder: "&::placeholder, &[data-placeholder]";
    /**
     * The CSS `::-webkit-scrollbar` pseudo-element.
     *
     * - `::-webkit-scrollbar`
     * - `[data-scrollbar]`
     */
    readonly _scrollbar: "&::-webkit-scrollbar, &[data-scrollbar]";
    /**
     * The CSS `::-webkit-scrollbar-button` pseudo-element.
     */
    readonly _scrollbarButton: "&::-webkit-scrollbar-button";
    /**
     * The CSS `::-webkit-scrollbar-corner` pseudo-element.
     */
    readonly _scrollbarCorner: "&::-webkit-scrollbar-corner";
    /**
     * The CSS `::-webkit-scrollbar-thumb` pseudo-element.
     */
    readonly _scrollbarThumb: "&::-webkit-scrollbar-thumb";
    /**
     * The CSS `::-webkit-scrollbar-track` pseudo-element.
     */
    readonly _scrollbarTrack: "&::-webkit-scrollbar-track";
    /**
     * The CSS `::-webkit-scrollbar-track-piece` pseudo-element.
     */
    readonly _scrollbarTrackPiece: "&::-webkit-scrollbar-track-piece";
    /**
     * The CSS `::selection` pseudo-element.
     */
    readonly _selection: "&::selection";
};
type Pseudos = typeof pseudos;
type PseudoProperty = keyof Pseudos;
type PseudoSelector = Pseudos[PseudoProperty];
type PseudoProps = {
    [K in keyof Pseudos]?: CSSUIObject;
};
declare const pseudoProperties: PseudoProperty[];
declare const pseudoSelectors: ("&::after" | "&::backdrop" | "&::before" | "&::cue" | "&::cue-region" | "&::file-selector-button" | "&::first-letter" | "&::first-line" | "&::marker" | "&::placeholder, &[data-placeholder]" | "&::-webkit-scrollbar, &[data-scrollbar]" | "&::-webkit-scrollbar-button" | "&::-webkit-scrollbar-corner" | "&::-webkit-scrollbar-thumb" | "&::-webkit-scrollbar-track" | "&::-webkit-scrollbar-track-piece" | "&::selection" | "&[data-accept]" | "&[data-between]" | "&[data-end]" | "&[data-expanded], &[aria-expanded=true]" | "&[data-filled]" | "&[data-grabbed], &[aria-grabbed=true]" | "&[hidden], &[data-hidden]" | "&[data-holiday]" | "&[data-idle]" | "&[data-loaded]" | "&[data-loading], &[aria-busy=true]" | "&[hidden]" | "&[data-not-allowed]" | "&:where([data-outside])" | "&[data-pressed], &[aria-pressed=true]" | "&[data-reject]" | "& .ui-ripple" | "&[data-selected], &[aria-selected=true]" | "&[data-start]" | "&[data-today]" | "&:where([data-weekend])" | "&:active, &[data-active]" | "&:any-link, &[data-any-link]" | "&:autofill, &:-webkit-autofill" | "&:blank, &[data-blank]" | "&:checked, &[data-checked], &[aria-checked=true]" | "&:default" | "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]" | "&:empty" | "&:enabled, &[data-enabled]" | "&:nth-of-type(even)" | "&:first-of-type" | "&:focus, &[data-focus]" | "&:focus-visible, &[data-focus-visible]" | "&:focus-within, &[data-focus-within]" | "&:fullscreen" | "&:horizontal, &[data-orientation=horizontal], &[aria-orientation=horizontal]" | "&:hover, &[data-hover]" | "&:indeterminate, &[data-indeterminate], &[aria-checked=mixed]" | "&:in-range, &[data-in-range]" | "&[data-invalid], &[aria-invalid=true]" | "&:last-of-type" | "&:link, &[data-link]" | "&:modal" | "&:active" | "&:checked" | "&:disabled, &[disabled]" | "&:focus" | "&:focus-visible" | "&:focus-within" | "&:hover" | "&[readonly], &[aria-readonly=true]" | "&:target" | "&:valid" | "&:not(:first-of-type)" | "&:not(:last-of-type)" | "&:not(:target)" | "&:nth-of-type(odd)" | "&:only-of-type" | "&:optional, &[data-optional]" | "&:out-of-range, &[data-out-of-range]" | "&:paused, &[data-paused]" | "&:picture-in-picture" | "&:placeholder-shown" | "&:playing, &[data-playing]" | "&[readonly], &[data-readonly], &[aria-readonly=true]" | "&:read-write, &[data-read-write]" | "&:required, &[required]" | "&:target, &[data-target]" | "&:user-invalid, &[data-user-invalid]" | "&:valid, &[data-valid]" | "&:vertical, &[data-orientation=vertical], &[aria-orientation=vertical]" | "&:visited" | ".ui-dark &:not([data-mode]), [data-mode=dark] &:not([data-mode]), &[data-mode=dark]" | "@media (orientation: landscape)" | ".ui-light &:not([data-mode]), [data-mode=light] &:not([data-mode]), &[data-mode=light]" | "@media (prefers-color-scheme: dark)" | "@media (prefers-color-scheme: light)" | "@media (prefers-reduced-motion: reduce)" | "@media (orientation: portrait)" | "@media print" | "[role=group][data-accept] &, [data-group][data-accept] &, .group[data-accept] &" | "[role=group]:active &, [role=group][data-active] &, [data-group]:active &, [data-group][data-active] &, .group:active &, .group[data-active] &" | "[role=group]:blank &, [role=group][data-blank] &, [data-group]:blank &, [data-group][data-blank] &, .group:blank &, .group[data-blank] &" | "[role=group]:checked &, [role=group][data-checked] &, [role=group][aria-checked=true] &, [data-group]:checked &, [data-group][data-checked] &, [data-group][aria-checked=true] &, .group:checked &, .group[data-checked] &, .group[aria-checked=true] &" | "[role=group]:disabled &, [role=group][disabled] &, [role=group][aria-disabled=true] &, [role=group][data-disabled] &, [data-group]:disabled &, [data-group][disabled] &, [data-group][aria-disabled=true] &, [data-group][data-disabled] &, .group:disabled &, .group[disabled] &, .group[aria-disabled=true] &, .group[data-disabled] &" | "[role=group]:enabled &, [role=group][data-enabled] &, [data-group]:enabled &, [data-group][data-enabled] &, .group:enabled &, .group[data-enabled] &" | "[role=group][data-expanded] &, [role=group][aria-expanded=true] &, [data-group][data-expanded] &, [data-group][aria-expanded=true] &, .group[data-expanded] &, .group[aria-expanded=true] &" | "[role=group]:focus &, [role=group][data-focus] &, [data-group]:focus &, [data-group][data-focus] &, .group:focus &, .group[data-focus] &" | "[role=group]:focus-visible &, [role=group][data-focus-visible] &, [data-group]:focus-visible &, [data-group][data-focus-visible] &, .group:focus-visible &, .group[data-focus-visible] &" | "[role=group]:focus-within &, [role=group][data-focus-within] &, [data-group]:focus-within &, [data-group][data-focus-within] &, .group:focus-within &, .group[data-focus-within] &" | "[role=group][data-grabbed] &, [role=group][aria-grabbed=true] &, [data-group][data-grabbed] &, [data-group][aria-grabbed=true] &, .group[data-grabbed] &, .group[aria-grabbed=true] &" | "[role=group]:horizontal &, [role=group][data-orientation=horizontal] &, [role=group][aria-orientation=horizontal] &, [data-group]:horizontal &, [data-group][data-orientation=horizontal] &, [data-group][aria-orientation=horizontal] &, .group:horizontal &, .group[data-orientation=horizontal] &, .group[aria-orientation=horizontal] &" | "[role=group]:hover &, [role=group][data-hover] &, [data-group]:hover &, [data-group][data-hover] &, .group:hover &, .group[data-hover] &" | "[role=group][data-idle] &, [data-group][data-idle] &, .group[data-idle] &" | "[role=group][data-invalid] &, [role=group][aria-invalid=true] &, [data-group][data-invalid] &, [data-group][aria-invalid=true] &, .group[data-invalid] &, .group[aria-invalid=true] &" | "[role=group][data-loaded] &, [data-group][data-loaded] &, .group[data-loaded] &" | "[role=group][data-loading] &, [role=group][aria-busy=true] &, [data-group][data-loading] &, [data-group][aria-busy=true] &, .group[data-loading] &, .group[aria-busy=true] &" | "[role=group]:optional &, [role=group][data-optional] &, [data-group]:optional &, [data-group][data-optional] &, .group:optional &, .group[data-optional] &" | "[role=group]:placeholder-shown &, [data-group]:placeholder-shown &, .group:placeholder-shown &" | "[role=group][data-pressed] &, [role=group][aria-pressed=true] &, [data-group][data-pressed] &, [data-group][aria-pressed=true] &, .group[data-pressed] &, .group[aria-pressed=true] &" | "[role=group][readonly] &, [role=group][data-readonly] &, [role=group][aria-readonly=true] &, [data-group][readonly] &, [data-group][data-readonly] &, [data-group][aria-readonly=true] &, .group[readonly] &, .group[data-readonly] &, .group[aria-readonly=true] &" | "[role=group]:read-write &, [role=group][data-read-write] &, [data-group]:read-write &, [data-group][data-read-write] &, .group:read-write &, .group[data-read-write] &" | "[role=group][data-reject] &, [data-group][data-reject] &, .group[data-reject] &" | "[role=group]:required &, [role=group][required] &, [data-group]:required &, [data-group][required] &, .group:required &, .group[required] &" | "[role=group][data-selected] &, [role=group][aria-selected=true] &, [data-group][data-selected] &, [data-group][aria-selected=true] &, .group[data-selected] &, .group[aria-selected=true] &" | "[role=group]:user-invalid &, [role=group][data-user-invalid] &, [data-group]:user-invalid &, [data-group][data-user-invalid] &, .group:user-invalid &, .group[data-user-invalid] &" | "[role=group]:valid &, [role=group][data-valid] &, [data-group]:valid &, [data-group][data-valid] &, .group:valid &, .group[data-valid] &" | "[role=group]:vertical &, [role=group][data-orientation=vertical] &, [role=group][aria-orientation=vertical] &, [data-group]:vertical &, [data-group][data-orientation=vertical] &, [data-group][aria-orientation=vertical] &, .group:vertical &, .group[data-orientation=vertical] &, .group[aria-orientation=vertical] &" | "[data-peer][data-accept] ~ &, .peer[data-accept] ~ &" | "[data-peer]:active ~ &, [data-peer][data-active] ~ &, .peer:active ~ &, .peer[data-active] ~ &" | "[data-peer]:blank ~ &, [data-peer][data-blank] ~ &, .peer:blank ~ &, .peer[data-blank] ~ &" | "[data-peer]:checked ~ &, [data-peer][data-checked] ~ &, [data-peer][aria-checked=true] ~ &, .peer:checked ~ &, .peer[data-checked] ~ &, .peer[aria-checked=true] ~ &" | "[data-peer]:disabled ~ &, [data-peer][disabled] ~ &, [data-peer][aria-disabled=true] ~ &, [data-peer][data-disabled] ~ &, .peer:disabled ~ &, .peer[disabled] ~ &, .peer[aria-disabled=true] ~ &, .peer[data-disabled] ~ &" | "[data-peer]:enabled ~ &, [data-peer][data-enabled] ~ &, .peer:enabled ~ &, .peer[data-enabled] ~ &" | "[data-peer][data-expanded] ~ &, [data-peer][aria-expanded=true] ~ &, .peer[data-expanded] ~ &, .peer[aria-expanded=true] ~ &" | "[data-peer]:focus ~ &, [data-peer][data-focus] ~ &, .peer:focus ~ &, .peer[data-focus] ~ &" | "[data-peer]:focus-visible ~ &, [data-peer][data-focus-visible] ~ &, .peer:focus-visible ~ &, .peer[data-focus-visible] ~ &" | "[data-peer]:focus-within ~ &, [data-peer][data-focus-within] ~ &, .peer:focus-within ~ &, .peer[data-focus-within] ~ &" | "[data-peer][data-grabbed] ~ &, [data-peer][aria-grabbed=true] ~ &, .peer[data-grabbed] ~ &, .peer[aria-grabbed=true] ~ &" | "[data-peer]:horizontal ~ &, [data-peer][data-orientation=horizontal] ~ &, [data-peer][aria-orientation=horizontal] ~ &, .peer:horizontal ~ &, .peer[data-orientation=horizontal] ~ &, .peer[aria-orientation=horizontal] ~ &" | "[data-peer]:hover ~ &, [data-peer][data-hover] ~ &, .peer:hover ~ &, .peer[data-hover] ~ &" | "[data-peer][data-idle] ~ &, .peer[data-idle] ~ &" | "[data-peer][data-invalid] ~ &, [data-peer][aria-invalid=true] ~ &, .peer[data-invalid] ~ &, .peer[aria-invalid=true] ~ &" | "[data-peer][data-loaded] ~ &, .peer[data-loaded] ~ &" | "[data-peer][data-loading] ~ &, [data-peer][aria-busy=true] ~ &, .peer[data-loading] ~ &, .peer[aria-busy=true] ~ &" | "[data-peer]:optional ~ &, [data-peer][data-optional] ~ &, .peer:optional ~ &, .peer[data-optional] ~ &" | "[data-peer]:placeholder-shown ~ &, .peer:placeholder-shown ~ &" | "[data-peer][data-pressed] ~ &, [data-peer][aria-pressed=true] ~ &, .peer[data-pressed] ~ &, .peer[aria-pressed=true] ~ &" | "[data-peer][readonly] ~ &, [data-peer][data-readonly] ~ &, [data-peer][aria-readonly=true] ~ &, .peer[readonly] ~ &, .peer[data-readonly] ~ &, .peer[aria-readonly=true] ~ &" | "[data-peer]:read-write ~ &, [data-peer][data-read-write] ~ &, .peer:read-write ~ &, .peer[data-read-write] ~ &" | "[data-peer][data-reject] ~ &, .peer[data-reject] ~ &" | "[data-peer]:required ~ &, [data-peer][required] ~ &, .peer:required ~ &, .peer[required] ~ &" | "[data-peer][data-selected] ~ &, [data-peer][aria-selected=true] ~ &, .peer[data-selected] ~ &, .peer[aria-selected=true] ~ &" | "[data-peer]:user-invalid ~ &, [data-peer][data-user-invalid] ~ &, .peer:user-invalid ~ &, .peer[data-user-invalid] ~ &" | "[data-peer]:valid ~ &, [data-peer][data-valid] ~ &, .peer:valid ~ &, .peer[data-valid] ~ &" | "[data-peer]:vertical ~ &, [data-peer][data-orientation=vertical] ~ &, [data-peer][aria-orientation=vertical] ~ &, .peer:vertical ~ &, .peer[data-orientation=vertical] ~ &, .peer[aria-orientation=vertical] ~ &")[];

declare function vars(values: any, theme: StyledTheme, _css?: CSSFunction, _prev?: Dict): any;

declare function transform(value: any, _theme: StyledTheme, _css?: CSSFunction, _prev?: Dict): any;

type VariableResponsiveValue = Dict<[
    ThemeValue,
    ThemeValue
] | ThemeValue>;
type VariableColorModeValue = [
    Dict<ThemeValue> | ThemeValue,
    Dict<ThemeValue> | ThemeValue
];
type VariableValue = ThemeValue | VariableColorModeValue | VariableResponsiveValue;
interface VariableToken {
    isSemantic: boolean;
    value: VariableValue;
}
interface VariableTokens {
    [key: string]: VariableToken;
}
declare const primaryTokens: readonly ["blurs", "borders", "colors", "fonts", "fontSizes", "fontWeights", "letterSpacings", "lineHeights", "radii", "shadows", "sizes", "spaces", "zIndices"];
declare const secondaryTokens: readonly ["gradients"];
type ThemeToken = "animations" | "breakpoints" | "transitions.duration" | "transitions.easing" | "transitions.property" | (typeof primaryTokens)[number] | (typeof secondaryTokens)[number];
type TransformTheme = Omit<StyledTheme, "changeThemeScheme" | "themeScheme">;
declare function transformTheme(theme: Dict, config?: ThemeConfig): TransformTheme;
declare function omitThemeProps<T extends ThemeProps, K extends Exclude<keyof T, "colorScheme" | "size" | "variant"> = never>(props: T, keys?: K[]): Omit<T, "size" | "colorScheme" | "variant" | K>;
type MergeStyleOptions = Omit<Partial<FilterStyleOptions>, "isMulti">;
declare function mergeStyle(target: ComponentStyle, ...sources: ComponentStyle[]): ({ omit, pick, }?: MergeStyleOptions) => ComponentStyle;
declare function mergeMultiStyle(target: ComponentMultiStyle, ...sources: ComponentMultiStyle[]): ({ omit, pick, }?: MergeStyleOptions) => ComponentMultiStyle;
interface FilterStyleOptions {
    omit: Union<keyof (ComponentMultiStyle | ComponentStyle)>[];
    pick: Union<keyof (ComponentMultiStyle | ComponentStyle)>[];
    isMulti?: boolean;
}
declare function pickStyle(target: ComponentMultiStyle, targetKey: string, withProps?: boolean): ComponentStyle;

type Transform = (value: any, theme: StyledTheme, css: CSSFunction, prev?: Dict) => any;
declare function mode<L, D>(light: L, dark: D): (colorMode?: ColorMode | undefined) => D | L;
declare function keyframes(...arg: CSSObject[]): Keyframes;

type StandardStyleProperty = keyof typeof standardStyles;
declare const standardStyles: {
    readonly accentColor: {
        readonly properties: "accentColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly alignContent: true;
    readonly alignItems: true;
    readonly alignmentBaseline: true;
    readonly alignSelf: true;
    readonly all: true;
    readonly animation: {
        readonly properties: "animation";
        readonly token: "animations";
        readonly transform: Transform;
    };
    readonly animationComposition: true;
    readonly animationDelay: true;
    readonly animationDirection: true;
    readonly animationDuration: {
        readonly properties: "animationDuration";
        readonly token: "transitions.duration";
        readonly transform: Transform;
    };
    readonly animationFillMode: true;
    readonly animationIterationCount: true;
    readonly animationName: true;
    readonly animationPlayState: true;
    readonly animationRange: true;
    readonly animationRangeEnd: true;
    readonly animationRangeStart: true;
    readonly animationTimeline: true;
    readonly animationTimingFunction: {
        readonly properties: "animationTimingFunction";
        readonly token: "transitions.easing";
        readonly transform: Transform;
    };
    readonly appearance: true;
    readonly aspectRatio: true;
    readonly azimuth: true;
    readonly backdropBlur: {
        readonly properties: "--ui-backdrop-blur";
        readonly token: "blurs";
        readonly transform: Transform;
    };
    readonly backdropBrightness: {
        readonly properties: "--ui-backdrop-brightness";
        readonly transform: Transform;
    };
    readonly backdropContrast: {
        readonly properties: "--ui-backdrop-contrast";
        readonly transform: Transform;
    };
    readonly backdropDropShadow: {
        readonly properties: "--ui-backdrop-drop-shadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly backdropFilter: {
        readonly transform: Transform;
    };
    readonly backdropGrayscale: {
        readonly properties: "--ui-backdrop-grayscale";
        readonly transform: Transform;
    };
    readonly backdropHueRotate: {
        readonly properties: "--ui-backdrop-hue-rotate";
        readonly transform: Transform;
    };
    readonly backdropInvert: {
        readonly properties: "--ui-backdrop-invert";
        readonly transform: Transform;
    };
    readonly backdropSaturate: {
        readonly properties: "--ui-backdrop-saturate";
        readonly transform: Transform;
    };
    readonly backdropSepia: {
        readonly properties: "--ui-backdrop-sepia";
        readonly transform: Transform;
    };
    readonly backfaceVisibility: {
        readonly properties: "backfaceVisibility";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly background: {
        readonly properties: "background";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly backgroundAttachment: true;
    readonly backgroundBlendMode: true;
    readonly backgroundClip: {
        readonly properties: "backgroundClip";
        readonly transform: (value: any) => {
            backgroundClip: string;
            color: string;
        } | {
            backgroundClip: any;
            color?: undefined;
        };
    };
    readonly backgroundColor: {
        readonly properties: "backgroundColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly backgroundImage: {
        readonly properties: "backgroundImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly backgroundOrigin: true;
    readonly backgroundPosition: true;
    readonly backgroundPositionX: true;
    readonly backgroundPositionY: true;
    readonly backgroundRepeat: true;
    readonly backgroundSize: true;
    readonly baselineShift: true;
    readonly blockSize: {
        readonly properties: "blockSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly blur: {
        readonly properties: "--ui-blur";
        readonly token: "blurs";
        readonly transform: Transform;
    };
    readonly border: {
        readonly properties: "border";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBlock: {
        readonly properties: "borderBlock";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBlockColor: {
        readonly properties: "borderBlockColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderBlockEnd: {
        readonly properties: "borderBlockEnd";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBlockEndColor: {
        readonly properties: "borderBlockEndColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderBlockEndStyle: true;
    readonly borderBlockEndWidth: {
        readonly properties: "borderBlockEndWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderBlockStart: {
        readonly properties: "borderBlockStart";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBlockStartColor: {
        readonly properties: "borderBlockStartColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderBlockStartStyle: true;
    readonly borderBlockStartWidth: {
        readonly properties: "borderBlockStartWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderBlockStyle: true;
    readonly borderBlockWidth: {
        readonly properties: "borderBlockWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderBottom: {
        readonly properties: "borderBottom";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBottomColor: {
        readonly properties: "borderBottomColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderBottomLeftRadius: {
        readonly properties: "borderBottomLeftRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderBottomRadius: {
        readonly properties: ["borderBottomLeftRadius", "borderBottomRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderBottomRightRadius: {
        readonly properties: "borderBottomRightRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderBottomStyle: true;
    readonly borderBottomWidth: {
        readonly properties: "borderBottomWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderCollapse: true;
    readonly borderColor: {
        readonly properties: "borderColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderEndEndRadius: {
        readonly properties: "borderEndEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderEndStartRadius: {
        readonly properties: "borderEndStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderImage: {
        readonly properties: "borderImage";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderImageOutset: true;
    readonly borderImageRepeat: true;
    readonly borderImageSlice: true;
    readonly borderImageSource: {
        readonly properties: "borderImageSource";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly borderImageWidth: {
        readonly properties: "borderImageWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderInline: {
        readonly properties: "borderInline";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderInlineColor: {
        readonly properties: "borderInlineColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderInlineEnd: {
        readonly properties: "borderInlineEnd";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderInlineEndColor: {
        readonly properties: "borderInlineEndColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderInlineEndRadius: {
        readonly properties: ["borderEndStartRadius", "borderEndEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderInlineEndStyle: true;
    readonly borderInlineEndWidth: {
        readonly properties: "borderInlineEndWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderInlineStart: {
        readonly properties: "borderInlineStart";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderInlineStartColor: {
        readonly properties: "borderInlineStartColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderInlineStartRadius: {
        readonly properties: ["borderStartStartRadius", "borderStartEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderInlineStartStyle: true;
    readonly borderInlineStartWidth: {
        readonly properties: "borderInlineStartWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderInlineStyle: true;
    readonly borderInlineWidth: {
        readonly properties: "borderInlineWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderLeft: {
        readonly properties: "borderLeft";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderLeftColor: {
        readonly properties: "borderLeftColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderLeftRadius: {
        readonly properties: ["borderTopLeftRadius", "borderBottomLeftRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderLeftStyle: true;
    readonly borderLeftWidth: {
        readonly properties: "borderLeftWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderRadius: {
        readonly properties: "borderRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderRight: {
        readonly properties: "borderRight";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderRightColor: {
        readonly properties: "borderRightColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderRightRadius: {
        readonly properties: ["borderTopRightRadius", "borderBottomRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderRightStyle: true;
    readonly borderRightWidth: {
        readonly properties: "borderRightWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderSpacing: true;
    readonly borderStartEndRadius: {
        readonly properties: "borderStartEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderStartStartRadius: {
        readonly properties: "borderStartStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderStyle: true;
    readonly borderTop: {
        readonly properties: "borderTop";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderTopColor: {
        readonly properties: "borderTopColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderTopLeftRadius: {
        readonly properties: "borderTopLeftRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderTopRadius: {
        readonly properties: ["borderTopLeftRadius", "borderTopRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderTopRightRadius: {
        readonly properties: "borderTopRightRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderTopStyle: true;
    readonly borderTopWidth: {
        readonly properties: "borderTopWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderWidth: {
        readonly properties: "borderWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderX: {
        readonly properties: ["borderLeft", "borderRight"];
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderY: {
        readonly properties: ["borderTop", "borderBottom"];
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly bottom: {
        readonly properties: "bottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly boxAlign: true;
    readonly boxDecorationBreak: true;
    readonly boxDirection: true;
    readonly boxFlex: true;
    readonly boxFlexGroup: true;
    readonly boxLines: true;
    readonly boxOrdinalGroup: true;
    readonly boxOrient: true;
    readonly boxPack: true;
    readonly boxShadow: {
        readonly properties: "boxShadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly boxSize: {
        readonly properties: ["width", "height"];
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly boxSizing: true;
    readonly breakAfter: true;
    readonly breakBefore: true;
    readonly breakInside: true;
    readonly brightness: {
        readonly properties: "--ui-brightness";
        readonly transform: Transform;
    };
    readonly captionSide: true;
    readonly caretColor: {
        readonly properties: "caretColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly clear: true;
    readonly clip: true;
    readonly clipPath: true;
    readonly clipRule: true;
    readonly color: {
        readonly properties: "color";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly colorInterpolation: true;
    readonly colorMode: {
        readonly properties: "colorScheme";
    };
    readonly columnCount: true;
    readonly columnFill: true;
    readonly columnGap: {
        readonly properties: "columnGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly columnRule: {
        readonly properties: "columnRule";
        readonly transform: (value: any) => any;
    };
    readonly columnRuleColor: {
        readonly properties: "columnRuleColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly columnRuleStyle: true;
    readonly columnRuleWidth: {
        readonly properties: "columnRuleWidth";
        readonly transform: (value: any) => any;
    };
    readonly columns: true;
    readonly columnSpan: true;
    readonly columnWidth: {
        readonly properties: "columnWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly contain: true;
    readonly container: true;
    readonly containerName: true;
    readonly containerType: true;
    readonly containIntrinsicBlockSize: true;
    readonly containIntrinsicHeight: true;
    readonly containIntrinsicInlineSize: true;
    readonly containIntrinsicSize: true;
    readonly containIntrinsicWidth: {
        readonly properties: "containIntrinsicWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly content: true;
    readonly contentVisibility: true;
    readonly contrast: {
        readonly properties: "--ui-contrast";
        readonly transform: Transform;
    };
    readonly counterIncrement: true;
    readonly counterReset: true;
    readonly counterSet: true;
    readonly cursor: true;
    readonly direction: true;
    readonly display: true;
    readonly dominantBaseline: true;
    readonly dropShadow: {
        readonly properties: "--ui-drop-shadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly emptyCells: true;
    readonly fill: {
        readonly properties: "fill";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly fillOpacity: true;
    readonly fillRule: true;
    readonly filter: {
        readonly transform: Transform;
    };
    readonly flex: true;
    readonly flexBasis: {
        readonly properties: "flexBasis";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly flexDirection: true;
    readonly flexFlow: true;
    readonly flexGrow: true;
    readonly flexShrink: true;
    readonly flexWrap: true;
    readonly float: true;
    readonly floodColor: {
        readonly properties: "floodColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly floodOpacity: true;
    readonly font: true;
    readonly fontFamily: {
        readonly properties: "fontFamily";
        readonly token: "fonts";
        readonly transform: Transform;
    };
    readonly fontFeatureSettings: true;
    readonly fontKerning: true;
    readonly fontLanguageOverride: true;
    readonly fontOpticalSizing: true;
    readonly fontPalette: true;
    readonly fontSize: {
        readonly properties: "fontSize";
        readonly token: "fontSizes";
        readonly transform: Transform;
    };
    readonly fontSizeAdjust: true;
    readonly fontSmooth: true;
    readonly fontStretch: true;
    readonly fontStyle: true;
    readonly fontSynthesis: true;
    readonly fontSynthesisPosition: true;
    readonly fontSynthesisSmallCaps: true;
    readonly fontSynthesisStyle: true;
    readonly fontSynthesisWeight: true;
    readonly fontVariant: true;
    readonly fontVariantAlternates: true;
    readonly fontVariantCaps: true;
    readonly fontVariantEastAsian: true;
    readonly fontVariantEmoji: true;
    readonly fontVariantLigatures: true;
    readonly fontVariantNumeric: true;
    readonly fontVariantPosition: true;
    readonly fontVariationSettings: true;
    readonly fontWeight: {
        readonly properties: "fontWeight";
        readonly token: "fontWeights";
        readonly transform: Transform;
    };
    readonly forcedColorAdjust: true;
    readonly gap: {
        readonly properties: "gap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly glyphOrientationVertical: true;
    readonly grayscale: {
        readonly properties: "--ui-grayscale";
        readonly transform: Transform;
    };
    readonly grid: true;
    readonly gridArea: true;
    readonly gridAutoColumns: {
        readonly properties: "gridAutoColumns";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly gridAutoFlow: true;
    readonly gridAutoRows: {
        readonly properties: "gridAutoRows";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly gridColumn: true;
    readonly gridColumnEnd: true;
    readonly gridColumnStart: true;
    readonly gridRow: true;
    readonly gridRowEnd: true;
    readonly gridRowStart: true;
    readonly gridTemplate: true;
    readonly gridTemplateAreas: true;
    readonly gridTemplateColumns: {
        readonly properties: "gridTemplateColumns";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly gridTemplateRows: {
        readonly properties: "gridTemplateRows";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly hangingPunctuation: true;
    readonly height: {
        readonly properties: "height";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly hueRotate: {
        readonly properties: "--ui-hue-rotate";
        readonly transform: Transform;
    };
    readonly hyphenateCharacter: true;
    readonly hyphenateLimitChars: true;
    readonly hyphens: true;
    readonly imageOrientation: true;
    readonly imageRendering: true;
    readonly imageResolution: true;
    readonly initialLetter: true;
    readonly inlineSize: {
        readonly properties: "inlineSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly inset: {
        readonly properties: "inset";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetBlock: {
        readonly properties: "insetBlock";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetBlockEnd: {
        readonly properties: "insetBlockEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetBlockStart: {
        readonly properties: "insetBlockStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetInline: {
        readonly properties: "insetInline";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetInlineEnd: {
        readonly properties: "insetInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetInlineStart: {
        readonly properties: "insetInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetX: {
        readonly properties: ["left", "right"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetY: {
        readonly properties: ["top", "bottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly invert: {
        readonly properties: "--ui-invert";
        readonly transform: Transform;
    };
    readonly isolation: true;
    readonly justifyContent: true;
    readonly justifyItems: true;
    readonly justifySelf: true;
    readonly left: {
        readonly properties: "left";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly letterSpacing: {
        readonly properties: "letterSpacing";
        readonly token: "letterSpacings";
        readonly transform: Transform;
    };
    readonly lightingColor: {
        readonly properties: "lightingColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly lineBreak: true;
    readonly lineHeight: {
        readonly properties: "lineHeight";
        readonly token: "lineHeights";
        readonly transform: Transform;
    };
    readonly lineHeightStep: true;
    readonly listStyle: true;
    readonly listStyleImage: {
        readonly properties: "listStyleImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly listStylePosition: true;
    readonly listStyleType: true;
    readonly margin: {
        readonly properties: "margin";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginBlock: {
        readonly properties: "marginBlock";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginBlockEnd: {
        readonly properties: "marginBlockEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginBlockStart: {
        readonly properties: "marginBlockStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginBottom: {
        readonly properties: "marginBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginInline: {
        readonly properties: "marginInline";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginInlineEnd: {
        readonly properties: "marginInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginInlineStart: {
        readonly properties: "marginInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginLeft: {
        readonly properties: "marginLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginRight: {
        readonly properties: "marginRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginTop: {
        readonly properties: "marginTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginTrim: true;
    readonly marginX: {
        readonly properties: ["marginInlineStart", "marginInlineEnd"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginY: {
        readonly properties: ["marginTop", "marginBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marker: true;
    readonly markerEnd: true;
    readonly markerMid: true;
    readonly markerStart: true;
    readonly mask: true;
    readonly maskBorder: true;
    readonly maskBorderMode: true;
    readonly maskBorderOutset: true;
    readonly maskBorderRepeat: true;
    readonly maskBorderSlice: true;
    readonly maskBorderSource: true;
    readonly maskBorderWidth: {
        readonly properties: "maskBorderWidth";
        readonly transform: (value: any) => any;
    };
    readonly maskClip: true;
    readonly maskComposite: true;
    readonly maskImage: {
        readonly properties: "maskImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly maskMode: true;
    readonly maskOrigin: true;
    readonly maskPosition: true;
    readonly maskRepeat: true;
    readonly maskSize: true;
    readonly maskType: true;
    readonly masonryAutoFlow: true;
    readonly mathDepth: true;
    readonly mathShift: true;
    readonly mathStyle: true;
    readonly maxBlockSize: {
        readonly properties: "maxBlockSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxBoxSize: {
        readonly properties: ["maxWidth", "maxHeight"];
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxHeight: {
        readonly properties: "maxHeight";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxInlineSize: {
        readonly properties: "maxInlineSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxWidth: {
        readonly properties: "maxWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minBlockSize: {
        readonly properties: "minBlockSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minBoxSize: {
        readonly properties: ["minWidth", "minHeight"];
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minHeight: {
        readonly properties: "minHeight";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minInlineSize: {
        readonly properties: "minInlineSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minWidth: {
        readonly properties: "minWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly mixBlendMode: true;
    readonly objectFit: true;
    readonly objectPosition: true;
    readonly offset: true;
    readonly offsetAnchor: true;
    readonly offsetDistance: true;
    readonly offsetPath: true;
    readonly offsetPosition: true;
    readonly offsetRotate: true;
    readonly opacity: true;
    readonly order: true;
    readonly orphans: true;
    readonly outline: true;
    readonly outlineColor: {
        readonly properties: "outlineColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly outlineOffset: true;
    readonly outlineStyle: true;
    readonly outlineWidth: {
        readonly properties: "outlineWidth";
        readonly transform: (value: any) => any;
    };
    readonly overflow: true;
    readonly overflowAnchor: true;
    readonly overflowBlock: true;
    readonly overflowClipMargin: true;
    readonly overflowInline: true;
    readonly overflowWrap: true;
    readonly overflowX: true;
    readonly overflowY: true;
    readonly overlay: true;
    readonly overscrollBehavior: true;
    readonly overscrollBehaviorBlock: true;
    readonly overscrollBehaviorInline: true;
    readonly overscrollBehaviorX: true;
    readonly overscrollBehaviorY: true;
    readonly padding: {
        readonly properties: "padding";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingBlock: {
        readonly properties: "paddingBlock";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingBlockEnd: {
        readonly properties: "paddingBlockEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingBlockStart: {
        readonly properties: "paddingBlockStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingBottom: {
        readonly properties: "paddingBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingInline: {
        readonly properties: "paddingInline";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingInlineEnd: {
        readonly properties: "paddingInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingInlineStart: {
        readonly properties: "paddingInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingLeft: {
        readonly properties: "paddingLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingRight: {
        readonly properties: "paddingRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingTop: {
        readonly properties: "paddingTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingX: {
        readonly properties: ["paddingInlineStart", "paddingInlineEnd"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingY: {
        readonly properties: ["paddingTop", "paddingBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly page: true;
    readonly pageBreakAfter: true;
    readonly pageBreakBefore: true;
    readonly pageBreakInside: true;
    readonly paintOrder: true;
    readonly perspective: true;
    readonly perspectiveOrigin: true;
    readonly placeContent: true;
    readonly placeItems: true;
    readonly placeSelf: true;
    readonly pointerEvents: true;
    readonly position: true;
    readonly printColorAdjust: true;
    readonly quotes: true;
    readonly resize: true;
    readonly right: {
        readonly properties: "right";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly rotate: {
        readonly properties: "--ui-rotate";
        readonly transform: (value: any) => any;
    };
    readonly rowGap: {
        readonly properties: "rowGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly rubyAlign: true;
    readonly rubyPosition: true;
    readonly saturate: {
        readonly properties: "--ui-saturate";
        readonly transform: Transform;
    };
    readonly scale: {
        readonly properties: ["--ui-scale-x", "--ui-scale-y"];
    };
    readonly scaleX: {
        readonly properties: "--ui-scale-x";
    };
    readonly scaleY: {
        readonly properties: "--ui-scale-y";
    };
    readonly scrollbarColor: {
        readonly properties: "scrollbarColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly scrollbarGutter: true;
    readonly scrollbarWidth: {
        readonly properties: "scrollbarWidth";
        readonly transform: (value: any) => any;
    };
    readonly scrollBehavior: true;
    readonly scrollMargin: {
        readonly properties: "scrollMargin";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginBlock: true;
    readonly scrollMarginBlockEnd: true;
    readonly scrollMarginBlockStart: true;
    readonly scrollMarginBottom: {
        readonly properties: "scrollMarginBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginInline: true;
    readonly scrollMarginInlineEnd: true;
    readonly scrollMarginInlineStart: true;
    readonly scrollMarginLeft: {
        readonly properties: "scrollMarginLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginRight: {
        readonly properties: "scrollMarginRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginTop: {
        readonly properties: "scrollMarginTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginX: {
        readonly properties: ["scrollMarginLeft", "scrollMarginRight"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginY: {
        readonly properties: ["scrollMarginTop", "scrollMarginBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPadding: {
        readonly properties: "scrollPadding";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingBlock: true;
    readonly scrollPaddingBlockEnd: true;
    readonly scrollPaddingBlockStart: true;
    readonly scrollPaddingBottom: {
        readonly properties: "scrollPaddingBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingInline: true;
    readonly scrollPaddingInlineEnd: true;
    readonly scrollPaddingInlineStart: true;
    readonly scrollPaddingLeft: {
        readonly properties: "scrollPaddingLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingRight: {
        readonly properties: "scrollPaddingRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingTop: {
        readonly properties: "scrollPaddingTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingX: {
        readonly properties: ["scrollPaddingLeft", "scrollPaddingRight"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingY: {
        readonly properties: ["scrollPaddingTop", "scrollPaddingBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollSnapAlign: true;
    readonly scrollSnapStop: true;
    readonly scrollSnapType: true;
    readonly scrollTimeline: true;
    readonly scrollTimelineAxis: true;
    readonly scrollTimelineName: true;
    readonly sepia: {
        readonly properties: "--ui-sepia";
        readonly transform: Transform;
    };
    readonly shapeImageThreshold: true;
    readonly shapeMargin: true;
    readonly shapeOutside: true;
    readonly shapeRendering: true;
    readonly skewX: {
        readonly properties: "--ui-skew-x";
        readonly transform: (value: any) => any;
    };
    readonly skewY: {
        readonly properties: "--ui-skew-y";
        readonly transform: (value: any) => any;
    };
    readonly stopColor: true;
    readonly stopOpacity: true;
    readonly stroke: {
        readonly properties: "stroke";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly strokeDasharray: true;
    readonly strokeDashoffset: true;
    readonly strokeLinecap: true;
    readonly strokeLinejoin: true;
    readonly strokeMiterlimit: true;
    readonly strokeOpacity: true;
    readonly strokeWidth: {
        readonly properties: "strokeWidth";
        readonly transform: (value: any) => any;
    };
    readonly tableLayout: true;
    readonly tabSize: true;
    readonly textAlign: true;
    readonly textAlignLast: true;
    readonly textAnchor: true;
    readonly textCombineUpright: true;
    readonly textDecoration: true;
    readonly textDecorationColor: {
        readonly properties: "textDecorationColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly textDecorationLine: true;
    readonly textDecorationSkip: true;
    readonly textDecorationSkipInk: true;
    readonly textDecorationStyle: true;
    readonly textDecorationThickness: true;
    readonly textEmphasis: true;
    readonly textEmphasisColor: {
        readonly properties: "textEmphasisColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly textEmphasisPosition: true;
    readonly textEmphasisStyle: true;
    readonly textIndent: true;
    readonly textJustify: true;
    readonly textOrientation: true;
    readonly textOverflow: true;
    readonly textRendering: true;
    readonly textShadow: {
        readonly properties: "textShadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly textSizeAdjust: true;
    readonly textTransform: true;
    readonly textUnderlineOffset: true;
    readonly textUnderlinePosition: true;
    readonly textWrap: true;
    readonly timelineScope: true;
    readonly top: {
        readonly properties: "top";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly touchAction: true;
    readonly transform: {
        readonly properties: "transform";
        readonly transform: typeof transform;
    };
    readonly transformBox: true;
    readonly transformOrigin: true;
    readonly transformStyle: true;
    readonly transition: true;
    readonly transitionBehavior: true;
    readonly transitionDelay: true;
    readonly transitionDuration: {
        readonly properties: "transitionDuration";
        readonly token: "transitions.duration";
        readonly transform: Transform;
    };
    readonly transitionProperty: {
        readonly properties: "transitionProperty";
        readonly token: "transitions.property";
        readonly transform: Transform;
    };
    readonly transitionTimingFunction: {
        readonly properties: "transitionTimingFunction";
        readonly token: "transitions.easing";
        readonly transform: Transform;
    };
    readonly translate: true;
    readonly translateX: {
        readonly properties: "--ui-translate-x";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly translateY: {
        readonly properties: "--ui-translate-y";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly unicodeBidi: true;
    readonly userSelect: true;
    readonly vectorEffect: true;
    readonly verticalAlign: true;
    readonly viewTimeline: true;
    readonly viewTimelineAxis: true;
    readonly viewTimelineInset: true;
    readonly viewTimelineName: true;
    readonly viewTransitionName: true;
    readonly visibility: true;
    readonly whiteSpace: true;
    readonly whiteSpaceCollapse: true;
    readonly widows: true;
    readonly width: {
        readonly properties: "width";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly willChange: true;
    readonly wordBreak: true;
    readonly wordSpacing: true;
    readonly writingMode: true;
    readonly zIndex: {
        readonly properties: "zIndex";
        readonly token: "zIndices";
        readonly transform: Transform;
    };
    readonly zoom: true;
};
type ShorthandStyleProperty = keyof typeof shorthandStyles;
declare const shorthandStyles: {
    readonly accent: {
        readonly properties: "accentColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly bg: {
        readonly properties: "background";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly bgAttachment: {
        readonly properties: "backgroundAttachment";
    };
    readonly bgBlendMode: {
        readonly properties: "backgroundBlendMode";
    };
    readonly bgClip: {
        readonly properties: "backgroundClip";
        readonly transform: (value: any) => {
            backgroundClip: string;
            color: string;
        } | {
            backgroundClip: any;
            color?: undefined;
        };
    };
    readonly bgColor: {
        readonly properties: "backgroundColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly bgGradient: {
        readonly properties: "backgroundImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly bgImage: {
        readonly properties: "backgroundImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly bgImg: {
        readonly properties: "backgroundImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly bgOrigin: {
        readonly properties: "backgroundOrigin";
    };
    readonly bgPosition: {
        readonly properties: "backgroundPosition";
    };
    readonly bgPositionX: {
        readonly properties: "backgroundPositionX";
    };
    readonly bgPositionY: {
        readonly properties: "backgroundPositionY";
    };
    readonly bgPosX: {
        readonly properties: "backgroundPositionX";
    };
    readonly bgPosY: {
        readonly properties: "backgroundPositionY";
    };
    readonly bgRepeat: {
        readonly properties: "backgroundRepeat";
    };
    readonly bgSize: {
        readonly properties: "backgroundSize";
    };
    readonly blendMode: {
        readonly properties: "mixBlendMode";
    };
    readonly borderBottomEndRadius: {
        readonly properties: "borderEndEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderBottomStartRadius: {
        readonly properties: "borderEndStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderEnd: {
        readonly properties: "borderInlineEnd";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderEndColor: {
        readonly properties: "borderInlineEndColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderEndRadius: {
        readonly properties: ["borderEndStartRadius", "borderEndEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderEndStyle: {
        readonly properties: "borderInlineEndStyle";
    };
    readonly borderEndWidth: {
        readonly properties: "borderInlineEndWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderStart: {
        readonly properties: "borderInlineStart";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderStartColor: {
        readonly properties: "borderInlineStartColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderStartRadius: {
        readonly properties: ["borderStartStartRadius", "borderStartEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderStartStyle: {
        readonly properties: "borderInlineStartStyle";
    };
    readonly borderStartWidth: {
        readonly properties: "borderInlineStartWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderTopEndRadius: {
        readonly properties: "borderStartEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderTopStartRadius: {
        readonly properties: "borderStartStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly caret: {
        readonly properties: "caretColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly flexDir: {
        readonly properties: "flexDirection";
    };
    readonly g: {
        readonly properties: "gap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly gapX: {
        readonly properties: "columnGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly gapY: {
        readonly properties: "rowGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly gx: {
        readonly properties: "columnGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly gy: {
        readonly properties: "rowGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly h: {
        readonly properties: "height";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly insetEnd: {
        readonly properties: "insetInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetStart: {
        readonly properties: "insetInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly leading: {
        readonly properties: "lineHeight";
        readonly token: "lineHeights";
        readonly transform: Transform;
    };
    readonly listStyleImg: {
        readonly properties: "listStyleImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly listStylePos: {
        readonly properties: "listStylePosition";
    };
    readonly m: {
        readonly properties: "margin";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginEnd: {
        readonly properties: "marginInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginStart: {
        readonly properties: "marginInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly maxH: {
        readonly properties: "maxHeight";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxW: {
        readonly properties: "maxWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly mb: {
        readonly properties: "marginBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly me: {
        readonly properties: "marginInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly minH: {
        readonly properties: "minHeight";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minW: {
        readonly properties: "minWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly ml: {
        readonly properties: "marginLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly mr: {
        readonly properties: "marginRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly ms: {
        readonly properties: "marginInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly mt: {
        readonly properties: "marginTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly mx: {
        readonly properties: ["marginInlineStart", "marginInlineEnd"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly my: {
        readonly properties: ["marginTop", "marginBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly overscroll: {
        readonly properties: "overscrollBehavior";
    };
    readonly overscrollX: {
        readonly properties: "overscrollBehaviorX";
    };
    readonly overscrollY: {
        readonly properties: "overscrollBehaviorY";
    };
    readonly p: {
        readonly properties: "padding";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingEnd: {
        readonly properties: "paddingInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingStart: {
        readonly properties: "paddingInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pb: {
        readonly properties: "paddingBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pe: {
        readonly properties: "paddingInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pl: {
        readonly properties: "paddingLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pos: {
        readonly properties: "position";
    };
    readonly pr: {
        readonly properties: "paddingRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly ps: {
        readonly properties: "paddingInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pt: {
        readonly properties: "paddingTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly px: {
        readonly properties: ["paddingInlineStart", "paddingInlineEnd"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly py: {
        readonly properties: ["paddingTop", "paddingBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly rounded: {
        readonly properties: "borderRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottom: {
        readonly properties: ["borderBottomLeftRadius", "borderBottomRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottomEnd: {
        readonly properties: "borderEndEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottomLeft: {
        readonly properties: "borderBottomLeftRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottomRight: {
        readonly properties: "borderBottomRightRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottomStart: {
        readonly properties: "borderEndStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedEnd: {
        readonly properties: ["borderEndStartRadius", "borderEndEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedLeft: {
        readonly properties: ["borderTopLeftRadius", "borderBottomLeftRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedRight: {
        readonly properties: ["borderTopRightRadius", "borderBottomRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedStart: {
        readonly properties: ["borderStartStartRadius", "borderStartEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTop: {
        readonly properties: ["borderTopLeftRadius", "borderTopRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTopEnd: {
        readonly properties: "borderStartEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTopLeft: {
        readonly properties: "borderTopLeftRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTopRight: {
        readonly properties: "borderTopRightRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTopStart: {
        readonly properties: "borderStartStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly shadow: {
        readonly properties: "boxShadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly text: {
        readonly properties: "fontSize";
        readonly token: "fontSizes";
        readonly transform: Transform;
    };
    readonly textColor: {
        readonly properties: "color";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly textDecor: {
        readonly properties: "textDecoration";
    };
    readonly tracking: {
        readonly properties: "letterSpacing";
        readonly token: "letterSpacings";
        readonly transform: Transform;
    };
    readonly w: {
        readonly properties: "width";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly z: {
        readonly properties: "zIndex";
        readonly token: "zIndices";
        readonly transform: Transform;
    };
};
type PseudoStyleProperty = keyof typeof pseudoStyles;
declare const pseudoStyles: {
    readonly "&::after": {
        readonly properties: "&::after";
        readonly transform: (value: any) => any;
    };
    readonly "&::before": {
        readonly properties: "&::before";
        readonly transform: (value: any) => any;
    };
};
type UIStyleProperty = keyof typeof uiStyles;
declare const uiStyles: {
    readonly apply: {
        readonly isProcessResult: true;
        readonly transform: Transform;
    };
    readonly layerStyle: {
        readonly isProcessResult: true;
        readonly transform: Transform;
    };
    readonly textStyle: {
        readonly isProcessResult: true;
        readonly transform: Transform;
    };
    readonly isTruncated: {
        readonly transform: (value: boolean) => {
            overflow: string;
            textOverflow: string;
            whiteSpace: string;
        } | undefined;
    };
    readonly lineClamp: {
        readonly properties: "--ui-line-clamp";
        readonly static: {
            readonly display: "-webkit-box";
            readonly overflow: "hidden";
            readonly textOverflow: "ellipsis";
            readonly WebkitBoxOrient: "vertical";
            readonly WebkitLineClamp: "var(--ui-line-clamp)";
        };
    };
    readonly vars: {
        readonly isProcessSkip: true;
        readonly transform: typeof vars;
    };
};
type AtRuleStyleProperty = keyof typeof atRuleStyles;
declare const atRuleStyles: {
    readonly _container: {
        readonly isProcessSkip: true;
        readonly transform: Transform;
    };
    readonly _media: {
        readonly isProcessSkip: true;
        readonly transform: Transform;
    };
    readonly _supports: {
        readonly isProcessSkip: true;
        readonly transform: Transform;
    };
};
type Styles$1 = typeof styles;
declare const styles: {
    readonly _container: {
        readonly isProcessSkip: true;
        readonly transform: Transform;
    };
    readonly _media: {
        readonly isProcessSkip: true;
        readonly transform: Transform;
    };
    readonly _supports: {
        readonly isProcessSkip: true;
        readonly transform: Transform;
    };
    readonly apply: {
        readonly isProcessResult: true;
        readonly transform: Transform;
    };
    readonly layerStyle: {
        readonly isProcessResult: true;
        readonly transform: Transform;
    };
    readonly textStyle: {
        readonly isProcessResult: true;
        readonly transform: Transform;
    };
    readonly isTruncated: {
        readonly transform: (value: boolean) => {
            overflow: string;
            textOverflow: string;
            whiteSpace: string;
        } | undefined;
    };
    readonly lineClamp: {
        readonly properties: "--ui-line-clamp";
        readonly static: {
            readonly display: "-webkit-box";
            readonly overflow: "hidden";
            readonly textOverflow: "ellipsis";
            readonly WebkitBoxOrient: "vertical";
            readonly WebkitLineClamp: "var(--ui-line-clamp)";
        };
    };
    readonly vars: {
        readonly isProcessSkip: true;
        readonly transform: typeof vars;
    };
    readonly "&::after": {
        readonly properties: "&::after";
        readonly transform: (value: any) => any;
    };
    readonly "&::before": {
        readonly properties: "&::before";
        readonly transform: (value: any) => any;
    };
    readonly accent: {
        readonly properties: "accentColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly bg: {
        readonly properties: "background";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly bgAttachment: {
        readonly properties: "backgroundAttachment";
    };
    readonly bgBlendMode: {
        readonly properties: "backgroundBlendMode";
    };
    readonly bgClip: {
        readonly properties: "backgroundClip";
        readonly transform: (value: any) => {
            backgroundClip: string;
            color: string;
        } | {
            backgroundClip: any;
            color?: undefined;
        };
    };
    readonly bgColor: {
        readonly properties: "backgroundColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly bgGradient: {
        readonly properties: "backgroundImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly bgImage: {
        readonly properties: "backgroundImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly bgImg: {
        readonly properties: "backgroundImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly bgOrigin: {
        readonly properties: "backgroundOrigin";
    };
    readonly bgPosition: {
        readonly properties: "backgroundPosition";
    };
    readonly bgPositionX: {
        readonly properties: "backgroundPositionX";
    };
    readonly bgPositionY: {
        readonly properties: "backgroundPositionY";
    };
    readonly bgPosX: {
        readonly properties: "backgroundPositionX";
    };
    readonly bgPosY: {
        readonly properties: "backgroundPositionY";
    };
    readonly bgRepeat: {
        readonly properties: "backgroundRepeat";
    };
    readonly bgSize: {
        readonly properties: "backgroundSize";
    };
    readonly blendMode: {
        readonly properties: "mixBlendMode";
    };
    readonly borderBottomEndRadius: {
        readonly properties: "borderEndEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderBottomStartRadius: {
        readonly properties: "borderEndStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderEnd: {
        readonly properties: "borderInlineEnd";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderEndColor: {
        readonly properties: "borderInlineEndColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderEndRadius: {
        readonly properties: ["borderEndStartRadius", "borderEndEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderEndStyle: {
        readonly properties: "borderInlineEndStyle";
    };
    readonly borderEndWidth: {
        readonly properties: "borderInlineEndWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderStart: {
        readonly properties: "borderInlineStart";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderStartColor: {
        readonly properties: "borderInlineStartColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderStartRadius: {
        readonly properties: ["borderStartStartRadius", "borderStartEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderStartStyle: {
        readonly properties: "borderInlineStartStyle";
    };
    readonly borderStartWidth: {
        readonly properties: "borderInlineStartWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderTopEndRadius: {
        readonly properties: "borderStartEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderTopStartRadius: {
        readonly properties: "borderStartStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly caret: {
        readonly properties: "caretColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly flexDir: {
        readonly properties: "flexDirection";
    };
    readonly g: {
        readonly properties: "gap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly gapX: {
        readonly properties: "columnGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly gapY: {
        readonly properties: "rowGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly gx: {
        readonly properties: "columnGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly gy: {
        readonly properties: "rowGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly h: {
        readonly properties: "height";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly insetEnd: {
        readonly properties: "insetInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetStart: {
        readonly properties: "insetInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly leading: {
        readonly properties: "lineHeight";
        readonly token: "lineHeights";
        readonly transform: Transform;
    };
    readonly listStyleImg: {
        readonly properties: "listStyleImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly listStylePos: {
        readonly properties: "listStylePosition";
    };
    readonly m: {
        readonly properties: "margin";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginEnd: {
        readonly properties: "marginInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginStart: {
        readonly properties: "marginInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly maxH: {
        readonly properties: "maxHeight";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxW: {
        readonly properties: "maxWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly mb: {
        readonly properties: "marginBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly me: {
        readonly properties: "marginInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly minH: {
        readonly properties: "minHeight";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minW: {
        readonly properties: "minWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly ml: {
        readonly properties: "marginLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly mr: {
        readonly properties: "marginRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly ms: {
        readonly properties: "marginInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly mt: {
        readonly properties: "marginTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly mx: {
        readonly properties: ["marginInlineStart", "marginInlineEnd"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly my: {
        readonly properties: ["marginTop", "marginBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly overscroll: {
        readonly properties: "overscrollBehavior";
    };
    readonly overscrollX: {
        readonly properties: "overscrollBehaviorX";
    };
    readonly overscrollY: {
        readonly properties: "overscrollBehaviorY";
    };
    readonly p: {
        readonly properties: "padding";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingEnd: {
        readonly properties: "paddingInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingStart: {
        readonly properties: "paddingInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pb: {
        readonly properties: "paddingBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pe: {
        readonly properties: "paddingInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pl: {
        readonly properties: "paddingLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pos: {
        readonly properties: "position";
    };
    readonly pr: {
        readonly properties: "paddingRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly ps: {
        readonly properties: "paddingInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly pt: {
        readonly properties: "paddingTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly px: {
        readonly properties: ["paddingInlineStart", "paddingInlineEnd"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly py: {
        readonly properties: ["paddingTop", "paddingBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly rounded: {
        readonly properties: "borderRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottom: {
        readonly properties: ["borderBottomLeftRadius", "borderBottomRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottomEnd: {
        readonly properties: "borderEndEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottomLeft: {
        readonly properties: "borderBottomLeftRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottomRight: {
        readonly properties: "borderBottomRightRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedBottomStart: {
        readonly properties: "borderEndStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedEnd: {
        readonly properties: ["borderEndStartRadius", "borderEndEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedLeft: {
        readonly properties: ["borderTopLeftRadius", "borderBottomLeftRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedRight: {
        readonly properties: ["borderTopRightRadius", "borderBottomRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedStart: {
        readonly properties: ["borderStartStartRadius", "borderStartEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTop: {
        readonly properties: ["borderTopLeftRadius", "borderTopRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTopEnd: {
        readonly properties: "borderStartEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTopLeft: {
        readonly properties: "borderTopLeftRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTopRight: {
        readonly properties: "borderTopRightRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly roundedTopStart: {
        readonly properties: "borderStartStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly shadow: {
        readonly properties: "boxShadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly text: {
        readonly properties: "fontSize";
        readonly token: "fontSizes";
        readonly transform: Transform;
    };
    readonly textColor: {
        readonly properties: "color";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly textDecor: {
        readonly properties: "textDecoration";
    };
    readonly tracking: {
        readonly properties: "letterSpacing";
        readonly token: "letterSpacings";
        readonly transform: Transform;
    };
    readonly w: {
        readonly properties: "width";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly z: {
        readonly properties: "zIndex";
        readonly token: "zIndices";
        readonly transform: Transform;
    };
    readonly accentColor: {
        readonly properties: "accentColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly alignContent: true;
    readonly alignItems: true;
    readonly alignmentBaseline: true;
    readonly alignSelf: true;
    readonly all: true;
    readonly animation: {
        readonly properties: "animation";
        readonly token: "animations";
        readonly transform: Transform;
    };
    readonly animationComposition: true;
    readonly animationDelay: true;
    readonly animationDirection: true;
    readonly animationDuration: {
        readonly properties: "animationDuration";
        readonly token: "transitions.duration";
        readonly transform: Transform;
    };
    readonly animationFillMode: true;
    readonly animationIterationCount: true;
    readonly animationName: true;
    readonly animationPlayState: true;
    readonly animationRange: true;
    readonly animationRangeEnd: true;
    readonly animationRangeStart: true;
    readonly animationTimeline: true;
    readonly animationTimingFunction: {
        readonly properties: "animationTimingFunction";
        readonly token: "transitions.easing";
        readonly transform: Transform;
    };
    readonly appearance: true;
    readonly aspectRatio: true;
    readonly azimuth: true;
    readonly backdropBlur: {
        readonly properties: "--ui-backdrop-blur";
        readonly token: "blurs";
        readonly transform: Transform;
    };
    readonly backdropBrightness: {
        readonly properties: "--ui-backdrop-brightness";
        readonly transform: Transform;
    };
    readonly backdropContrast: {
        readonly properties: "--ui-backdrop-contrast";
        readonly transform: Transform;
    };
    readonly backdropDropShadow: {
        readonly properties: "--ui-backdrop-drop-shadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly backdropFilter: {
        readonly transform: Transform;
    };
    readonly backdropGrayscale: {
        readonly properties: "--ui-backdrop-grayscale";
        readonly transform: Transform;
    };
    readonly backdropHueRotate: {
        readonly properties: "--ui-backdrop-hue-rotate";
        readonly transform: Transform;
    };
    readonly backdropInvert: {
        readonly properties: "--ui-backdrop-invert";
        readonly transform: Transform;
    };
    readonly backdropSaturate: {
        readonly properties: "--ui-backdrop-saturate";
        readonly transform: Transform;
    };
    readonly backdropSepia: {
        readonly properties: "--ui-backdrop-sepia";
        readonly transform: Transform;
    };
    readonly backfaceVisibility: {
        readonly properties: "backfaceVisibility";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly background: {
        readonly properties: "background";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly backgroundAttachment: true;
    readonly backgroundBlendMode: true;
    readonly backgroundClip: {
        readonly properties: "backgroundClip";
        readonly transform: (value: any) => {
            backgroundClip: string;
            color: string;
        } | {
            backgroundClip: any;
            color?: undefined;
        };
    };
    readonly backgroundColor: {
        readonly properties: "backgroundColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly backgroundImage: {
        readonly properties: "backgroundImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly backgroundOrigin: true;
    readonly backgroundPosition: true;
    readonly backgroundPositionX: true;
    readonly backgroundPositionY: true;
    readonly backgroundRepeat: true;
    readonly backgroundSize: true;
    readonly baselineShift: true;
    readonly blockSize: {
        readonly properties: "blockSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly blur: {
        readonly properties: "--ui-blur";
        readonly token: "blurs";
        readonly transform: Transform;
    };
    readonly border: {
        readonly properties: "border";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBlock: {
        readonly properties: "borderBlock";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBlockColor: {
        readonly properties: "borderBlockColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderBlockEnd: {
        readonly properties: "borderBlockEnd";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBlockEndColor: {
        readonly properties: "borderBlockEndColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderBlockEndStyle: true;
    readonly borderBlockEndWidth: {
        readonly properties: "borderBlockEndWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderBlockStart: {
        readonly properties: "borderBlockStart";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBlockStartColor: {
        readonly properties: "borderBlockStartColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderBlockStartStyle: true;
    readonly borderBlockStartWidth: {
        readonly properties: "borderBlockStartWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderBlockStyle: true;
    readonly borderBlockWidth: {
        readonly properties: "borderBlockWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderBottom: {
        readonly properties: "borderBottom";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderBottomColor: {
        readonly properties: "borderBottomColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderBottomLeftRadius: {
        readonly properties: "borderBottomLeftRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderBottomRadius: {
        readonly properties: ["borderBottomLeftRadius", "borderBottomRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderBottomRightRadius: {
        readonly properties: "borderBottomRightRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderBottomStyle: true;
    readonly borderBottomWidth: {
        readonly properties: "borderBottomWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderCollapse: true;
    readonly borderColor: {
        readonly properties: "borderColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderEndEndRadius: {
        readonly properties: "borderEndEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderEndStartRadius: {
        readonly properties: "borderEndStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderImage: {
        readonly properties: "borderImage";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderImageOutset: true;
    readonly borderImageRepeat: true;
    readonly borderImageSlice: true;
    readonly borderImageSource: {
        readonly properties: "borderImageSource";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly borderImageWidth: {
        readonly properties: "borderImageWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderInline: {
        readonly properties: "borderInline";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderInlineColor: {
        readonly properties: "borderInlineColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderInlineEnd: {
        readonly properties: "borderInlineEnd";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderInlineEndColor: {
        readonly properties: "borderInlineEndColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderInlineEndRadius: {
        readonly properties: ["borderEndStartRadius", "borderEndEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderInlineEndStyle: true;
    readonly borderInlineEndWidth: {
        readonly properties: "borderInlineEndWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderInlineStart: {
        readonly properties: "borderInlineStart";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderInlineStartColor: {
        readonly properties: "borderInlineStartColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderInlineStartRadius: {
        readonly properties: ["borderStartStartRadius", "borderStartEndRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderInlineStartStyle: true;
    readonly borderInlineStartWidth: {
        readonly properties: "borderInlineStartWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderInlineStyle: true;
    readonly borderInlineWidth: {
        readonly properties: "borderInlineWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderLeft: {
        readonly properties: "borderLeft";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderLeftColor: {
        readonly properties: "borderLeftColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderLeftRadius: {
        readonly properties: ["borderTopLeftRadius", "borderBottomLeftRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderLeftStyle: true;
    readonly borderLeftWidth: {
        readonly properties: "borderLeftWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderRadius: {
        readonly properties: "borderRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderRight: {
        readonly properties: "borderRight";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderRightColor: {
        readonly properties: "borderRightColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderRightRadius: {
        readonly properties: ["borderTopRightRadius", "borderBottomRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderRightStyle: true;
    readonly borderRightWidth: {
        readonly properties: "borderRightWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderSpacing: true;
    readonly borderStartEndRadius: {
        readonly properties: "borderStartEndRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderStartStartRadius: {
        readonly properties: "borderStartStartRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderStyle: true;
    readonly borderTop: {
        readonly properties: "borderTop";
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderTopColor: {
        readonly properties: "borderTopColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly borderTopLeftRadius: {
        readonly properties: "borderTopLeftRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderTopRadius: {
        readonly properties: ["borderTopLeftRadius", "borderTopRightRadius"];
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderTopRightRadius: {
        readonly properties: "borderTopRightRadius";
        readonly token: "radii";
        readonly transform: Transform;
    };
    readonly borderTopStyle: true;
    readonly borderTopWidth: {
        readonly properties: "borderTopWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderWidth: {
        readonly properties: "borderWidth";
        readonly transform: (value: any) => any;
    };
    readonly borderX: {
        readonly properties: ["borderLeft", "borderRight"];
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly borderY: {
        readonly properties: ["borderTop", "borderBottom"];
        readonly token: "borders";
        readonly transform: Transform;
    };
    readonly bottom: {
        readonly properties: "bottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly boxAlign: true;
    readonly boxDecorationBreak: true;
    readonly boxDirection: true;
    readonly boxFlex: true;
    readonly boxFlexGroup: true;
    readonly boxLines: true;
    readonly boxOrdinalGroup: true;
    readonly boxOrient: true;
    readonly boxPack: true;
    readonly boxShadow: {
        readonly properties: "boxShadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly boxSize: {
        readonly properties: ["width", "height"];
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly boxSizing: true;
    readonly breakAfter: true;
    readonly breakBefore: true;
    readonly breakInside: true;
    readonly brightness: {
        readonly properties: "--ui-brightness";
        readonly transform: Transform;
    };
    readonly captionSide: true;
    readonly caretColor: {
        readonly properties: "caretColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly clear: true;
    readonly clip: true;
    readonly clipPath: true;
    readonly clipRule: true;
    readonly color: {
        readonly properties: "color";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly colorInterpolation: true;
    readonly colorMode: {
        readonly properties: "colorScheme";
    };
    readonly columnCount: true;
    readonly columnFill: true;
    readonly columnGap: {
        readonly properties: "columnGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly columnRule: {
        readonly properties: "columnRule";
        readonly transform: (value: any) => any;
    };
    readonly columnRuleColor: {
        readonly properties: "columnRuleColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly columnRuleStyle: true;
    readonly columnRuleWidth: {
        readonly properties: "columnRuleWidth";
        readonly transform: (value: any) => any;
    };
    readonly columns: true;
    readonly columnSpan: true;
    readonly columnWidth: {
        readonly properties: "columnWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly contain: true;
    readonly container: true;
    readonly containerName: true;
    readonly containerType: true;
    readonly containIntrinsicBlockSize: true;
    readonly containIntrinsicHeight: true;
    readonly containIntrinsicInlineSize: true;
    readonly containIntrinsicSize: true;
    readonly containIntrinsicWidth: {
        readonly properties: "containIntrinsicWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly content: true;
    readonly contentVisibility: true;
    readonly contrast: {
        readonly properties: "--ui-contrast";
        readonly transform: Transform;
    };
    readonly counterIncrement: true;
    readonly counterReset: true;
    readonly counterSet: true;
    readonly cursor: true;
    readonly direction: true;
    readonly display: true;
    readonly dominantBaseline: true;
    readonly dropShadow: {
        readonly properties: "--ui-drop-shadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly emptyCells: true;
    readonly fill: {
        readonly properties: "fill";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly fillOpacity: true;
    readonly fillRule: true;
    readonly filter: {
        readonly transform: Transform;
    };
    readonly flex: true;
    readonly flexBasis: {
        readonly properties: "flexBasis";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly flexDirection: true;
    readonly flexFlow: true;
    readonly flexGrow: true;
    readonly flexShrink: true;
    readonly flexWrap: true;
    readonly float: true;
    readonly floodColor: {
        readonly properties: "floodColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly floodOpacity: true;
    readonly font: true;
    readonly fontFamily: {
        readonly properties: "fontFamily";
        readonly token: "fonts";
        readonly transform: Transform;
    };
    readonly fontFeatureSettings: true;
    readonly fontKerning: true;
    readonly fontLanguageOverride: true;
    readonly fontOpticalSizing: true;
    readonly fontPalette: true;
    readonly fontSize: {
        readonly properties: "fontSize";
        readonly token: "fontSizes";
        readonly transform: Transform;
    };
    readonly fontSizeAdjust: true;
    readonly fontSmooth: true;
    readonly fontStretch: true;
    readonly fontStyle: true;
    readonly fontSynthesis: true;
    readonly fontSynthesisPosition: true;
    readonly fontSynthesisSmallCaps: true;
    readonly fontSynthesisStyle: true;
    readonly fontSynthesisWeight: true;
    readonly fontVariant: true;
    readonly fontVariantAlternates: true;
    readonly fontVariantCaps: true;
    readonly fontVariantEastAsian: true;
    readonly fontVariantEmoji: true;
    readonly fontVariantLigatures: true;
    readonly fontVariantNumeric: true;
    readonly fontVariantPosition: true;
    readonly fontVariationSettings: true;
    readonly fontWeight: {
        readonly properties: "fontWeight";
        readonly token: "fontWeights";
        readonly transform: Transform;
    };
    readonly forcedColorAdjust: true;
    readonly gap: {
        readonly properties: "gap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly glyphOrientationVertical: true;
    readonly grayscale: {
        readonly properties: "--ui-grayscale";
        readonly transform: Transform;
    };
    readonly grid: true;
    readonly gridArea: true;
    readonly gridAutoColumns: {
        readonly properties: "gridAutoColumns";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly gridAutoFlow: true;
    readonly gridAutoRows: {
        readonly properties: "gridAutoRows";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly gridColumn: true;
    readonly gridColumnEnd: true;
    readonly gridColumnStart: true;
    readonly gridRow: true;
    readonly gridRowEnd: true;
    readonly gridRowStart: true;
    readonly gridTemplate: true;
    readonly gridTemplateAreas: true;
    readonly gridTemplateColumns: {
        readonly properties: "gridTemplateColumns";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly gridTemplateRows: {
        readonly properties: "gridTemplateRows";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly hangingPunctuation: true;
    readonly height: {
        readonly properties: "height";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly hueRotate: {
        readonly properties: "--ui-hue-rotate";
        readonly transform: Transform;
    };
    readonly hyphenateCharacter: true;
    readonly hyphenateLimitChars: true;
    readonly hyphens: true;
    readonly imageOrientation: true;
    readonly imageRendering: true;
    readonly imageResolution: true;
    readonly initialLetter: true;
    readonly inlineSize: {
        readonly properties: "inlineSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly inset: {
        readonly properties: "inset";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetBlock: {
        readonly properties: "insetBlock";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetBlockEnd: {
        readonly properties: "insetBlockEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetBlockStart: {
        readonly properties: "insetBlockStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetInline: {
        readonly properties: "insetInline";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetInlineEnd: {
        readonly properties: "insetInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetInlineStart: {
        readonly properties: "insetInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetX: {
        readonly properties: ["left", "right"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly insetY: {
        readonly properties: ["top", "bottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly invert: {
        readonly properties: "--ui-invert";
        readonly transform: Transform;
    };
    readonly isolation: true;
    readonly justifyContent: true;
    readonly justifyItems: true;
    readonly justifySelf: true;
    readonly left: {
        readonly properties: "left";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly letterSpacing: {
        readonly properties: "letterSpacing";
        readonly token: "letterSpacings";
        readonly transform: Transform;
    };
    readonly lightingColor: {
        readonly properties: "lightingColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly lineBreak: true;
    readonly lineHeight: {
        readonly properties: "lineHeight";
        readonly token: "lineHeights";
        readonly transform: Transform;
    };
    readonly lineHeightStep: true;
    readonly listStyle: true;
    readonly listStyleImage: {
        readonly properties: "listStyleImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly listStylePosition: true;
    readonly listStyleType: true;
    readonly margin: {
        readonly properties: "margin";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginBlock: {
        readonly properties: "marginBlock";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginBlockEnd: {
        readonly properties: "marginBlockEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginBlockStart: {
        readonly properties: "marginBlockStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginBottom: {
        readonly properties: "marginBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginInline: {
        readonly properties: "marginInline";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginInlineEnd: {
        readonly properties: "marginInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginInlineStart: {
        readonly properties: "marginInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginLeft: {
        readonly properties: "marginLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginRight: {
        readonly properties: "marginRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginTop: {
        readonly properties: "marginTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginTrim: true;
    readonly marginX: {
        readonly properties: ["marginInlineStart", "marginInlineEnd"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marginY: {
        readonly properties: ["marginTop", "marginBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly marker: true;
    readonly markerEnd: true;
    readonly markerMid: true;
    readonly markerStart: true;
    readonly mask: true;
    readonly maskBorder: true;
    readonly maskBorderMode: true;
    readonly maskBorderOutset: true;
    readonly maskBorderRepeat: true;
    readonly maskBorderSlice: true;
    readonly maskBorderSource: true;
    readonly maskBorderWidth: {
        readonly properties: "maskBorderWidth";
        readonly transform: (value: any) => any;
    };
    readonly maskClip: true;
    readonly maskComposite: true;
    readonly maskImage: {
        readonly properties: "maskImage";
        readonly token: "gradients";
        readonly transform: Transform;
    };
    readonly maskMode: true;
    readonly maskOrigin: true;
    readonly maskPosition: true;
    readonly maskRepeat: true;
    readonly maskSize: true;
    readonly maskType: true;
    readonly masonryAutoFlow: true;
    readonly mathDepth: true;
    readonly mathShift: true;
    readonly mathStyle: true;
    readonly maxBlockSize: {
        readonly properties: "maxBlockSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxBoxSize: {
        readonly properties: ["maxWidth", "maxHeight"];
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxHeight: {
        readonly properties: "maxHeight";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxInlineSize: {
        readonly properties: "maxInlineSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly maxWidth: {
        readonly properties: "maxWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minBlockSize: {
        readonly properties: "minBlockSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minBoxSize: {
        readonly properties: ["minWidth", "minHeight"];
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minHeight: {
        readonly properties: "minHeight";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minInlineSize: {
        readonly properties: "minInlineSize";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly minWidth: {
        readonly properties: "minWidth";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly mixBlendMode: true;
    readonly objectFit: true;
    readonly objectPosition: true;
    readonly offset: true;
    readonly offsetAnchor: true;
    readonly offsetDistance: true;
    readonly offsetPath: true;
    readonly offsetPosition: true;
    readonly offsetRotate: true;
    readonly opacity: true;
    readonly order: true;
    readonly orphans: true;
    readonly outline: true;
    readonly outlineColor: {
        readonly properties: "outlineColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly outlineOffset: true;
    readonly outlineStyle: true;
    readonly outlineWidth: {
        readonly properties: "outlineWidth";
        readonly transform: (value: any) => any;
    };
    readonly overflow: true;
    readonly overflowAnchor: true;
    readonly overflowBlock: true;
    readonly overflowClipMargin: true;
    readonly overflowInline: true;
    readonly overflowWrap: true;
    readonly overflowX: true;
    readonly overflowY: true;
    readonly overlay: true;
    readonly overscrollBehavior: true;
    readonly overscrollBehaviorBlock: true;
    readonly overscrollBehaviorInline: true;
    readonly overscrollBehaviorX: true;
    readonly overscrollBehaviorY: true;
    readonly padding: {
        readonly properties: "padding";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingBlock: {
        readonly properties: "paddingBlock";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingBlockEnd: {
        readonly properties: "paddingBlockEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingBlockStart: {
        readonly properties: "paddingBlockStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingBottom: {
        readonly properties: "paddingBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingInline: {
        readonly properties: "paddingInline";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingInlineEnd: {
        readonly properties: "paddingInlineEnd";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingInlineStart: {
        readonly properties: "paddingInlineStart";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingLeft: {
        readonly properties: "paddingLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingRight: {
        readonly properties: "paddingRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingTop: {
        readonly properties: "paddingTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingX: {
        readonly properties: ["paddingInlineStart", "paddingInlineEnd"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly paddingY: {
        readonly properties: ["paddingTop", "paddingBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly page: true;
    readonly pageBreakAfter: true;
    readonly pageBreakBefore: true;
    readonly pageBreakInside: true;
    readonly paintOrder: true;
    readonly perspective: true;
    readonly perspectiveOrigin: true;
    readonly placeContent: true;
    readonly placeItems: true;
    readonly placeSelf: true;
    readonly pointerEvents: true;
    readonly position: true;
    readonly printColorAdjust: true;
    readonly quotes: true;
    readonly resize: true;
    readonly right: {
        readonly properties: "right";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly rotate: {
        readonly properties: "--ui-rotate";
        readonly transform: (value: any) => any;
    };
    readonly rowGap: {
        readonly properties: "rowGap";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly rubyAlign: true;
    readonly rubyPosition: true;
    readonly saturate: {
        readonly properties: "--ui-saturate";
        readonly transform: Transform;
    };
    readonly scale: {
        readonly properties: ["--ui-scale-x", "--ui-scale-y"];
    };
    readonly scaleX: {
        readonly properties: "--ui-scale-x";
    };
    readonly scaleY: {
        readonly properties: "--ui-scale-y";
    };
    readonly scrollbarColor: {
        readonly properties: "scrollbarColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly scrollbarGutter: true;
    readonly scrollbarWidth: {
        readonly properties: "scrollbarWidth";
        readonly transform: (value: any) => any;
    };
    readonly scrollBehavior: true;
    readonly scrollMargin: {
        readonly properties: "scrollMargin";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginBlock: true;
    readonly scrollMarginBlockEnd: true;
    readonly scrollMarginBlockStart: true;
    readonly scrollMarginBottom: {
        readonly properties: "scrollMarginBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginInline: true;
    readonly scrollMarginInlineEnd: true;
    readonly scrollMarginInlineStart: true;
    readonly scrollMarginLeft: {
        readonly properties: "scrollMarginLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginRight: {
        readonly properties: "scrollMarginRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginTop: {
        readonly properties: "scrollMarginTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginX: {
        readonly properties: ["scrollMarginLeft", "scrollMarginRight"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollMarginY: {
        readonly properties: ["scrollMarginTop", "scrollMarginBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPadding: {
        readonly properties: "scrollPadding";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingBlock: true;
    readonly scrollPaddingBlockEnd: true;
    readonly scrollPaddingBlockStart: true;
    readonly scrollPaddingBottom: {
        readonly properties: "scrollPaddingBottom";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingInline: true;
    readonly scrollPaddingInlineEnd: true;
    readonly scrollPaddingInlineStart: true;
    readonly scrollPaddingLeft: {
        readonly properties: "scrollPaddingLeft";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingRight: {
        readonly properties: "scrollPaddingRight";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingTop: {
        readonly properties: "scrollPaddingTop";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingX: {
        readonly properties: ["scrollPaddingLeft", "scrollPaddingRight"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollPaddingY: {
        readonly properties: ["scrollPaddingTop", "scrollPaddingBottom"];
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly scrollSnapAlign: true;
    readonly scrollSnapStop: true;
    readonly scrollSnapType: true;
    readonly scrollTimeline: true;
    readonly scrollTimelineAxis: true;
    readonly scrollTimelineName: true;
    readonly sepia: {
        readonly properties: "--ui-sepia";
        readonly transform: Transform;
    };
    readonly shapeImageThreshold: true;
    readonly shapeMargin: true;
    readonly shapeOutside: true;
    readonly shapeRendering: true;
    readonly skewX: {
        readonly properties: "--ui-skew-x";
        readonly transform: (value: any) => any;
    };
    readonly skewY: {
        readonly properties: "--ui-skew-y";
        readonly transform: (value: any) => any;
    };
    readonly stopColor: true;
    readonly stopOpacity: true;
    readonly stroke: {
        readonly properties: "stroke";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly strokeDasharray: true;
    readonly strokeDashoffset: true;
    readonly strokeLinecap: true;
    readonly strokeLinejoin: true;
    readonly strokeMiterlimit: true;
    readonly strokeOpacity: true;
    readonly strokeWidth: {
        readonly properties: "strokeWidth";
        readonly transform: (value: any) => any;
    };
    readonly tableLayout: true;
    readonly tabSize: true;
    readonly textAlign: true;
    readonly textAlignLast: true;
    readonly textAnchor: true;
    readonly textCombineUpright: true;
    readonly textDecoration: true;
    readonly textDecorationColor: {
        readonly properties: "textDecorationColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly textDecorationLine: true;
    readonly textDecorationSkip: true;
    readonly textDecorationSkipInk: true;
    readonly textDecorationStyle: true;
    readonly textDecorationThickness: true;
    readonly textEmphasis: true;
    readonly textEmphasisColor: {
        readonly properties: "textEmphasisColor";
        readonly token: "colors";
        readonly transform: Transform;
    };
    readonly textEmphasisPosition: true;
    readonly textEmphasisStyle: true;
    readonly textIndent: true;
    readonly textJustify: true;
    readonly textOrientation: true;
    readonly textOverflow: true;
    readonly textRendering: true;
    readonly textShadow: {
        readonly properties: "textShadow";
        readonly token: "shadows";
        readonly transform: Transform;
    };
    readonly textSizeAdjust: true;
    readonly textTransform: true;
    readonly textUnderlineOffset: true;
    readonly textUnderlinePosition: true;
    readonly textWrap: true;
    readonly timelineScope: true;
    readonly top: {
        readonly properties: "top";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly touchAction: true;
    readonly transform: {
        readonly properties: "transform";
        readonly transform: typeof transform;
    };
    readonly transformBox: true;
    readonly transformOrigin: true;
    readonly transformStyle: true;
    readonly transition: true;
    readonly transitionBehavior: true;
    readonly transitionDelay: true;
    readonly transitionDuration: {
        readonly properties: "transitionDuration";
        readonly token: "transitions.duration";
        readonly transform: Transform;
    };
    readonly transitionProperty: {
        readonly properties: "transitionProperty";
        readonly token: "transitions.property";
        readonly transform: Transform;
    };
    readonly transitionTimingFunction: {
        readonly properties: "transitionTimingFunction";
        readonly token: "transitions.easing";
        readonly transform: Transform;
    };
    readonly translate: true;
    readonly translateX: {
        readonly properties: "--ui-translate-x";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly translateY: {
        readonly properties: "--ui-translate-y";
        readonly token: "spaces";
        readonly transform: Transform;
    };
    readonly unicodeBidi: true;
    readonly userSelect: true;
    readonly vectorEffect: true;
    readonly verticalAlign: true;
    readonly viewTimeline: true;
    readonly viewTimelineAxis: true;
    readonly viewTimelineInset: true;
    readonly viewTimelineName: true;
    readonly viewTransitionName: true;
    readonly visibility: true;
    readonly whiteSpace: true;
    readonly whiteSpaceCollapse: true;
    readonly widows: true;
    readonly width: {
        readonly properties: "width";
        readonly token: "sizes";
        readonly transform: Transform;
    };
    readonly willChange: true;
    readonly wordBreak: true;
    readonly wordSpacing: true;
    readonly writingMode: true;
    readonly zIndex: {
        readonly properties: "zIndex";
        readonly token: "zIndices";
        readonly transform: Transform;
    };
    readonly zoom: true;
};
type StyleProperty = keyof typeof styles;
declare const styleProperties: StyleProperty[];
type ProcessSkipProperty = (typeof processSkipProperties)[number];
declare const processSkipProperties: readonly ["vars", "_media", "_container", "_supports"];
type AnimationProperty = (typeof animationProperties)[number];
declare const animationProperties: readonly ["animation"];
type BlurProperty = (typeof blurProperties)[number];
declare const blurProperties: readonly ["blur", "backdropBlur"];
type BorderProperty = (typeof borderProperties)[number];
declare const borderProperties: readonly ["border", "borderBlock", "borderBlockEnd", "borderBlockStart", "borderBottom", "borderImage", "borderInline", "borderInlineEnd", "borderEnd", "borderInlineStart", "borderStart", "borderLeft", "borderRight", "borderTop", "borderY", "borderX"];
type ColorProperty = (typeof colorProperties)[number];
declare const colorProperties: readonly ["accentColor", "accent", "background", "bg", "backgroundColor", "bgColor", "borderBlockColor", "borderBlockEndColor", "borderBlockStartColor", "borderBottomColor", "borderColor", "borderInlineColor", "borderInlineEndColor", "borderEndColor", "borderInlineStartColor", "borderStartColor", "borderLeftColor", "borderRightColor", "borderTopColor", "caretColor", "caret", "color", "textColor", "columnRuleColor", "fill", "outlineColor", "scrollbarColor", "stroke", "textDecorationColor", "textEmphasisColor", "floodColor", "lightingColor"];
type FontProperty = (typeof fontProperties)[number];
declare const fontProperties: readonly ["fontFamily", "fontSize", "text", "fontWeight", "lineHeight", "leading", "letterSpacing", "tracking"];
type GradientProperty = (typeof gradientProperties)[number];
declare const gradientProperties: readonly ["backgroundImage", "bgImage", "bgImg", "bgGradient", "borderImageSource", "listStyleImage", "listStyleImg", "maskImage"];
type RadiusProperty = (typeof radiusProperties)[number];
declare const radiusProperties: readonly ["borderBottomLeftRadius", "roundedBottomLeft", "borderBottomRightRadius", "roundedBottomRight", "borderEndEndRadius", "borderBottomEndRadius", "roundedBottomEnd", "borderEndStartRadius", "borderBottomStartRadius", "roundedBottomStart", "borderRadius", "rounded", "borderStartEndRadius", "borderTopEndRadius", "roundedTopEnd", "borderStartStartRadius", "borderTopStartRadius", "roundedTopStart", "borderTopLeftRadius", "roundedTopLeft", "borderTopRightRadius", "roundedTopRight", "borderTopRadius", "roundedTop", "borderBottomRadius", "roundedBottom", "borderRightRadius", "roundedRight", "borderLeftRadius", "roundedLeft", "borderInlineStartRadius", "borderStartRadius", "roundedStart", "borderInlineEndRadius", "borderEndRadius", "roundedEnd"];
type ShadowProperty = (typeof shadowProperties)[number];
declare const shadowProperties: readonly ["boxShadow", "shadow", "textShadow", "dropShadow", "backdropDropShadow"];
type SizeProperty = (typeof sizeProperties)[number];
declare const sizeProperties: readonly ["backfaceVisibility", "blockSize", "columnWidth", "containIntrinsicWidth", "flexBasis", "gridAutoColumns", "gridAutoRows", "gridTemplateColumns", "gridTemplateRows", "height", "h", "inlineSize", "maxBlockSize", "maxHeight", "maxH", "maxInlineSize", "maxWidth", "maxW", "minBlockSize", "minHeight", "minH", "minInlineSize", "minWidth", "minW", "width", "w", "boxSize", "minBoxSize", "maxBoxSize"];
type SpaceProperty = (typeof spaceProperties)[number];
declare const spaceProperties: readonly ["bottom", "columnGap", "gx", "gapX", "gap", "g", "inset", "insetBlock", "insetBlockEnd", "insetBlockStart", "insetInline", "insetInlineEnd", "insetEnd", "insetInlineStart", "insetStart", "left", "margin", "m", "marginBlock", "marginBlockEnd", "marginBlockStart", "marginBottom", "mb", "marginInline", "marginInlineEnd", "me", "marginEnd", "marginInlineStart", "ms", "marginStart", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "padding", "p", "paddingBlock", "paddingBlockEnd", "paddingBlockStart", "paddingBottom", "pb", "paddingInline", "paddingInlineEnd", "pe", "paddingEnd", "paddingInlineStart", "ps", "paddingStart", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "right", "rowGap", "gy", "gapY", "scrollMargin", "scrollMarginBottom", "scrollMarginLeft", "scrollMarginRight", "scrollMarginTop", "scrollPadding", "scrollPaddingBottom", "scrollPaddingLeft", "scrollPaddingRight", "scrollPaddingTop", "top", "marginX", "mx", "marginY", "my", "paddingX", "px", "paddingY", "py", "scrollMarginX", "scrollMarginY", "scrollPaddingX", "scrollPaddingY", "insetX", "insetY", "translateX", "translateY"];
type TransitionProperty = (typeof transitionProperties)[number];
declare const transitionProperties: readonly ["transitionProperty", "animationTimingFunction", "transitionTimingFunction", "animationDuration", "transitionDuration"];
type ZIndexProperty = (typeof zIndexProperties)[number];
declare const zIndexProperties: readonly ["zIndex", "z"];
type LayoutStyleProperty = (typeof layoutStyleProperties)[number];
declare const layoutStyleProperties: readonly ["width", "inlineSize", "height", "backfaceVisibility", "blockSize", "boxSize", "minWidth", "minInlineSize", "minHeight", "minBlockSize", "maxWidth", "maxInlineSize", "maxHeight", "maxBlockSize", "overflow", "overflowX", "overflowY", "overscrollBehavior", "overscroll", "overscrollX", "textDecor", "overscrollBehaviorY", "overscrollY", "display", "aspectRatio", "verticalAlign", "boxSizing", "boxDecorationBreak", "float", "objectFit", "objectPosition", "visibility", "isolation", "w", "h", "minW", "maxW", "minH", "maxH", "position", "pos", "zIndex", "inset", "insetX", "insetInline", "insetY", "insetBlock", "top", "insetBlockStart", "bottom", "insetBlockEnd", "left", "insetInlineStart", "right", "insetInlineEnd", "insetStart", "insetEnd", "margin", "marginTop", "marginBlockStart", "marginRight", "marginInlineEnd", "marginBottom", "marginBlockEnd", "marginLeft", "marginInlineStart", "marginX", "marginInline", "marginY", "marginBlock", "padding", "paddingTop", "paddingBlockStart", "paddingRight", "paddingBottom", "paddingBlockEnd", "paddingLeft", "paddingInlineStart", "paddingInlineEnd", "paddingX", "paddingInline", "paddingY", "paddingBlock", "m", "mt", "mr", "me", "marginEnd", "mb", "ml", "ms", "marginStart", "mx", "my", "p", "pt", "py", "px", "pb", "pl", "ps", "paddingStart", "pr", "pe", "paddingEnd", "alignItems", "alignContent", "justifyItems", "justifyContent", "flexWrap", "flexDirection", "flexDir", "flex", "flexFlow", "flexGrow", "flexShrink", "flexBasis", "justifySelf", "alignSelf", "order", "placeItems", "placeContent", "placeSelf", "gap", "rowGap", "columnGap", "grid", "gridColumn", "gridRow", "gridAutoFlow", "gridAutoColumns", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridAutoRows", "gridTemplate", "gridTemplateColumns", "gridTemplateRows", "gridTemplateAreas", "gridArea"];
interface StyleProps {
    /**
     * Apply other styles defined in `theme.styles`.
     *
     * @example
     * ```jsx
     * <Box apply='mdx.h1'>Box</Box>
     * ```
     *
     * This will apply styles defined in `theme.styles.mdx.h1`
     */
    apply?: Token<StringLiteral>;
    /**
     * Apply layer styles defined in `theme.layerStyles`.
     */
    layerStyle?: Token<StringLiteral, "layerStyles">;
    /**
     * Apply text styles defined in `theme.textStyles`.
     */
    textStyle?: Token<StringLiteral, "textStyles">;
    /**
     * The CSS `accent-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color
     */
    accent?: Token<CSS.Property.AccentColor, "colors">;
    /**
     * The CSS `accent-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color
     */
    accentColor?: Token<CSS.Property.AccentColor, "colors">;
    /**
     * The CSS `align-content` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/align-content
     */
    alignContent?: Token<CSS.Property.AlignContent>;
    /**
     * The CSS `align-items` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
     */
    alignItems?: Token<CSS.Property.AlignItems>;
    /**
     * The CSS `alignment-baseline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/alignment-baseline
     */
    alignmentBaseline?: Token<CSS.Property.AlignmentBaseline>;
    /**
     * The CSS `align-self` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/align-self
     */
    alignSelf?: Token<CSS.Property.AlignSelf>;
    /**
     * The CSS `all` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/all
     */
    all?: Token<CSS.Globals>;
    /**
     * The CSS `animation` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation
     */
    animation?: Token<CSS.Property.Animation, "animations">;
    /**
     * The CSS `animation-composition` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-composition
     */
    animationComposition?: Token<CSS.Property.AnimationComposition>;
    /**
     * The CSS `animation-delay` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay
     */
    animationDelay?: Token<CSS.Property.AnimationDelay>;
    /**
     * The CSS `animation-direction` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction
     */
    animationDirection?: Token<CSS.Property.AnimationDirection>;
    /**
     * The CSS `animation-duration` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration
     */
    animationDuration?: Token<CSS.Property.AnimationDuration, "transitionDuration">;
    /**
     * The CSS `animation-fill-mode` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode
     */
    animationFillMode?: Token<CSS.Property.AnimationFillMode>;
    /**
     * The CSS `animation-iteration-count` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count
     */
    animationIterationCount?: Token<CSS.Property.AnimationIterationCount>;
    /**
     * The CSS `animation-name` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name
     */
    animationName?: Token<CSS.Property.AnimationName>;
    /**
     * The CSS `animation-play-state` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state
     */
    animationPlayState?: Token<CSS.Property.AnimationPlayState>;
    /**
     * The CSS `animation-range` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-range
     */
    animationRange?: Token<CSS.Property.AnimationRange>;
    /**
     * The CSS `animation-range-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-range-end
     */
    animationRangeEnd?: Token<CSS.Property.AnimationRangeEnd>;
    /**
     * The CSS `animation-range-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-range-start
     */
    animationRangeStart?: Token<CSS.Property.AnimationRangeStart>;
    /**
     * The CSS `animation-timeline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline
     */
    animationTimeline?: Token<CSS.Property.AnimationTimeline>;
    /**
     * The CSS `animation-timing-function` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function
     */
    animationTimingFunction?: Token<CSS.Property.AnimationTimingFunction, "transitionEasing">;
    /**
     * The CSS `appearance` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/appearance
     */
    appearance?: Token<CSS.Property.Appearance>;
    /**
     * The CSS `aspect-ratio` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio
     */
    aspectRatio?: Token<CSS.Property.AspectRatio>;
    /**
     * The CSS `azimuth` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/azimuth
     *
     * @deprecated
     */
    azimuth?: Token<CSS.Property.Azimuth>;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-blur`.
     */
    backdropBlur?: Token<StringLiteral, "blurs">;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-brightness`.
     */
    backdropBrightness?: Token<StringLiteral>;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-contrast`.
     */
    backdropContrast?: Token<StringLiteral>;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-drop-shadow`.
     */
    backdropDropShadow?: Token<StringLiteral, "shadows">;
    /**
     * The CSS `backdrop-filter` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter
     */
    backdropFilter?: Token<"auto" | CSS.Property.BackdropFilter>;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-grayscale`.
     */
    backdropGrayscale?: Token<StringLiteral>;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-hue-rotate`.
     */
    backdropHueRotate?: Token<StringLiteral>;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-invert`.
     */
    backdropInvert?: Token<StringLiteral>;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-saturate`.
     */
    backdropSaturate?: Token<StringLiteral>;
    /**
     * If `backdropBlur=auto`, sets the value of `--ui-backdrop-sepia`.
     */
    backdropSepia?: Token<StringLiteral>;
    /**
     * The CSS `backface-visibility` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility
     */
    backfaceVisibility?: Token<CSS.Property.BackfaceVisibility | number, "sizes">;
    /**
     * The CSS `background` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background
     */
    background?: Token<CSS.Property.Background, "colors">;
    /**
     * The CSS `background-attachment` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment
     */
    backgroundAttachment?: Token<CSS.Property.BackgroundAttachment>;
    /**
     * The CSS `background-blend-mode` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode
     */
    backgroundBlendMode?: Token<CSS.Property.BackgroundBlendMode>;
    /**
     * The CSS `background-clip` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip
     */
    backgroundClip?: Token<CSS.Property.BackgroundClip>;
    /**
     * The CSS `background-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-color
     */
    backgroundColor?: Token<CSS.Property.BackgroundColor, "colors">;
    /**
     * The CSS `background-image` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-image
     */
    backgroundImage?: Token<CSS.Property.BackgroundImage, "gradients">;
    /**
     * The CSS `background-origin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin
     */
    backgroundOrigin?: Token<CSS.Property.BackgroundOrigin>;
    /**
     * The CSS `background-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
     */
    backgroundPosition?: Token<CSS.Property.BackgroundPosition>;
    /**
     * The CSS `background-position-x` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-x
     */
    backgroundPositionX?: Token<CSS.Property.BackgroundPositionX>;
    /**
     * The CSS `background-position-y` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-y
     */
    backgroundPositionY?: Token<CSS.Property.BackgroundPositionY>;
    /**
     * The CSS `background-repeat` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat
     */
    backgroundRepeat?: Token<CSS.Property.BackgroundRepeat>;
    /**
     * The CSS `background-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-size
     */
    backgroundSize?: Token<CSS.Property.BackgroundSize>;
    /**
     * The CSS `baseline-shift` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/baseline-shift
     */
    baselineShift?: Token<CSS.Property.BaselineShift>;
    /**
     * The CSS `background` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background
     */
    bg?: Token<CSS.Property.Background, "colors">;
    /**
     * The CSS `background-attachment` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment
     */
    bgAttachment?: Token<CSS.Property.BackgroundAttachment>;
    /**
     * The CSS `background-blend-mode` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode
     */
    bgBlendMode?: Token<CSS.Property.BackgroundBlendMode>;
    /**
     * The CSS `background-clip` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip
     */
    bgClip?: Token<CSS.Property.BackgroundClip>;
    /**
     * The CSS `background-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-color
     */
    bgColor?: Token<CSS.Property.BackgroundColor, "colors">;
    /**
     * The CSS `background-image` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-image
     */
    bgGradient?: Token<CSS.Property.BackgroundImage, "gradients">;
    /**
     * The CSS `background-image` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-image
     */
    bgImage?: Token<CSS.Property.BackgroundImage, "gradients">;
    /**
     * The CSS `background-image` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-image
     */
    bgImg?: Token<CSS.Property.BackgroundImage, "gradients">;
    /**
     * The CSS `background-origin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin
     */
    bgOrigin?: Token<CSS.Property.BackgroundOrigin>;
    /**
     * The CSS `background-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
     */
    bgPosition?: Token<CSS.Property.BackgroundPosition>;
    /**
     * The CSS `background-position-x` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-x
     */
    bgPositionX?: Token<CSS.Property.BackgroundPositionX>;
    /**
     * The CSS `background-position-y` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-y
     */
    bgPositionY?: Token<CSS.Property.BackgroundPositionY>;
    /**
     * The CSS `background-position-x` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-x
     */
    bgPosX?: Token<CSS.Property.BackgroundPositionX>;
    /**
     * The CSS `background-position-y` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-position-y
     */
    bgPosY?: Token<CSS.Property.BackgroundPositionY>;
    /**
     * The CSS `background-repeat` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat
     */
    bgRepeat?: Token<CSS.Property.BackgroundRepeat>;
    /**
     * The CSS `background-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/background-size
     */
    bgSize?: Token<CSS.Property.BackgroundSize>;
    /**
     * The CSS `mix-blend-mode` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode
     */
    blendMode?: Token<CSS.Property.MixBlendMode>;
    /**
     * The CSS `block-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/block-size
     */
    blockSize?: Token<CSS.Property.BlockSize | number, "sizes">;
    /**
     * If `filter=auto`, sets the value of `--ui-blur`.
     */
    blur?: Token<StringLiteral, "blurs">;
    /**
     * The CSS `border` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border
     */
    border?: Token<CSS.Property.Border | number, "borders">;
    /**
     * The CSS `border-block` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block
     */
    borderBlock?: Token<CSS.Property.BorderBlock | number, "borders">;
    /**
     * The CSS `border-block-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-color
     */
    borderBlockColor?: Token<CSS.Property.BorderBlockColor, "colors">;
    /**
     * The CSS `border-block-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end
     */
    borderBlockEnd?: Token<CSS.Property.BorderBlockEnd | number, "borders">;
    /**
     * The CSS `border-block-end-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-color
     */
    borderBlockEndColor?: Token<CSS.Property.BorderBlockEndColor, "colors">;
    /**
     * The CSS `border-block-end-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-style
     */
    borderBlockEndStyle?: Token<CSS.Property.BorderBlockEndStyle>;
    /**
     * The CSS `border-block-end-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-width
     */
    borderBlockEndWidth?: Token<CSS.Property.BorderBlockEndWidth | number>;
    /**
     * The CSS `border-block-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start
     */
    borderBlockStart?: Token<CSS.Property.BorderBlockStart | number, "borders">;
    /**
     * The CSS `border-block-start-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-color
     */
    borderBlockStartColor?: Token<CSS.Property.BorderBlockStartColor, "colors">;
    /**
     * The CSS `border-block-start-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-style
     */
    borderBlockStartStyle?: Token<CSS.Property.BorderBlockStartStyle>;
    /**
     * The CSS `border-block-start-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-width
     */
    borderBlockStartWidth?: Token<CSS.Property.BorderBlockStartWidth | number>;
    /**
     * The CSS `border-block-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-style
     */
    borderBlockStyle?: Token<CSS.Property.BorderBlockStyle>;
    /**
     * The CSS `border-block-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-width
     */
    borderBlockWidth?: Token<CSS.Property.BorderBlockWidth | number>;
    /**
     * The CSS `border-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom
     */
    borderBottom?: Token<CSS.Property.BorderBottom | number, "borders">;
    /**
     * The CSS `border-bottom-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color
     */
    borderBottomColor?: Token<CSS.Property.BorderBottomColor, "colors">;
    /**
     * The CSS `border-end-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius
     */
    borderBottomEndRadius?: Token<CSS.Property.BorderEndEndRadius | number, "radii">;
    /**
     * The CSS `border-bottom-left-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius
     */
    borderBottomLeftRadius?: Token<CSS.Property.BorderBottomLeftRadius | number, "radii">;
    /**
     * The CSS `border-bottom-left-radius` and `border-bottom-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius
     */
    borderBottomRadius?: Token<CSS.Property.BorderBottomLeftRadius | CSS.Property.BorderBottomRightRadius | number, "radii">;
    /**
     * The CSS `border-bottom-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius
     */
    borderBottomRightRadius?: Token<CSS.Property.BorderBottomRightRadius | number, "radii">;
    /**
     * The CSS `border-end-start-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radius
     */
    borderBottomStartRadius?: Token<CSS.Property.BorderEndStartRadius | number, "radii">;
    /**
     * The CSS `border-bottom-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style
     */
    borderBottomStyle?: Token<CSS.Property.BorderBottomStyle>;
    /**
     * The CSS `border-bottom-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width
     */
    borderBottomWidth?: Token<CSS.Property.BorderBottomWidth | number>;
    /**
     * The CSS `border-collapse` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse
     */
    borderCollapse?: Token<CSS.Property.BorderCollapse>;
    /**
     * The CSS `border-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-color
     */
    borderColor?: Token<CSS.Property.BorderColor, "colors">;
    /**
     * The CSS `border-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end
     */
    borderEnd?: Token<CSS.Property.BorderInlineEnd | number, "borders">;
    /**
     * The CSS `border-inline-end-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-color
     */
    borderEndColor?: Token<CSS.Property.BorderInlineEndColor, "colors">;
    /**
     * The CSS `border-end-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius
     */
    borderEndEndRadius?: Token<CSS.Property.BorderEndEndRadius | number, "radii">;
    /**
     * The CSS `border-end-start-radius` and `border-end-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radius
     */
    borderEndRadius?: Token<CSS.Property.BorderEndEndRadius | CSS.Property.BorderEndStartRadius | number, "radii">;
    /**
     * The CSS `border-end-start-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radius
     */
    borderEndStartRadius?: Token<CSS.Property.BorderEndStartRadius | number, "radii">;
    /**
     * The CSS `border-inline-end-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-style
     */
    borderEndStyle?: Token<CSS.Property.BorderInlineEndStyle>;
    /**
     * The CSS `border-inline-end-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width
     */
    borderEndWidth?: Token<CSS.Property.BorderInlineEndWidth | number>;
    /**
     * The CSS `border-image` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-image
     */
    borderImage?: Token<CSS.Property.BorderImage | number, "borders">;
    /**
     * The CSS `border-image-outset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset
     */
    borderImageOutset?: Token<CSS.Property.BorderImageOutset>;
    /**
     * The CSS `border-image-repeat` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-repeat
     */
    borderImageRepeat?: Token<CSS.Property.BorderImageRepeat>;
    /**
     * The CSS `border-image-slice` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-slice
     */
    borderImageSlice?: Token<CSS.Property.BorderImageSlice>;
    /**
     * The CSS `border-image-source` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-source
     */
    borderImageSource?: Token<CSS.Property.BorderImageSource, "gradients">;
    /**
     * The CSS `border-image-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width
     */
    borderImageWidth?: Token<CSS.Property.BorderImageWidth | number>;
    /**
     * The CSS `border-inline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline
     */
    borderInline?: Token<CSS.Property.BorderInline | number, "borders">;
    /**
     * The CSS `border-inline-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-color
     */
    borderInlineColor?: Token<CSS.Property.BorderInlineColor, "colors">;
    /**
     * The CSS `border-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end
     */
    borderInlineEnd?: Token<CSS.Property.BorderInlineEnd | number, "borders">;
    /**
     * The CSS `border-inline-end-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-color
     */
    borderInlineEndColor?: Token<CSS.Property.BorderInlineEndColor, "colors">;
    /**
     * The CSS `border-end-start-radius` and `border-end-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radius
     */
    borderInlineEndRadius?: Token<CSS.Property.BorderEndEndRadius | CSS.Property.BorderEndStartRadius | number, "radii">;
    /**
     * The CSS `border-inline-end-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-style
     */
    borderInlineEndStyle?: Token<CSS.Property.BorderInlineEndStyle>;
    /**
     * The CSS `border-inline-end-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width
     */
    borderInlineEndWidth?: Token<CSS.Property.BorderInlineEndWidth | number>;
    /**
     * The CSS `border-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start
     */
    borderInlineStart?: Token<CSS.Property.BorderInlineStart | number, "borders">;
    /**
     * The CSS `border-inline-start-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-color
     */
    borderInlineStartColor?: Token<CSS.Property.BorderInlineStartColor, "colors">;
    /**
     * The CSS `border-start-start-radius` and `border-start-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radius
     */
    borderInlineStartRadius?: Token<CSS.Property.BorderStartEndRadius | CSS.Property.BorderStartStartRadius | number, "radii">;
    /**
     * The CSS `border-inline-start-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-style
     */
    borderInlineStartStyle?: Token<CSS.Property.BorderInlineStartStyle>;
    /**
     * The CSS `border-inline-start-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-width
     */
    borderInlineStartWidth?: Token<CSS.Property.BorderInlineStartWidth | number>;
    /**
     * The CSS `border-inline-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-style
     */
    borderInlineStyle?: Token<CSS.Property.BorderInlineStyle>;
    /**
     * The CSS `border-inline-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-width
     */
    borderInlineWidth?: Token<CSS.Property.BorderInlineWidth | number>;
    /**
     * The CSS `border-left` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-left
     */
    borderLeft?: Token<CSS.Property.BorderLeft | number, "borders">;
    /**
     * The CSS `border-left-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color
     */
    borderLeftColor?: Token<CSS.Property.BorderLeftColor, "colors">;
    /**
     * The CSS `border-top-left-radius` and `border-bottom-left-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius
     */
    borderLeftRadius?: Token<CSS.Property.BorderBottomLeftRadius | CSS.Property.BorderTopLeftRadius | number, "radii">;
    /**
     * The CSS `border-left-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style
     */
    borderLeftStyle?: Token<CSS.Property.BorderLeftStyle>;
    /**
     * The CSS `border-left-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width
     */
    borderLeftWidth?: Token<CSS.Property.BorderLeftWidth | number>;
    /**
     * The CSS `border-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius
     */
    borderRadius?: Token<CSS.Property.BorderRadius | number, "radii">;
    /**
     * The CSS `border-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-right
     */
    borderRight?: Token<CSS.Property.BorderRight | number, "borders">;
    /**
     * The CSS `border-right-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color
     */
    borderRightColor?: Token<CSS.Property.BorderRightColor, "colors">;
    /**
     * The CSS `border-top-right-radius` and `border-bottom-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius
     */
    borderRightRadius?: Token<CSS.Property.BorderBottomRightRadius | CSS.Property.BorderTopRightRadius | number, "radii">;
    /**
     * The CSS `border-right-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style
     */
    borderRightStyle?: Token<CSS.Property.BorderRightStyle>;
    /**
     * The CSS `border-right-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width
     */
    borderRightWidth?: Token<CSS.Property.BorderRightWidth | number>;
    /**
     * The CSS `border-spacing` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-spacing
     */
    borderSpacing?: Token<CSS.Property.BorderSpacing>;
    /**
     * The CSS `border-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start
     */
    borderStart?: Token<CSS.Property.BorderInlineStart | number, "borders">;
    /**
     * The CSS `border-inline-start-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-color
     */
    borderStartColor?: Token<CSS.Property.BorderInlineStartColor, "colors">;
    /**
     * The CSS `border-start-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius
     */
    borderStartEndRadius?: Token<CSS.Property.BorderStartEndRadius | number, "radii">;
    /**
     * The CSS `border-start-start-radius` and `border-start-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radius
     */
    borderStartRadius?: Token<CSS.Property.BorderStartEndRadius | CSS.Property.BorderStartStartRadius | number, "radii">;
    /**
     * The CSS `border-start-start-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radius
     */
    borderStartStartRadius?: Token<CSS.Property.BorderStartStartRadius | number, "radii">;
    /**
     * The CSS `border-inline-start-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-style
     */
    borderStartStyle?: Token<CSS.Property.BorderInlineStartStyle>;
    /**
     * The CSS `border-inline-start-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-width
     */
    borderStartWidth?: Token<CSS.Property.BorderInlineStartWidth | number>;
    /**
     * The CSS `border-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-style
     */
    borderStyle?: Token<CSS.Property.BorderStyle>;
    /**
     * The CSS `border-top` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top
     */
    borderTop?: Token<CSS.Property.BorderTop | number, "borders">;
    /**
     * The CSS `border-top-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color
     */
    borderTopColor?: Token<CSS.Property.BorderTopColor, "colors">;
    /**
     * The CSS `border-start-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius
     */
    borderTopEndRadius?: Token<CSS.Property.BorderStartEndRadius | number, "radii">;
    /**
     * The CSS `border-top-left-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius
     */
    borderTopLeftRadius?: Token<CSS.Property.BorderTopLeftRadius | number, "radii">;
    /**
     * The CSS `border-top-left-radius` and `border-top-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius
     */
    borderTopRadius?: Token<CSS.Property.BorderTopLeftRadius | CSS.Property.BorderTopRightRadius | number, "radii">;
    /**
     * The CSS `border-top-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius
     */
    borderTopRightRadius?: Token<CSS.Property.BorderTopRightRadius | number, "radii">;
    /**
     * The CSS `border-start-start-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radius
     */
    borderTopStartRadius?: Token<CSS.Property.BorderStartStartRadius | number, "radii">;
    /**
     * The CSS `border-top-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style
     */
    borderTopStyle?: Token<CSS.Property.BorderTopStyle>;
    /**
     * The CSS `border-top-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width
     */
    borderTopWidth?: Token<CSS.Property.BorderTopWidth | number>;
    /**
     * The CSS `border-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-width
     */
    borderWidth?: Token<CSS.Property.BorderWidth | number>;
    /**
     * The CSS `border-left` and `border-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-left
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-right
     */
    borderX?: Token<CSS.Property.BorderLeft | CSS.Property.BorderRight | number, "borders">;
    /**
     * The CSS `border-top` and `border-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top
     */
    borderY?: Token<CSS.Property.BorderBottom | CSS.Property.BorderTop | number, "borders">;
    /**
     * The CSS `bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/bottom
     */
    bottom?: Token<CSS.Property.Bottom | number, "spaces">;
    /**
     * The CSS `box-align` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-align
     *
     * @deprecated
     */
    boxAlign?: Token<CSS.Property.BoxAlign>;
    /**
     * The CSS `box-decoration-break` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-decoration-break
     */
    boxDecorationBreak?: Token<CSS.Property.BoxDecorationBreak>;
    /**
     * The CSS `box-direction` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-direction
     *
     * @deprecated
     */
    boxDirection?: Token<CSS.Property.BoxDirection>;
    /**
     * The CSS `box-flex` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-flex
     *
     * @deprecated
     */
    boxFlex?: Token<CSS.Property.BoxFlex>;
    /**
     * The CSS `box-flex-group` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-flex-group
     *
     * @deprecated
     */
    boxFlexGroup?: Token<CSS.Property.BoxFlexGroup>;
    /**
     * The CSS `box-lines` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-lines
     *
     * @deprecated
     */
    boxLines?: Token<CSS.Property.BoxLines>;
    /**
     * The CSS `box-ordinal-group` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-ordinal-group
     *
     * @deprecated
     */
    boxOrdinalGroup?: Token<CSS.Property.BoxOrdinalGroup>;
    /**
     * The CSS `box-orient` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-orient
     *
     * @deprecated
     */
    boxOrient?: Token<CSS.Property.BoxOrient>;
    /**
     * The CSS `box-pack` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-pack
     *
     * @deprecated
     */
    boxPack?: Token<CSS.Property.BoxPack>;
    /**
     * The CSS `box-shadow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow
     */
    boxShadow?: Token<CSS.Property.BoxShadow, "shadows">;
    /**
     * The CSS `width` and `height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/height
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/width
     */
    boxSize?: Token<CSS.Property.Height | CSS.Property.Width | number, "sizes">;
    /**
     * The CSS `box-sizing` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
     */
    boxSizing?: Token<CSS.Property.BoxSizing>;
    /**
     * The CSS `break-after` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/break-after
     */
    breakAfter?: Token<CSS.Property.BreakAfter>;
    /**
     * The CSS `break-before` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/break-before
     */
    breakBefore?: Token<CSS.Property.BreakBefore>;
    /**
     * The CSS `break-inside` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/break-inside
     */
    breakInside?: Token<CSS.Property.BreakInside>;
    /**
     * If `filter=auto`, sets the value of `--ui-brightness`.
     */
    brightness?: Token<StringLiteral>;
    /**
     * The CSS `caption-side` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side
     */
    captionSide?: Token<CSS.Property.CaptionSide>;
    /**
     * The CSS `caret-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/caret-color
     */
    caret?: Token<CSS.Property.CaretColor, "colors">;
    /**
     * The CSS `caret-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/caret-color
     */
    caretColor?: Token<CSS.Property.CaretColor, "colors">;
    /**
     * The CSS `clear` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/clear
     */
    clear?: Token<CSS.Property.Clear>;
    /**
     * The CSS `clip` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/clip
     */
    clip?: Token<CSS.Property.Clip>;
    /**
     * The CSS `clip-path` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path
     */
    clipPath?: Token<CSS.Property.ClipPath>;
    /**
     * The CSS `clip-rule` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/clip-rule
     */
    clipRule?: Token<CSS.Property.ClipRule>;
    /**
     * The CSS `color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/color
     */
    color?: Token<CSS.Property.Color, "colors">;
    /**
     * The CSS `color-interpolation` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/color-interpolation
     */
    colorInterpolation?: Token<CSS.Property.ColorInterpolation>;
    /**
     * The CSS `color-scheme` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     */
    colorMode?: Token<CSS.Property.ColorScheme>;
    /**
     * The CSS `column-count` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-count
     */
    columnCount?: Token<CSS.Property.ColumnCount>;
    /**
     * The CSS `column-fill` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-fill
     */
    columnFill?: Token<CSS.Property.ColumnFill>;
    /**
     * The CSS `column-gap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
     */
    columnGap?: Token<CSS.Property.ColumnGap | number, "spaces">;
    /**
     * The CSS `column-rule` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule
     */
    columnRule?: Token<CSS.Property.ColumnRule | number>;
    /**
     * The CSS `column-rule-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-color
     */
    columnRuleColor?: Token<CSS.Property.ColumnRuleColor, "colors">;
    /**
     * The CSS `column-rule-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-style
     */
    columnRuleStyle?: Token<CSS.Property.ColumnRuleStyle>;
    /**
     * The CSS `column-rule-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-width
     */
    columnRuleWidth?: Token<CSS.Property.ColumnRuleWidth | number>;
    /**
     * The CSS `columns` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/columns
     */
    columns?: Token<CSS.Property.Columns>;
    /**
     * The CSS `column-span` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-span
     */
    columnSpan?: Token<CSS.Property.ColumnSpan>;
    /**
     * The CSS `column-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-width
     */
    columnWidth?: Token<CSS.Property.ColumnWidth | number, "sizes">;
    /**
     * The CSS `contain` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/contain
     */
    contain?: Token<CSS.Property.Contain>;
    /**
     * The CSS `container` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/container
     */
    container?: Token<CSS.Property.Container>;
    /**
     * The CSS `container-name` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/container-name
     */
    containerName?: Token<CSS.Property.ContainerName>;
    /**
     * The CSS `container-type` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/container-type
     */
    containerType?: Token<CSS.Property.ContainerType>;
    /**
     * The CSS `contain-intrinsic-block-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-block-size
     */
    containIntrinsicBlockSize?: Token<CSS.Property.ContainIntrinsicBlockSize>;
    /**
     * The CSS `contain-intrinsic-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-height
     */
    containIntrinsicHeight?: Token<CSS.Property.ContainIntrinsicHeight>;
    /**
     * The CSS `contain-intrinsic-inline-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-inline-size
     */
    containIntrinsicInlineSize?: Token<CSS.Property.ContainIntrinsicInlineSize>;
    /**
     * The CSS `contain-intrinsic-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-size
     */
    containIntrinsicSize?: Token<CSS.Property.ContainIntrinsicSize>;
    /**
     * The CSS `contain-intrinsic-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-width
     */
    containIntrinsicWidth?: Token<CSS.Property.ContainIntrinsicWidth | number, "sizes">;
    /**
     * The CSS `content` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/content
     */
    content?: Token<CSS.Property.Content>;
    /**
     * The CSS `content-visibility` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility
     */
    contentVisibility?: Token<CSS.Property.ContentVisibility>;
    /**
     * If `filter=auto`, sets the value of `--ui-contrast`.
     */
    contrast?: Token<StringLiteral>;
    /**
     * The CSS `counter-increment` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/counter-increment
     */
    counterIncrement?: Token<CSS.Property.CounterIncrement>;
    /**
     * The CSS `counter-reset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/counter-reset
     */
    counterReset?: Token<CSS.Property.CounterReset>;
    /**
     * The CSS `counter-set` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/counter-set
     */
    counterSet?: Token<CSS.Property.CounterSet>;
    /**
     * The CSS `cursor` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
     */
    cursor?: Token<CSS.Property.Cursor>;
    /**
     * The CSS `direction` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/direction
     */
    direction?: Token<CSS.Property.Direction>;
    /**
     * The CSS `display` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/display
     */
    display?: Token<CSS.Property.Display>;
    /**
     * The CSS `dominant-baseline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/dominant-baseline
     */
    dominantBaseline?: Token<CSS.Property.DominantBaseline>;
    /**
     * If `filter=auto`, sets the value of `--ui-drop-shadow`.
     */
    dropShadow?: Token<StringLiteral, "shadows">;
    /**
     * The CSS `empty-cells` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/empty-cells
     */
    emptyCells?: Token<CSS.Property.EmptyCells>;
    /**
     * The CSS `fill` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/fill
     */
    fill?: Token<CSS.Property.Fill, "colors">;
    /**
     * The CSS `fill-opacity` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/fill-opacity
     */
    fillOpacity?: Token<CSS.Property.FillOpacity>;
    /**
     * The CSS `fill-rule` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/fill-rule
     */
    fillRule?: Token<CSS.Property.FillRule>;
    /**
     * The CSS `filter` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/filter
     */
    filter?: Token<"auto" | CSS.Property.Filter>;
    /**
     * The CSS `flex` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/flex
     */
    flex?: Token<CSS.Property.Flex>;
    /**
     * The CSS `flex-basis` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
     */
    flexBasis?: Token<CSS.Property.FlexBasis | number, "sizes">;
    /**
     * The CSS `flex-direction` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
     */
    flexDir?: Token<CSS.Property.FlexDirection>;
    /**
     * The CSS `flex-direction` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
     */
    flexDirection?: Token<CSS.Property.FlexDirection>;
    /**
     * The CSS `flex-flow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow
     */
    flexFlow?: Token<CSS.Property.FlexFlow>;
    /**
     * The CSS `flex-grow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow
     */
    flexGrow?: Token<CSS.Property.FlexGrow>;
    /**
     * The CSS `flex-shrink` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink
     */
    flexShrink?: Token<CSS.Property.FlexShrink>;
    /**
     * The CSS `flex-wrap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
     */
    flexWrap?: Token<CSS.Property.FlexWrap>;
    /**
     * The CSS `float` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/float
     */
    float?: Token<CSS.Property.Float>;
    /**
     * The CSS `flood-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/flood-color
     */
    floodColor?: Token<CSS.Property.FloodColor, "colors">;
    /**
     * The CSS `flood-opacity` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/flood-opacity
     */
    floodOpacity?: Token<CSS.Property.FloodOpacity>;
    /**
     * The CSS `font` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font
     */
    font?: Token<CSS.Property.Font>;
    /**
     * The CSS `font-family` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-family
     */
    fontFamily?: Token<CSS.Property.FontFamily, "fonts">;
    /**
     * The CSS `font-feature-settings` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings
     */
    fontFeatureSettings?: Token<CSS.Property.FontFeatureSettings>;
    /**
     * The CSS `font-kerning` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-kerning
     */
    fontKerning?: Token<CSS.Property.FontKerning>;
    /**
     * The CSS `font-language-override` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-language-override
     */
    fontLanguageOverride?: Token<CSS.Property.FontLanguageOverride>;
    /**
     * The CSS `font-optical-sizing` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-optical-sizing
     */
    fontOpticalSizing?: Token<CSS.Property.FontOpticalSizing>;
    /**
     * The CSS `font-palette` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-palette
     */
    fontPalette?: Token<CSS.Property.FontPalette>;
    /**
     * The CSS `font-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
     */
    fontSize?: Token<CSS.Property.FontSize | number, "fontSizes">;
    /**
     * The CSS `font-size-adjust` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust
     */
    fontSizeAdjust?: Token<CSS.Property.FontSizeAdjust>;
    /**
     * The CSS `font-smooth` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth
     */
    fontSmooth?: Token<CSS.Property.FontSmooth>;
    /**
     * The CSS `font-stretch` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-stretch
     */
    fontStretch?: Token<CSS.Property.FontStretch>;
    /**
     * The CSS `font-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-style
     */
    fontStyle?: Token<CSS.Property.FontStyle>;
    /**
     * The CSS `font-synthesis` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis
     */
    fontSynthesis?: Token<CSS.Property.FontSynthesis>;
    /**
     * The CSS `font-synthesis-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis-position
     */
    fontSynthesisPosition?: Token<CSS.Property.FontSynthesisPosition>;
    /**
     * The CSS `font-synthesis-small-caps` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis-small-caps
     */
    fontSynthesisSmallCaps?: Token<CSS.Property.FontSynthesisSmallCaps>;
    /**
     * The CSS `font-synthesis-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis-style
     */
    fontSynthesisStyle?: Token<CSS.Property.FontSynthesisStyle>;
    /**
     * The CSS `font-synthesis-weight` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis-weight
     */
    fontSynthesisWeight?: Token<CSS.Property.FontSynthesisWeight>;
    /**
     * The CSS `font-variant` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant
     */
    fontVariant?: Token<CSS.Property.FontVariant>;
    /**
     * The CSS `font-variant-alternates` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-alternates
     */
    fontVariantAlternates?: Token<CSS.Property.FontVariantAlternates>;
    /**
     * The CSS `font-variant-caps` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-caps
     */
    fontVariantCaps?: Token<CSS.Property.FontVariantCaps>;
    /**
     * The CSS `font-variant-east-asian` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-east-asian
     */
    fontVariantEastAsian?: Token<CSS.Property.FontVariantEastAsian>;
    /**
     * The CSS `font-variant-emoji` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-emoji
     */
    fontVariantEmoji?: Token<CSS.Property.FontVariantEmoji>;
    /**
     * The CSS `font-variant-ligatures` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatures
     */
    fontVariantLigatures?: Token<CSS.Property.FontVariantLigatures>;
    /**
     * The CSS `font-variant-numeric` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric
     */
    fontVariantNumeric?: Token<CSS.Property.FontVariantNumeric>;
    /**
     * The CSS `font-variant-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-position
     */
    fontVariantPosition?: Token<CSS.Property.FontVariantPosition>;
    /**
     * The CSS `font-variation-settings` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-variation-settings
     */
    fontVariationSettings?: Token<CSS.Property.FontVariationSettings>;
    /**
     * The CSS `font-weight` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
     */
    fontWeight?: Token<CSS.Property.FontWeight, "fontWeights">;
    /**
     * The CSS `forced-color-adjust` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/forced-color-adjust
     */
    forcedColorAdjust?: Token<CSS.Property.ForcedColorAdjust>;
    /**
     * The CSS `gap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/gap
     */
    g?: Token<CSS.Property.Gap | number, "spaces">;
    /**
     * The CSS `gap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/gap
     */
    gap?: Token<CSS.Property.Gap | number, "spaces">;
    /**
     * The CSS `column-gap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
     */
    gapX?: Token<CSS.Property.ColumnGap | number, "spaces">;
    /**
     * The CSS `row-gap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap
     */
    gapY?: Token<CSS.Property.RowGap | number, "spaces">;
    /**
     * The CSS `glyph-orientation-vertical` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/glyph-orientation-vertical
     */
    glyphOrientationVertical?: Token<CSS.Property.GlyphOrientationVertical>;
    /**
     * If `filter=auto`, sets the value of `--ui-grayscale`.
     */
    grayscale?: Token<StringLiteral>;
    /**
     * The CSS `grid` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid
     */
    grid?: Token<CSS.Property.Grid>;
    /**
     * The CSS `grid-area` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area
     */
    gridArea?: Token<CSS.Property.GridArea>;
    /**
     * The CSS `grid-auto-columns` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns
     */
    gridAutoColumns?: Token<CSS.Property.GridAutoColumns | number, "sizes">;
    /**
     * The CSS `grid-auto-flow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow
     */
    gridAutoFlow?: Token<CSS.Property.GridAutoFlow>;
    /**
     * The CSS `grid-auto-rows` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows
     */
    gridAutoRows?: Token<CSS.Property.GridAutoRows | number, "sizes">;
    /**
     * The CSS `grid-column` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column
     */
    gridColumn?: Token<CSS.Property.GridColumn>;
    /**
     * The CSS `grid-column-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end
     */
    gridColumnEnd?: Token<CSS.Property.GridColumnEnd>;
    /**
     * The CSS `grid-column-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start
     */
    gridColumnStart?: Token<CSS.Property.GridColumnStart>;
    /**
     * The CSS `grid-row` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row
     */
    gridRow?: Token<CSS.Property.GridRow>;
    /**
     * The CSS `grid-row-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end
     */
    gridRowEnd?: Token<CSS.Property.GridRowEnd>;
    /**
     * The CSS `grid-row-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start
     */
    gridRowStart?: Token<CSS.Property.GridRowStart>;
    /**
     * The CSS `grid-template` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template
     */
    gridTemplate?: Token<CSS.Property.GridTemplate>;
    /**
     * The CSS `grid-template-areas` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas
     */
    gridTemplateAreas?: Token<CSS.Property.GridTemplateAreas>;
    /**
     * The CSS `grid-template-columns` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns
     */
    gridTemplateColumns?: Token<CSS.Property.GridTemplateColumns | number, "sizes">;
    /**
     * The CSS `grid-template-rows` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows
     */
    gridTemplateRows?: Token<CSS.Property.GridTemplateRows | number, "sizes">;
    /**
     * The CSS `column-gap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
     */
    gx?: Token<CSS.Property.ColumnGap | number, "spaces">;
    /**
     * The CSS `row-gap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap
     */
    gy?: Token<CSS.Property.RowGap | number, "spaces">;
    /**
     * The CSS `height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/height
     */
    h?: Token<CSS.Property.Height | number, "sizes">;
    /**
     * The CSS `hanging-punctuation` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/hanging-punctuation
     */
    hangingPunctuation?: Token<CSS.Property.HangingPunctuation>;
    /**
     * The CSS `height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/height
     */
    height?: Token<CSS.Property.Height | number, "sizes">;
    /**
     * If `filter=auto`, sets the value of `--ui-hue-rotate`.
     */
    hueRotate?: Token<StringLiteral>;
    /**
     * The CSS `hyphenate-character` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/hyphenate-character
     */
    hyphenateCharacter?: Token<CSS.Property.HyphenateCharacter>;
    /**
     * The CSS `hyphenate-limit-chars` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/hyphenate-limit-chars
     */
    hyphenateLimitChars?: Token<CSS.Property.HyphenateLimitChars>;
    /**
     * The CSS `hyphens` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens
     */
    hyphens?: Token<CSS.Property.Hyphens>;
    /**
     * The CSS `image-orientation` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation
     */
    imageOrientation?: Token<CSS.Property.ImageOrientation>;
    /**
     * The CSS `image-rendering` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering
     */
    imageRendering?: Token<CSS.Property.ImageRendering>;
    /**
     * The CSS `image-resolution` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/image-resolution
     */
    imageResolution?: Token<CSS.Property.ImageResolution>;
    /**
     * The CSS `initial-letter` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/initial-letter
     */
    initialLetter?: Token<CSS.Property.InitialLetter>;
    /**
     * The CSS `inline-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size
     */
    inlineSize?: Token<CSS.Property.InlineSize | number, "sizes">;
    /**
     * The CSS `inset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset
     */
    inset?: Token<CSS.Property.Inset | number, "spaces">;
    /**
     * The CSS `inset-block` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block
     */
    insetBlock?: Token<CSS.Property.InsetBlock | number, "spaces">;
    /**
     * The CSS `inset-block-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block-end
     */
    insetBlockEnd?: Token<CSS.Property.InsetBlockEnd | number, "spaces">;
    /**
     * The CSS `inset-block-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block-start
     */
    insetBlockStart?: Token<CSS.Property.InsetBlockStart | number, "spaces">;
    /**
     * The CSS `inset-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-end
     */
    insetEnd?: Token<CSS.Property.InsetInlineEnd | number, "spaces">;
    /**
     * The CSS `inset-inline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline
     */
    insetInline?: Token<CSS.Property.InsetInline | number, "spaces">;
    /**
     * The CSS `inset-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-end
     */
    insetInlineEnd?: Token<CSS.Property.InsetInlineEnd | number, "spaces">;
    /**
     * The CSS `inset-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-start
     */
    insetInlineStart?: Token<CSS.Property.InsetInlineStart | number, "spaces">;
    /**
     * The CSS `inset-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-start
     */
    insetStart?: Token<CSS.Property.InsetInlineStart | number, "spaces">;
    /**
     * The CSS `left` and `right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/left
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/right
     */
    insetX?: Token<CSS.Property.Left | CSS.Property.Right | number, "spaces">;
    /**
     * The CSS `top` and `bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/bottom
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/top
     */
    insetY?: Token<CSS.Property.Bottom | CSS.Property.Top | number, "spaces">;
    /**
     * If `filter=auto`, sets the value of `--ui-invert`.
     */
    invert?: Token<StringLiteral>;
    /**
     * The CSS `isolation` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/isolation
     */
    isolation?: Token<CSS.Property.Isolation>;
    /**
     * If `true`, it clamps truncate a text after one line.
     */
    isTruncated?: Token<boolean>;
    /**
     * The CSS `justify-content` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
     */
    justifyContent?: Token<CSS.Property.JustifyContent>;
    /**
     * The CSS `justify-items` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items
     */
    justifyItems?: Token<CSS.Property.JustifyItems>;
    /**
     * The CSS `justify-self` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self
     */
    justifySelf?: Token<CSS.Property.JustifySelf>;
    /**
     * The CSS `line-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
     */
    leading?: Token<CSS.Property.LineHeight, "lineHeights">;
    /**
     * The CSS `left` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/left
     */
    left?: Token<CSS.Property.Left | number, "spaces">;
    /**
     * The CSS `letter-spacing` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing
     */
    letterSpacing?: Token<CSS.Property.LetterSpacing, "letterSpacings">;
    /**
     * The CSS `lighting-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/lighting-color
     */
    lightingColor?: Token<CSS.Property.LightingColor, "colors">;
    /**
     * The CSS `line-break` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/line-break
     */
    lineBreak?: Token<CSS.Property.LineBreak>;
    /**
     * Used to visually truncate a text after a number of lines.
     */
    lineClamp?: Token<number>;
    /**
     * The CSS `line-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
     */
    lineHeight?: Token<CSS.Property.LineHeight, "lineHeights">;
    /**
     * The CSS `line-height-step` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/line-height-step
     */
    lineHeightStep?: Token<CSS.Property.LineHeightStep>;
    /**
     * The CSS `list-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/list-style
     */
    listStyle?: Token<CSS.Property.ListStyle>;
    /**
     * The CSS `list-style-image` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-image
     */
    listStyleImage?: Token<CSS.Property.ListStyleImage, "gradients">;
    /**
     * The CSS `list-style-image` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-image
     */
    listStyleImg?: Token<CSS.Property.ListStyleImage, "gradients">;
    /**
     * The CSS `list-style-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position
     */
    listStylePos?: Token<CSS.Property.ListStylePosition>;
    /**
     * The CSS `list-style-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position
     */
    listStylePosition?: Token<CSS.Property.ListStylePosition>;
    /**
     * The CSS `list-style-type` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type
     */
    listStyleType?: Token<CSS.Property.ListStyleType>;
    /**
     * The CSS `margin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin
     */
    m?: Token<CSS.Property.Margin | number, "spaces">;
    /**
     * The CSS `margin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin
     */
    margin?: Token<CSS.Property.Margin | number, "spaces">;
    /**
     * The CSS `margin-block` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block
     */
    marginBlock?: Token<CSS.Property.MarginBlock | number, "spaces">;
    /**
     * The CSS `margin-block-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end
     */
    marginBlockEnd?: Token<CSS.Property.MarginBlockEnd | number, "spaces">;
    /**
     * The CSS `margin-block-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start
     */
    marginBlockStart?: Token<CSS.Property.MarginBlockStart | number, "spaces">;
    /**
     * The CSS `margin-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom
     */
    marginBottom?: Token<CSS.Property.MarginBottom | number, "spaces">;
    /**
     * The CSS `margin-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end
     */
    marginEnd?: Token<CSS.Property.MarginInlineEnd | number, "spaces">;
    /**
     * The CSS `margin-inline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline
     */
    marginInline?: Token<CSS.Property.MarginInline | number, "spaces">;
    /**
     * The CSS `margin-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end
     */
    marginInlineEnd?: Token<CSS.Property.MarginInlineEnd | number, "spaces">;
    /**
     * The CSS `margin-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start
     */
    marginInlineStart?: Token<CSS.Property.MarginInlineStart | number, "spaces">;
    /**
     * The CSS `margin-left` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left
     */
    marginLeft?: Token<CSS.Property.MarginLeft | number, "spaces">;
    /**
     * The CSS `margin-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right
     */
    marginRight?: Token<CSS.Property.MarginRight | number, "spaces">;
    /**
     * The CSS `margin-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start
     */
    marginStart?: Token<CSS.Property.MarginInlineStart | number, "spaces">;
    /**
     * The CSS `margin-top` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top
     */
    marginTop?: Token<CSS.Property.MarginTop | number, "spaces">;
    /**
     * The CSS `margin-trim` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-trim
     */
    marginTrim?: Token<CSS.Property.MarginTrim>;
    /**
     * The CSS `margin-inline-start` and `margin-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start
     */
    marginX?: Token<CSS.Property.MarginInlineEnd | CSS.Property.MarginInlineStart | number, "spaces">;
    /**
     * The CSS `margin-top` and `margin-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top
     */
    marginY?: Token<CSS.Property.MarginBottom | CSS.Property.MarginTop | number, "spaces">;
    /**
     * The CSS `marker` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/marker
     */
    marker?: Token<CSS.Property.Marker>;
    /**
     * The CSS `marker-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/marker-end
     */
    markerEnd?: Token<CSS.Property.MarkerEnd>;
    /**
     * The CSS `marker-mid` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/marker-mid
     */
    markerMid?: Token<CSS.Property.MarkerMid>;
    /**
     * The CSS `marker-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/marker-start
     */
    markerStart?: Token<CSS.Property.MarkerStart>;
    /**
     * The CSS `mask` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask
     */
    mask?: Token<CSS.Property.Mask>;
    /**
     * The CSS `mask-border` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border
     */
    maskBorder?: Token<CSS.Property.MaskBorder>;
    /**
     * The CSS `mask-border-mode` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-mode
     */
    maskBorderMode?: Token<CSS.Property.MaskBorderMode>;
    /**
     * The CSS `mask-border-outset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-outset
     */
    maskBorderOutset?: Token<CSS.Property.MaskBorderOutset>;
    /**
     * The CSS `mask-border-repeat` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-repeat
     */
    maskBorderRepeat?: Token<CSS.Property.MaskBorderRepeat>;
    /**
     * The CSS `mask-border-slice` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-slice
     */
    maskBorderSlice?: Token<CSS.Property.MaskBorderSlice>;
    /**
     * The CSS `mask-border-source` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-source
     */
    maskBorderSource?: Token<CSS.Property.MaskBorderSource>;
    /**
     * The CSS `mask-border-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-width
     */
    maskBorderWidth?: Token<CSS.Property.MaskBorderWidth | number>;
    /**
     * The CSS `mask-clip` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-clip
     */
    maskClip?: Token<CSS.Property.MaskClip>;
    /**
     * The CSS `mask-composite` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-composite
     */
    maskComposite?: Token<CSS.Property.MaskComposite>;
    /**
     * The CSS `mask-image` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image
     */
    maskImage?: Token<CSS.Property.MaskImage, "gradients">;
    /**
     * The CSS `mask-mode` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-mode
     */
    maskMode?: Token<CSS.Property.MaskMode>;
    /**
     * The CSS `mask-origin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-origin
     */
    maskOrigin?: Token<CSS.Property.MaskOrigin>;
    /**
     * The CSS `mask-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-position
     */
    maskPosition?: Token<CSS.Property.MaskPosition>;
    /**
     * The CSS `mask-repeat` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-repeat
     */
    maskRepeat?: Token<CSS.Property.MaskRepeat>;
    /**
     * The CSS `mask-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-size
     */
    maskSize?: Token<CSS.Property.MaskSize>;
    /**
     * The CSS `mask-type` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mask-type
     */
    maskType?: Token<CSS.Property.MaskType>;
    /**
     * The CSS `masonry-auto-flow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/masonry-auto-flow
     */
    masonryAutoFlow?: Token<CSS.Property.MasonryAutoFlow>;
    /**
     * The CSS `math-depth` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/math-depth
     */
    mathDepth?: Token<CSS.Property.MathDepth>;
    /**
     * The CSS `math-shift` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/math-shift
     */
    mathShift?: Token<CSS.Property.MathShift>;
    /**
     * The CSS `math-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/math-style
     */
    mathStyle?: Token<CSS.Property.MathStyle>;
    /**
     * The CSS `max-block-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/max-block-size
     */
    maxBlockSize?: Token<CSS.Property.MaxBlockSize | number, "sizes">;
    /**
     * The CSS `max-width` and `max-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/max-height
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/max-width
     */
    maxBoxSize?: Token<CSS.Property.MaxHeight | CSS.Property.MaxWidth | number, "sizes">;
    /**
     * The CSS `max-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/max-height
     */
    maxH?: Token<CSS.Property.MaxHeight | number, "sizes">;
    /**
     * The CSS `max-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/max-height
     */
    maxHeight?: Token<CSS.Property.MaxHeight | number, "sizes">;
    /**
     * The CSS `max-inline-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/max-inline-size
     */
    maxInlineSize?: Token<CSS.Property.MaxInlineSize | number, "sizes">;
    /**
     * The CSS `max-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/max-width
     */
    maxW?: Token<CSS.Property.MaxWidth | number, "sizes">;
    /**
     * The CSS `max-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/max-width
     */
    maxWidth?: Token<CSS.Property.MaxWidth | number, "sizes">;
    /**
     * The CSS `margin-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom
     */
    mb?: Token<CSS.Property.MarginBottom | number, "spaces">;
    /**
     * The CSS `margin-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end
     */
    me?: Token<CSS.Property.MarginInlineEnd | number, "spaces">;
    /**
     * The CSS `min-block-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/min-block-size
     */
    minBlockSize?: Token<CSS.Property.MinBlockSize | number, "sizes">;
    /**
     * The CSS `min-width` and `min-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/min-height
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/min-width
     */
    minBoxSize?: Token<CSS.Property.MinHeight | CSS.Property.MinWidth | number, "sizes">;
    /**
     * The CSS `min-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/min-height
     */
    minH?: Token<CSS.Property.MinHeight | number, "sizes">;
    /**
     * The CSS `min-height` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/min-height
     */
    minHeight?: Token<CSS.Property.MinHeight | number, "sizes">;
    /**
     * The CSS `min-inline-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/min-inline-size
     */
    minInlineSize?: Token<CSS.Property.MinInlineSize | number, "sizes">;
    /**
     * The CSS `min-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/min-width
     */
    minW?: Token<CSS.Property.MinWidth | number, "sizes">;
    /**
     * The CSS `min-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/min-width
     */
    minWidth?: Token<CSS.Property.MinWidth | number, "sizes">;
    /**
     * The CSS `mix-blend-mode` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode
     */
    mixBlendMode?: Token<CSS.Property.MixBlendMode>;
    /**
     * The CSS `margin-left` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left
     */
    ml?: Token<CSS.Property.MarginLeft | number, "spaces">;
    /**
     * The CSS `margin-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right
     */
    mr?: Token<CSS.Property.MarginRight | number, "spaces">;
    /**
     * The CSS `margin-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start
     */
    ms?: Token<CSS.Property.MarginInlineStart | number, "spaces">;
    /**
     * The CSS `margin-top` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top
     */
    mt?: Token<CSS.Property.MarginTop | number, "spaces">;
    /**
     * The CSS `margin-inline-start` and `margin-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start
     */
    mx?: Token<CSS.Property.MarginInlineEnd | CSS.Property.MarginInlineStart | number, "spaces">;
    /**
     * The CSS `margin-top` and `margin-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top
     */
    my?: Token<CSS.Property.MarginBottom | CSS.Property.MarginTop | number, "spaces">;
    /**
     * The CSS `object-fit` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit
     */
    objectFit?: Token<CSS.Property.ObjectFit>;
    /**
     * The CSS `object-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/object-position
     */
    objectPosition?: Token<CSS.Property.ObjectPosition>;
    /**
     * The CSS `offset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/offset
     */
    offset?: Token<CSS.Property.Offset>;
    /**
     * The CSS `offset-anchor` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/offset-anchor
     */
    offsetAnchor?: Token<CSS.Property.OffsetAnchor>;
    /**
     * The CSS `offset-distance` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/offset-distance
     */
    offsetDistance?: Token<CSS.Property.OffsetDistance>;
    /**
     * The CSS `offset-path` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path
     */
    offsetPath?: Token<CSS.Property.OffsetPath>;
    /**
     * The CSS `offset-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/offset-position
     */
    offsetPosition?: Token<CSS.Property.OffsetPosition>;
    /**
     * The CSS `offset-rotate` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/offset-rotate
     */
    offsetRotate?: Token<CSS.Property.OffsetRotate>;
    /**
     * The CSS `opacity` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/opacity
     */
    opacity?: Token<CSS.Property.Opacity>;
    /**
     * The CSS `order` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/order
     */
    order?: Token<CSS.Property.Order>;
    /**
     * The CSS `orphans` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/orphans
     */
    orphans?: Token<CSS.Property.Orphans>;
    /**
     * The CSS `outline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/outline
     */
    outline?: Token<CSS.Property.Outline>;
    /**
     * The CSS `outline-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/outline-color
     */
    outlineColor?: Token<CSS.Property.OutlineColor, "colors">;
    /**
     * The CSS `outline-offset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/outline-offset
     */
    outlineOffset?: Token<CSS.Property.OutlineOffset>;
    /**
     * The CSS `outline-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/outline-style
     */
    outlineStyle?: Token<CSS.Property.OutlineStyle>;
    /**
     * The CSS `outline-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/outline-width
     */
    outlineWidth?: Token<CSS.Property.OutlineWidth | number>;
    /**
     * The CSS `overflow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overflow
     */
    overflow?: Token<CSS.Property.Overflow>;
    /**
     * The CSS `overflow-anchor` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor
     */
    overflowAnchor?: Token<CSS.Property.OverflowAnchor>;
    /**
     * The CSS `overflow-block` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-block
     */
    overflowBlock?: Token<CSS.Property.OverflowBlock>;
    /**
     * The CSS `overflow-clip-margin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-margin
     */
    overflowClipMargin?: Token<CSS.Property.OverflowClipMargin>;
    /**
     * The CSS `overflow-inline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-inline
     */
    overflowInline?: Token<CSS.Property.OverflowInline>;
    /**
     * The CSS `overflow-wrap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap
     */
    overflowWrap?: Token<CSS.Property.OverflowWrap>;
    /**
     * The CSS `overflow-x` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x
     */
    overflowX?: Token<CSS.Property.OverflowX>;
    /**
     * The CSS `overflow-y` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y
     */
    overflowY?: Token<CSS.Property.OverflowY>;
    /**
     * The CSS `overlay` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overlay
     */
    overlay?: Token<CSS.Property.Overlay>;
    /**
     * The CSS `overscroll-behavior` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior
     */
    overscroll?: Token<CSS.Property.OverscrollBehavior>;
    /**
     * The CSS `overscroll-behavior` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior
     */
    overscrollBehavior?: Token<CSS.Property.OverscrollBehavior>;
    /**
     * The CSS `overscroll-behavior-block` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-block
     */
    overscrollBehaviorBlock?: Token<CSS.Property.OverscrollBehaviorBlock>;
    /**
     * The CSS `overscroll-behavior-inline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-inline
     */
    overscrollBehaviorInline?: Token<CSS.Property.OverscrollBehaviorInline>;
    /**
     * The CSS `overscroll-behavior-x` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-x
     */
    overscrollBehaviorX?: Token<CSS.Property.OverscrollBehaviorX>;
    /**
     * The CSS `overscroll-behavior-y` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-y
     */
    overscrollBehaviorY?: Token<CSS.Property.OverscrollBehaviorY>;
    /**
     * The CSS `overscroll-behavior-x` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-x
     */
    overscrollX?: Token<CSS.Property.OverscrollBehaviorX>;
    /**
     * The CSS `overscroll-behavior-y` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-y
     */
    overscrollY?: Token<CSS.Property.OverscrollBehaviorY>;
    /**
     * The CSS `padding` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding
     */
    p?: Token<CSS.Property.Padding | number, "spaces">;
    /**
     * The CSS `padding` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding
     */
    padding?: Token<CSS.Property.Padding | number, "spaces">;
    /**
     * The CSS `padding-block` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block
     */
    paddingBlock?: Token<CSS.Property.PaddingBlock | number, "spaces">;
    /**
     * The CSS `padding-block-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end
     */
    paddingBlockEnd?: Token<CSS.Property.PaddingBlockEnd | number, "spaces">;
    /**
     * The CSS `padding-block-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start
     */
    paddingBlockStart?: Token<CSS.Property.PaddingBlockStart | number, "spaces">;
    /**
     * The CSS `padding-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom
     */
    paddingBottom?: Token<CSS.Property.PaddingBottom | number, "spaces">;
    /**
     * The CSS `padding-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end
     */
    paddingEnd?: Token<CSS.Property.PaddingInlineEnd | number, "spaces">;
    /**
     * The CSS `padding-inline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline
     */
    paddingInline?: Token<CSS.Property.PaddingInline | number, "spaces">;
    /**
     * The CSS `padding-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end
     */
    paddingInlineEnd?: Token<CSS.Property.PaddingInlineEnd | number, "spaces">;
    /**
     * The CSS `padding-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start
     */
    paddingInlineStart?: Token<CSS.Property.PaddingInlineStart | number, "spaces">;
    /**
     * The CSS `padding-left` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left
     */
    paddingLeft?: Token<CSS.Property.PaddingLeft | number, "spaces">;
    /**
     * The CSS `padding-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right
     */
    paddingRight?: Token<CSS.Property.PaddingRight | number, "spaces">;
    /**
     * The CSS `padding-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start
     */
    paddingStart?: Token<CSS.Property.PaddingInlineStart | number, "spaces">;
    /**
     * The CSS `padding-top` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top
     */
    paddingTop?: Token<CSS.Property.PaddingTop | number, "spaces">;
    /**
     * The CSS `padding-inline-start` and `padding-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start
     */
    paddingX?: Token<CSS.Property.PaddingInlineEnd | CSS.Property.PaddingInlineStart | number, "spaces">;
    /**
     * The CSS `padding-top` and `padding-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top
     */
    paddingY?: Token<CSS.Property.PaddingBottom | CSS.Property.PaddingTop | number, "spaces">;
    /**
     * The CSS `page` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/page
     */
    page?: Token<CSS.Property.Page>;
    /**
     * The CSS `page-break-after` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-after
     */
    pageBreakAfter?: Token<CSS.Property.PageBreakAfter>;
    /**
     * The CSS `page-break-before` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-before
     */
    pageBreakBefore?: Token<CSS.Property.PageBreakBefore>;
    /**
     * The CSS `page-break-inside` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-inside
     */
    pageBreakInside?: Token<CSS.Property.PageBreakInside>;
    /**
     * The CSS `paint-order` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/paint-order
     */
    paintOrder?: Token<CSS.Property.PaintOrder>;
    /**
     * The CSS `padding-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom
     */
    pb?: Token<CSS.Property.PaddingBottom | number, "spaces">;
    /**
     * The CSS `padding-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end
     */
    pe?: Token<CSS.Property.PaddingInlineEnd | number, "spaces">;
    /**
     * The CSS `perspective` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/perspective
     */
    perspective?: Token<CSS.Property.Perspective>;
    /**
     * The CSS `perspective-origin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/perspective-origin
     */
    perspectiveOrigin?: Token<CSS.Property.PerspectiveOrigin>;
    /**
     * The CSS `padding-left` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left
     */
    pl?: Token<CSS.Property.PaddingLeft | number, "spaces">;
    /**
     * The CSS `place-content` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/place-content
     */
    placeContent?: Token<CSS.Property.PlaceContent>;
    /**
     * The CSS `place-items` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/place-items
     */
    placeItems?: Token<CSS.Property.PlaceItems>;
    /**
     * The CSS `place-self` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/place-self
     */
    placeSelf?: Token<CSS.Property.PlaceSelf>;
    /**
     * The CSS `pointer-events` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events
     */
    pointerEvents?: Token<CSS.Property.PointerEvents>;
    /**
     * The CSS `position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/position
     */
    pos?: Token<CSS.Property.Position>;
    /**
     * The CSS `position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/position
     */
    position?: Token<CSS.Property.Position>;
    /**
     * The CSS `padding-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right
     */
    pr?: Token<CSS.Property.PaddingRight | number, "spaces">;
    /**
     * The CSS `print-color-adjust` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/print-color-adjust
     */
    printColorAdjust?: Token<CSS.Property.PrintColorAdjust>;
    /**
     * The CSS `padding-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start
     */
    ps?: Token<CSS.Property.PaddingInlineStart | number, "spaces">;
    /**
     * The CSS `padding-top` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top
     */
    pt?: Token<CSS.Property.PaddingTop | number, "spaces">;
    /**
     * The CSS `padding-inline-start` and `padding-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start
     */
    px?: Token<CSS.Property.PaddingInlineEnd | CSS.Property.PaddingInlineStart | number, "spaces">;
    /**
     * The CSS `padding-top` and `padding-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top
     */
    py?: Token<CSS.Property.PaddingBottom | CSS.Property.PaddingTop | number, "spaces">;
    /**
     * The CSS `quotes` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/quotes
     */
    quotes?: Token<CSS.Property.Quotes>;
    /**
     * The CSS `resize` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/resize
     */
    resize?: Token<CSS.Property.Resize>;
    /**
     * The CSS `right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/right
     */
    right?: Token<CSS.Property.Right | number, "spaces">;
    /**
     * If `transform=auto` or `transform=auto-3d`, sets the value of `--ui-rotate`.
     */
    rotate?: Token<StringLiteral>;
    /**
     * The CSS `border-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius
     */
    rounded?: Token<CSS.Property.BorderRadius | number, "radii">;
    /**
     * The CSS `border-bottom-left-radius` and `border-bottom-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius
     */
    roundedBottom?: Token<CSS.Property.BorderBottomLeftRadius | CSS.Property.BorderBottomRightRadius | number, "radii">;
    /**
     * The CSS `border-end-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius
     */
    roundedBottomEnd?: Token<CSS.Property.BorderEndEndRadius | number, "radii">;
    /**
     * The CSS `border-bottom-left-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius
     */
    roundedBottomLeft?: Token<CSS.Property.BorderBottomLeftRadius | number, "radii">;
    /**
     * The CSS `border-bottom-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius
     */
    roundedBottomRight?: Token<CSS.Property.BorderBottomRightRadius | number, "radii">;
    /**
     * The CSS `border-end-start-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radius
     */
    roundedBottomStart?: Token<CSS.Property.BorderEndStartRadius | number, "radii">;
    /**
     * The CSS `border-end-start-radius` and `border-end-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radius
     */
    roundedEnd?: Token<CSS.Property.BorderEndEndRadius | CSS.Property.BorderEndStartRadius | number, "radii">;
    /**
     * The CSS `border-top-left-radius` and `border-bottom-left-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius
     */
    roundedLeft?: Token<CSS.Property.BorderBottomLeftRadius | CSS.Property.BorderTopLeftRadius | number, "radii">;
    /**
     * The CSS `border-top-right-radius` and `border-bottom-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius
     */
    roundedRight?: Token<CSS.Property.BorderBottomRightRadius | CSS.Property.BorderTopRightRadius | number, "radii">;
    /**
     * The CSS `border-start-start-radius` and `border-start-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radius
     */
    roundedStart?: Token<CSS.Property.BorderStartEndRadius | CSS.Property.BorderStartStartRadius | number, "radii">;
    /**
     * The CSS `border-top-left-radius` and `border-top-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius
     */
    roundedTop?: Token<CSS.Property.BorderTopLeftRadius | CSS.Property.BorderTopRightRadius | number, "radii">;
    /**
     * The CSS `border-start-end-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius
     */
    roundedTopEnd?: Token<CSS.Property.BorderStartEndRadius | number, "radii">;
    /**
     * The CSS `border-top-left-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius
     */
    roundedTopLeft?: Token<CSS.Property.BorderTopLeftRadius | number, "radii">;
    /**
     * The CSS `border-top-right-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius
     */
    roundedTopRight?: Token<CSS.Property.BorderTopRightRadius | number, "radii">;
    /**
     * The CSS `border-start-start-radius` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radius
     */
    roundedTopStart?: Token<CSS.Property.BorderStartStartRadius | number, "radii">;
    /**
     * The CSS `row-gap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap
     */
    rowGap?: Token<CSS.Property.RowGap | number, "spaces">;
    /**
     * The CSS `ruby-align` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-align
     */
    rubyAlign?: Token<CSS.Property.RubyAlign>;
    /**
     * The CSS `ruby-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position
     */
    rubyPosition?: Token<CSS.Property.RubyPosition>;
    /**
     * If `filter=auto`, sets the value of `--ui-saturate`.
     */
    saturate?: Token<StringLiteral>;
    /**
     * If `transform=auto` or `transform=auto-3d`, sets the value of `--ui-scale-x` and `--ui-scale-y`.
     */
    scale?: Token<StringLiteral>;
    /**
     * If `transform=auto` or `transform=auto-3d`, sets the value of `--ui-scale-x`.
     */
    scaleX?: Token<StringLiteral>;
    /**
     * If `transform=auto` or `transform=auto-3d`, sets the value of `--ui-scale-y`.
     */
    scaleY?: Token<StringLiteral>;
    /**
     * The CSS `scrollbar-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color
     */
    scrollbarColor?: Token<CSS.Property.ScrollbarColor, "colors">;
    /**
     * The CSS `scrollbar-gutter` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter
     */
    scrollbarGutter?: Token<CSS.Property.ScrollbarGutter>;
    /**
     * The CSS `scrollbar-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width
     */
    scrollbarWidth?: Token<CSS.Property.ScrollbarWidth | number>;
    /**
     * The CSS `scroll-behavior` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior
     */
    scrollBehavior?: Token<CSS.Property.ScrollBehavior>;
    /**
     * The CSS `scroll-margin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin
     */
    scrollMargin?: Token<CSS.Property.ScrollMargin | number, "spaces">;
    /**
     * The CSS `scroll-margin-block` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block
     */
    scrollMarginBlock?: Token<CSS.Property.ScrollMarginBlock>;
    /**
     * The CSS `scroll-margin-block-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block-end
     */
    scrollMarginBlockEnd?: Token<CSS.Property.ScrollMarginBlockEnd>;
    /**
     * The CSS `scroll-margin-block-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block-start
     */
    scrollMarginBlockStart?: Token<CSS.Property.ScrollMarginBlockStart>;
    /**
     * The CSS `scroll-margin-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-bottom
     */
    scrollMarginBottom?: Token<CSS.Property.ScrollMarginBottom | number, "spaces">;
    /**
     * The CSS `scroll-margin-inline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline
     */
    scrollMarginInline?: Token<CSS.Property.ScrollMarginInline>;
    /**
     * The CSS `scroll-margin-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline-end
     */
    scrollMarginInlineEnd?: Token<CSS.Property.ScrollMarginInlineEnd>;
    /**
     * The CSS `scroll-margin-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline-start
     */
    scrollMarginInlineStart?: Token<CSS.Property.ScrollMarginInlineStart>;
    /**
     * The CSS `scroll-margin-left` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-left
     */
    scrollMarginLeft?: Token<CSS.Property.ScrollMarginLeft | number, "spaces">;
    /**
     * The CSS `scroll-margin-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-right
     */
    scrollMarginRight?: Token<CSS.Property.ScrollMarginRight | number, "spaces">;
    /**
     * The CSS `scroll-margin-top` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-top
     */
    scrollMarginTop?: Token<CSS.Property.ScrollMarginTop | number, "spaces">;
    /**
     * The CSS `scroll-margin-left` and `scroll-margin-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-left
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-right
     */
    scrollMarginX?: Token<CSS.Property.ScrollMarginLeft | CSS.Property.ScrollMarginRight | number, "spaces">;
    /**
     * The CSS `scroll-margin-top` and `scroll-margin-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-bottom
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-top
     */
    scrollMarginY?: Token<CSS.Property.ScrollMarginBottom | CSS.Property.ScrollMarginTop | number, "spaces">;
    /**
     * The CSS `scroll-padding` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding
     */
    scrollPadding?: Token<CSS.Property.ScrollPadding | number, "spaces">;
    /**
     * The CSS `scroll-padding-block` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block
     */
    scrollPaddingBlock?: Token<CSS.Property.ScrollPaddingBlock>;
    /**
     * The CSS `scroll-padding-block-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block-end
     */
    scrollPaddingBlockEnd?: Token<CSS.Property.ScrollPaddingBlockEnd>;
    /**
     * The CSS `scroll-padding-block-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block-start
     */
    scrollPaddingBlockStart?: Token<CSS.Property.ScrollPaddingBlockStart>;
    /**
     * The CSS `scroll-padding-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-bottom
     */
    scrollPaddingBottom?: Token<CSS.Property.ScrollPaddingBottom | number, "spaces">;
    /**
     * The CSS `scroll-padding-inline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline
     */
    scrollPaddingInline?: Token<CSS.Property.ScrollPaddingInline>;
    /**
     * The CSS `scroll-padding-inline-end` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline-end
     */
    scrollPaddingInlineEnd?: Token<CSS.Property.ScrollPaddingInlineEnd>;
    /**
     * The CSS `scroll-padding-inline-start` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline-start
     */
    scrollPaddingInlineStart?: Token<CSS.Property.ScrollPaddingInlineStart>;
    /**
     * The CSS `scroll-padding-left` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-left
     */
    scrollPaddingLeft?: Token<CSS.Property.ScrollPaddingLeft | number, "spaces">;
    /**
     * The CSS `scroll-padding-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-right
     */
    scrollPaddingRight?: Token<CSS.Property.ScrollPaddingRight | number, "spaces">;
    /**
     * The CSS `scroll-padding-top` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-top
     */
    scrollPaddingTop?: Token<CSS.Property.ScrollPaddingTop | number, "spaces">;
    /**
     * The CSS `scroll-padding-left` and `scroll-padding-right` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-left
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-right
     */
    scrollPaddingX?: Token<CSS.Property.ScrollPaddingLeft | CSS.Property.ScrollPaddingRight | number, "spaces">;
    /**
     * The CSS `scroll-padding-top` and `scroll-padding-bottom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-bottom
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-top
     */
    scrollPaddingY?: Token<CSS.Property.ScrollPaddingBottom | CSS.Property.ScrollPaddingTop | number, "spaces">;
    /**
     * The CSS `scroll-snap-align` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-align
     */
    scrollSnapAlign?: Token<CSS.Property.ScrollSnapAlign>;
    /**
     * The CSS `scroll-snap-stop` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-stop
     */
    scrollSnapStop?: Token<CSS.Property.ScrollSnapStop>;
    /**
     * The CSS `scroll-snap-type` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type
     */
    scrollSnapType?: Token<CSS.Property.ScrollSnapType>;
    /**
     * The CSS `scroll-timeline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-timeline
     */
    scrollTimeline?: Token<CSS.Property.ScrollTimeline>;
    /**
     * The CSS `scroll-timeline-axis` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-timeline-axis
     */
    scrollTimelineAxis?: Token<CSS.Property.ScrollTimelineAxis>;
    /**
     * The CSS `scroll-timeline-name` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-timeline-name
     */
    scrollTimelineName?: Token<CSS.Property.ScrollTimelineName>;
    /**
     * If `filter=auto`, sets the value of `--ui-sepia`.
     */
    sepia?: Token<StringLiteral>;
    /**
     * The CSS `box-shadow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow
     */
    shadow?: Token<CSS.Property.BoxShadow, "shadows">;
    /**
     * The CSS `shape-image-threshold` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/shape-image-threshold
     */
    shapeImageThreshold?: Token<CSS.Property.ShapeImageThreshold>;
    /**
     * The CSS `shape-margin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/shape-margin
     */
    shapeMargin?: Token<CSS.Property.ShapeMargin>;
    /**
     * The CSS `shape-outside` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside
     */
    shapeOutside?: Token<CSS.Property.ShapeOutside>;
    /**
     * The CSS `shape-rendering` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/shape-rendering
     */
    shapeRendering?: Token<CSS.Property.ShapeRendering>;
    /**
     * If `transform=auto` or `transform=auto-3d`, sets the value of `--ui-skew-x`.
     */
    skewX?: Token<StringLiteral>;
    /**
     * If `transform=auto` or `transform=auto-3d`, sets the value of `--ui-skew-y`.
     */
    skewY?: Token<StringLiteral>;
    /**
     * The CSS `stop-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stop-color
     */
    stopColor?: Token<CSS.Property.StopColor>;
    /**
     * The CSS `stop-opacity` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stop-opacity
     */
    stopOpacity?: Token<CSS.Property.StopOpacity>;
    /**
     * The CSS `stroke` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stroke
     */
    stroke?: Token<CSS.Property.Stroke, "colors">;
    /**
     * The CSS `stroke-dasharray` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stroke-dasharray
     */
    strokeDasharray?: Token<CSS.Property.StrokeDasharray>;
    /**
     * The CSS `stroke-dashoffset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stroke-dashoffset
     */
    strokeDashoffset?: Token<CSS.Property.StrokeDashoffset | number>;
    /**
     * The CSS `stroke-linecap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stroke-linecap
     */
    strokeLinecap?: Token<CSS.Property.StrokeLinecap>;
    /**
     * The CSS `stroke-linejoin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stroke-linejoin
     */
    strokeLinejoin?: Token<CSS.Property.StrokeLinejoin>;
    /**
     * The CSS `stroke-miterlimit` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stroke-miterlimit
     */
    strokeMiterlimit?: Token<CSS.Property.StrokeMiterlimit>;
    /**
     * The CSS `stroke-opacity` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stroke-opacity
     */
    strokeOpacity?: Token<CSS.Property.StrokeOpacity>;
    /**
     * The CSS `stroke-width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/stroke-width
     */
    strokeWidth?: Token<CSS.Property.StrokeWidth | number>;
    /**
     * The CSS `table-layout` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout
     */
    tableLayout?: Token<CSS.Property.TableLayout>;
    /**
     * The CSS `tab-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size
     */
    tabSize?: Token<CSS.Property.TabSize>;
    /**
     * The CSS `font-size` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
     */
    text?: Token<CSS.Property.FontSize | number, "fontSizes">;
    /**
     * The CSS `text-align` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-align
     */
    textAlign?: Token<CSS.Property.TextAlign>;
    /**
     * The CSS `text-align-last` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-align-last
     */
    textAlignLast?: Token<CSS.Property.TextAlignLast>;
    /**
     * The CSS `text-anchor` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-anchor
     */
    textAnchor?: Token<CSS.Property.TextAnchor>;
    /**
     * The CSS `color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/color
     */
    textColor?: Token<CSS.Property.Color, "colors">;
    /**
     * The CSS `text-combine-upright` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-combine-upright
     */
    textCombineUpright?: Token<CSS.Property.TextCombineUpright>;
    /**
     * The CSS `text-decoration` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration
     */
    textDecor?: Token<CSS.Property.TextDecoration>;
    /**
     * The CSS `text-decoration` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration
     */
    textDecoration?: Token<CSS.Property.TextDecoration>;
    /**
     * The CSS `text-decoration-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color
     */
    textDecorationColor?: Token<CSS.Property.TextDecorationColor, "colors">;
    /**
     * The CSS `text-decoration-line` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line
     */
    textDecorationLine?: Token<CSS.Property.TextDecorationLine>;
    /**
     * The CSS `text-decoration-skip` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip
     */
    textDecorationSkip?: Token<CSS.Property.TextDecorationSkip>;
    /**
     * The CSS `text-decoration-skip-ink` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip-ink
     */
    textDecorationSkipInk?: Token<CSS.Property.TextDecorationSkipInk>;
    /**
     * The CSS `text-decoration-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style
     */
    textDecorationStyle?: Token<CSS.Property.TextDecorationStyle>;
    /**
     * The CSS `text-decoration-thickness` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness
     */
    textDecorationThickness?: Token<CSS.Property.TextDecorationThickness>;
    /**
     * The CSS `text-emphasis` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis
     */
    textEmphasis?: Token<CSS.Property.TextEmphasis>;
    /**
     * The CSS `text-emphasis-color` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-color
     */
    textEmphasisColor?: Token<CSS.Property.TextEmphasisColor, "colors">;
    /**
     * The CSS `text-emphasis-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-position
     */
    textEmphasisPosition?: Token<CSS.Property.TextEmphasisPosition>;
    /**
     * The CSS `text-emphasis-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-style
     */
    textEmphasisStyle?: Token<CSS.Property.TextEmphasisStyle>;
    /**
     * The CSS `text-indent` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent
     */
    textIndent?: Token<CSS.Property.TextIndent>;
    /**
     * The CSS `text-justify` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-justify
     */
    textJustify?: Token<CSS.Property.TextJustify>;
    /**
     * The CSS `text-orientation` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation
     */
    textOrientation?: Token<CSS.Property.TextOrientation>;
    /**
     * The CSS `text-overflow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow
     */
    textOverflow?: Token<CSS.Property.TextOverflow>;
    /**
     * The CSS `text-rendering` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering
     */
    textRendering?: Token<CSS.Property.TextRendering>;
    /**
     * The CSS `text-shadow` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow
     */
    textShadow?: Token<CSS.Property.TextShadow, "shadows">;
    /**
     * The CSS `text-size-adjust` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust
     */
    textSizeAdjust?: Token<CSS.Property.TextSizeAdjust>;
    /**
     * The CSS `text-transform` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform
     */
    textTransform?: Token<CSS.Property.TextTransform>;
    /**
     * The CSS `text-underline-offset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-underline-offset
     */
    textUnderlineOffset?: Token<CSS.Property.TextUnderlineOffset>;
    /**
     * The CSS `text-underline-position` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-underline-position
     */
    textUnderlinePosition?: Token<CSS.Property.TextUnderlinePosition>;
    /**
     * The CSS `text-wrap` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap
     */
    textWrap?: Token<CSS.Property.TextWrap>;
    /**
     * The CSS `timeline-scope` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/timeline-scope
     */
    timelineScope?: Token<CSS.Property.TimelineScope>;
    /**
     * The CSS `top` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/top
     */
    top?: Token<CSS.Property.Top | number, "spaces">;
    /**
     * The CSS `touch-action` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action
     */
    touchAction?: Token<CSS.Property.TouchAction>;
    /**
     * The CSS `letter-spacing` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing
     */
    tracking?: Token<CSS.Property.LetterSpacing, "letterSpacings">;
    /**
     * The CSS `transform` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transform
     */
    transform?: Token<CSS.Property.Transform>;
    /**
     * The CSS `transform-box` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box
     */
    transformBox?: Token<CSS.Property.TransformBox>;
    /**
     * The CSS `transform-origin` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin
     */
    transformOrigin?: Token<CSS.Property.TransformOrigin>;
    /**
     * The CSS `transform-style` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style
     */
    transformStyle?: Token<CSS.Property.TransformStyle>;
    /**
     * The CSS `transition` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transition
     */
    transition?: Token<CSS.Property.Transition>;
    /**
     * The CSS `transition-behavior` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transition-behavior
     */
    transitionBehavior?: Token<CSS.Property.TransitionBehavior>;
    /**
     * The CSS `transition-delay` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay
     */
    transitionDelay?: Token<CSS.Property.TransitionDelay>;
    /**
     * The CSS `transition-duration` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transition-duration
     */
    transitionDuration?: Token<CSS.Property.TransitionDuration, "transitionDuration">;
    /**
     * The CSS `transition-property` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property
     */
    transitionProperty?: Token<CSS.Property.TransitionProperty, "transitionProperty">;
    /**
     * The CSS `transition-timing-function` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function
     */
    transitionTimingFunction?: Token<CSS.Property.TransitionTimingFunction, "transitionEasing">;
    /**
     * The CSS `translate` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/translate
     */
    translate?: Token<"no" | "yes" | CSS.Property.Translate>;
    /**
     * If `transform=auto` or `transform=auto-3d`, sets the value of `--ui-translate-x`.
     */
    translateX?: Token<number | StringLiteral, "spaces">;
    /**
     * If `transform=auto` or `transform=auto-3d`, sets the value of `--ui-translate-y`.
     */
    translateY?: Token<number | StringLiteral, "spaces">;
    /**
     * The CSS `unicode-bidi` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/unicode-bidi
     */
    unicodeBidi?: Token<CSS.Property.UnicodeBidi>;
    /**
     * The CSS `user-select` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/user-select
     */
    userSelect?: Token<CSS.Property.UserSelect>;
    /**
     * Set CSS variables.
     * @experimental
     *
     * @example
     * ```jsx
     * <Box
     *   vars={[{ name:"space", token: "spaces", value: "md" }]
     *   m="calc($space * 2)"
     * >
     *   Box
     * </Box>
     * ```
     */
    vars?: {
        name: string;
        token?: ThemeToken;
        value?: Token<number | StringLiteral>;
        __prefix?: string;
    }[];
    /**
     * The CSS `vector-effect` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/vector-effect
     */
    vectorEffect?: Token<CSS.Property.VectorEffect>;
    /**
     * The CSS `vertical-align` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align
     */
    verticalAlign?: Token<CSS.Property.VerticalAlign>;
    /**
     * The CSS `view-timeline` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/view-timeline
     */
    viewTimeline?: Token<CSS.Property.ViewTimeline>;
    /**
     * The CSS `view-timeline-axis` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/view-timeline-axis
     */
    viewTimelineAxis?: Token<CSS.Property.ViewTimelineAxis>;
    /**
     * The CSS `view-timeline-inset` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/view-timeline-inset
     */
    viewTimelineInset?: Token<CSS.Property.ViewTimelineInset>;
    /**
     * The CSS `view-timeline-name` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/view-timeline-name
     */
    viewTimelineName?: Token<CSS.Property.ViewTimelineName>;
    /**
     * The CSS `view-transition-name` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/view-transition-name
     */
    viewTransitionName?: Token<CSS.Property.ViewTransitionName>;
    /**
     * The CSS `visibility` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/visibility
     */
    visibility?: Token<CSS.Property.Visibility>;
    /**
     * The CSS `width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/width
     */
    w?: Token<CSS.Property.Width | number, "sizes">;
    /**
     * The CSS `white-space` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/white-space
     */
    whiteSpace?: Token<CSS.Property.WhiteSpace>;
    /**
     * The CSS `white-space-collapse` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/white-space-collapse
     */
    whiteSpaceCollapse?: Token<CSS.Property.WhiteSpaceCollapse>;
    /**
     * The CSS `widows` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/widows
     */
    widows?: Token<CSS.Property.Widows>;
    /**
     * The CSS `width` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/width
     */
    width?: Token<CSS.Property.Width | number, "sizes">;
    /**
     * The CSS `will-change` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/will-change
     */
    willChange?: Token<CSS.Property.WillChange>;
    /**
     * The CSS `word-break` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/word-break
     */
    wordBreak?: Token<CSS.Property.WordBreak>;
    /**
     * The CSS `word-spacing` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing
     */
    wordSpacing?: Token<CSS.Property.WordSpacing>;
    /**
     * The CSS `writing-mode` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode
     */
    writingMode?: Token<CSS.Property.WritingMode>;
    /**
     * The CSS `z-index` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/z-index
     */
    z?: Token<CSS.Property.ZIndex, "zIndices">;
    /**
     * The CSS `z-index` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/z-index
     */
    zIndex?: Token<CSS.Property.ZIndex, "zIndices">;
    /**
     * The CSS `zoom` property.
     *
     * @see Docs https://developer.mozilla.org/en-US/docs/Web/CSS/zoom
     */
    zoom?: Token<CSS.Property.Zoom>;
    /**
     * The `@container` of CSS at-rule.
     * @experimental
     *
     * @example
     * ```jsx
     * <Box containerType="size">
     *   <Text _container={[{ maxW: "1200px", css: { color: "red" } }]}>
     *     Box
     *   </Text>
     * </Box>
     * ```
     */
    _container?: {
        [key: string]: any;
        name?: StringLiteral;
        css?: CSSUIObject;
        aspectRatio?: CSS.Property.AspectRatio;
        blockSize?: CSS.Property.BlockSize | number | Theme["sizes"];
        h?: CSS.Property.Height | number | Theme["sizes"];
        height?: CSS.Property.Height | number | Theme["sizes"];
        inlineSize?: CSS.Property.InlineSize | number | Theme["sizes"];
        maxAspectRatio?: CSS.Property.AspectRatio;
        maxBlockSize?: CSS.Property.MaxBlockSize | number | Theme["sizes"];
        maxH?: CSS.Property.MaxHeight | number | Theme["sizes"];
        maxHeight?: CSS.Property.MaxHeight | number | Theme["sizes"];
        maxInlineSize?: CSS.Property.MaxInlineSize | number | Theme["sizes"];
        maxW?: CSS.Property.MaxWidth | number | Theme["sizes"];
        maxWidth?: CSS.Property.MaxWidth | number | Theme["sizes"];
        minAspectRatio?: CSS.Property.AspectRatio;
        minBlockSize?: CSS.Property.MinBlockSize | number | Theme["sizes"];
        minH?: CSS.Property.MinHeight | number | Theme["sizes"];
        minHeight?: CSS.Property.MinHeight | number | Theme["sizes"];
        minInlineSize?: CSS.Property.MinInlineSize | number | Theme["sizes"];
        minW?: CSS.Property.MinWidth | number | Theme["sizes"];
        minWidth?: CSS.Property.MinWidth | number | Theme["sizes"];
        orientation?: "landscape" | "portrait" | StringLiteral;
        query?: StringLiteral;
        w?: CSS.Property.Width | number | Theme["sizes"];
        width?: CSS.Property.Width | number | Theme["sizes"];
    }[];
    /**
     * The `@media` of CSS at-rule.
     * @experimental
     *
     * @example
     * ```jsx
     * <Box
     *   _media={[{ maxW: "1200px", css: { color: "red" } }]
     * >
     *   Box
     * </Box>
     * ```
     */
    _media?: {
        [key: string]: any;
        type?: "all" | "print" | "screen" | "speech" | StringLiteral;
        css?: CSSUIObject;
        anyHover?: "hover" | "none" | StringLiteral;
        anyPointer?: "coarse" | "fine" | "none" | StringLiteral;
        aspectRatio?: CSS.Property.AspectRatio;
        color?: number | StringLiteral;
        colorGamut?: "p3" | "rec2020" | "srgb" | StringLiteral;
        colorIndex?: number | StringLiteral;
        deviceAspectRatio?: CSS.Property.AspectRatio;
        deviceHeight?: CSS.Property.Height | number | Theme["sizes"];
        deviceWidth?: CSS.Property.Width | number | Theme["sizes"];
        displayMode?: "browser" | "fullscreen" | "minimal-ui" | "picture-in-picture" | "standalone" | "window-controls-overlay" | StringLiteral;
        dynamicRange?: "high" | "standard" | StringLiteral;
        forcedColors?: "active" | "none" | StringLiteral;
        grid?: "StringLiteral" | 0 | 1;
        h?: CSS.Property.Height | number | Theme["sizes"];
        height?: CSS.Property.Height | number | Theme["sizes"];
        hover?: "hover" | "none" | StringLiteral;
        invertedColors?: "inverted" | "none" | StringLiteral;
        maxColor?: number | StringLiteral;
        maxColorIndex?: number | StringLiteral;
        maxDeviceAspectRatio?: CSS.Property.AspectRatio;
        maxDeviceHeight?: CSS.Property.MaxHeight | number | Theme["sizes"];
        maxH?: CSS.Property.MaxHeight | number | Theme["sizes"];
        maxHeight?: CSS.Property.MaxHeight | number | Theme["sizes"];
        maxMonochrome?: number | StringLiteral;
        maxResolution?: StringLiteral;
        maxW?: CSS.Property.MaxWidth | number | Theme["sizes"];
        maxWidth?: CSS.Property.MaxWidth | number | Theme["sizes"];
        mazDeviceWidth?: CSS.Property.Width | number | Theme["sizes"];
        minColor?: number | StringLiteral;
        minColorIndex?: number | StringLiteral;
        minDeviceAspectRatio?: CSS.Property.AspectRatio;
        minDeviceHeight?: CSS.Property.MinHeight | number | Theme["sizes"];
        minDeviceWidth?: CSS.Property.Width | number | Theme["sizes"];
        minH?: CSS.Property.MinHeight | number | Theme["sizes"];
        minHeight?: CSS.Property.MinHeight | number | Theme["sizes"];
        minMonochrome?: number | StringLiteral;
        minResolution?: StringLiteral;
        minW?: CSS.Property.MinWidth | number | Theme["sizes"];
        minWidth?: CSS.Property.MinWidth | number | Theme["sizes"];
        monochrome?: number | StringLiteral;
        orientation?: "landscape" | "portrait" | StringLiteral;
        overflowBlock?: "none" | "optional-paged" | "paged" | "scroll" | StringLiteral;
        overflowInline?: "none" | "scroll" | StringLiteral;
        pointer?: "coarse" | "fine" | "none" | StringLiteral;
        prefersColorScheme?: "dark" | "light" | StringLiteral;
        prefersContrast?: "custom" | "high" | "low" | "no-preference" | StringLiteral;
        prefersReducedMotion?: "no-preference" | "reduce" | StringLiteral;
        query?: StringLiteral;
        resolution?: StringLiteral;
        scan?: "interlace" | "progressive" | StringLiteral;
        scripting?: "enabled" | "initial-only" | "none" | StringLiteral;
        update?: "fast" | "none" | "slow" | StringLiteral;
        videoDynamicRange?: "high" | "standard" | StringLiteral;
        w?: CSS.Property.Width | number | Theme["sizes"];
        width?: CSS.Property.Width | number | Theme["sizes"];
    }[];
    /**
     * The `@supports` of CSS at-rule.
     * @experimental
     *
     * @example
     * ```jsx
     * <Box containerType="size">
     *   <Text _supports={[{ display: "flex", css: { display: "flex" } }]}>
     *     Box
     *   </Text>
     * </Box>
     * ```
     */
    _supports?: {
        css?: CSSUIObject;
        query?: StringLiteral;
    }[];
}

type ColorMode = "dark" | "light";
type ColorModeWithSystem = "system" | ColorMode;
type Breakpoint = "base" | Theme["breakpoints"];
type ThemeVariant<Y extends keyof Theme["components"] | unknown = unknown> = Y extends keyof Theme["components"] ? UIValue<Theme["components"][Y]["variants"]> : UIValue<string>;
type ThemeSize<Y extends keyof Theme["components"] | unknown = unknown> = Y extends keyof Theme["components"] ? UIValue<Theme["components"][Y]["sizes"]> : UIValue<string>;
type ThemeColorScheme = [Theme["colorSchemes"], Theme["colorSchemes"]] | Theme["colorSchemes"];
interface ThemeProps<Y extends keyof Theme["components"] | unknown = unknown> {
    /**
     * The color scheme of the component.
     */
    colorScheme?: ThemeColorScheme;
    /**
     * The size of the component.
     */
    size?: ThemeSize<Y>;
    /**
     * The variant of the component.
     */
    variant?: ThemeVariant<Y>;
    /**
     * If `true`, skip component theming.
     *
     * @private
     */
    __isProcessSkip?: boolean;
    /**
     * The styles used to override component styles when `__isProcessSkip` is true
     *
     * @private
     */
    __styles?: {
        [key: string]: CSSUIObject | undefined;
    } | CSSUIObject;
}
type ColorModeArray<Y, M extends boolean = true> = M extends true ? [ResponsiveObject<Y, false> | Y, ResponsiveObject<Y, false> | Y] : [Y, Y];
type ResponsiveObject<Y, M extends boolean = true> = M extends true ? {
    [key in Breakpoint]?: ColorModeArray<Y, false> | Y;
} : {
    [key in Breakpoint]?: Y;
};
type UIValue<Y> = ColorModeArray<Y> | ResponsiveObject<Y> | Y;
type BaseToken<Y, M = unknown> = M extends keyof Theme ? Theme[M] | Y : Y;
type ColorModeToken<Y, M = unknown> = M extends keyof Theme ? ColorModeArray<Theme[M] | Y> | Theme[M] | Y : ColorModeArray<Y> | Y;
type ResponsiveToken<Y, M = unknown> = M extends keyof Theme ? ResponsiveObject<Theme[M] | Y> | Theme[M] | Y : ResponsiveObject<Y> | Y;
type Token<Y, M = unknown> = M extends keyof Theme ? UIValue<Theme[M] | Y> : UIValue<Y>;
type StyledProps<Y> = ((theme: StyledTheme) => Y) | Y;
interface StyleProperties extends CSS.Properties, Omit<StyleProps, keyof CSS.Properties> {
}
type StyleValue<Y extends keyof StyleProperties> = StyledProps<UIValue<StyleProperties[Y]>>;
type UIStyleValue<Y extends keyof StyleProperties | keyof StyleProps> = Y extends keyof StyleProps ? StyleProps[Y] | StyleValue<Y> : StyleValue<Y>;
type UIStyles = {
    [Y in keyof StyleProperties]?: UIStyleValue<Y>;
};
type RecursiveStyles<Y> = {
    [K in keyof CSS.Pseudos | keyof PseudoProps | StringLiteral]?: ObjectLiteral | (RecursiveStyles<Y> & Y);
};
interface CSSUIObject extends UIStyles, RecursiveStyles<UIStyles> {
}
interface CSSProps {
    /**
     * The emotion's css object.
     */
    css?: Interpolation<{}>;
    /**
     * The CSS object that depends on the theme.
     */
    sx?: CSSUIObject;
    /**
     * Used for internal css management.
     *
     * @private
     */
    __css?: CSSUIObject;
}
interface CSSUIProps extends StyleProps, PseudoProps {
}
type UIStyleProps<Y extends Dict = Dict, M extends InternalTheme = InternalTheme> = {
    theme: StyledTheme<M>;
    colorScheme?: Theme["colorSchemes"];
    breakpoint?: Breakpoint;
    colorMode?: ColorMode;
    themeScheme?: Theme["themeSchemes"];
} & Y;
type UIStyle<Y extends Dict = Dict> = ((props: UIStyleProps<Y>) => CSSUIObject) | CSSUIObject;
type UIMultiStyle<Y extends Dict = Dict> = ((props: UIStyleProps<Y>) => {
    [key: string]: UIStyle<Y>;
}) | {
    [key: string]: UIStyle<Y>;
};
interface AnimationStyle {
    keyframes: {
        [key: string]: UIStyles;
    };
    delay?: BaseToken<CSS.Property.AnimationDelay>;
    direction?: BaseToken<CSS.Property.AnimationDirection>;
    duration?: BaseToken<CSS.Property.AnimationDuration, "transitionDuration">;
    fillMode?: BaseToken<CSS.Property.AnimationFillMode>;
    iterationCount?: BaseToken<CSS.Property.AnimationIterationCount>;
    playState?: BaseToken<CSS.Property.AnimationPlayState>;
    timingFunction?: BaseToken<CSS.Property.AnimationTimingFunction, "transitionEasing">;
}
interface FunctionCSSInterpolation {
    (theme: StyledTheme): CSSUIProps;
}
type CSSObjectOrFunc = CSSUIProps | FunctionCSSInterpolation;

declare function css(cssOrFunc: CSSObjectOrFunc | CSSUIObject): (theme: StyledTheme, disableStyleProp?: (prop: string) => boolean) => Dict<any>;
type CSSFunction = typeof css;

declare const useCSS: (cssObject?: CSSObjectOrFunc | CSSUIObject) => string;
declare const getCSS: (cssObject?: CSSObjectOrFunc | CSSUIObject) => (theme: StyledTheme) => string;

type Format<Y> = (name: Y, index: number) => string;
type Variable = Required<CSSUIProps>["vars"][number];
declare const useCreateVars: <Y extends Dict, M extends keyof Y = keyof Y>(obj: Y, keys: M[] | readonly M[], options?: CreateVarsOptions<M>) => [{
    name: string;
    token?: ThemeToken;
    value?: Token<number | _yamada_ui_utils.StringLiteral>;
    __prefix?: string;
}[], { [key in M]?: string | undefined; }];
interface CreateVarsOptions<M> {
    format?: Format<M>;
    transform?: boolean;
}
declare const createVars: <Y extends Dict, M extends keyof Y = keyof Y>(obj: Y, keys: M[] | readonly M[], { format, transform }?: CreateVarsOptions<M>) => (theme: StyledTheme) => [Variable[], { [key in M]?: string; }];
declare const mergeVars: (...vars: CSSUIObject["vars"][]) => CSSUIObject["vars"];

declare function getVar(token: string): (theme: StyledTheme) => string;
interface CreateThemeVarsOptions {
    cssMap?: CSSMap;
    cssVars?: Dict;
    prevTokens?: VariableTokens;
}
declare function getCreateThemeVars(prefix: string | undefined, queries: BreakpointQueries): (tokens: VariableTokens) => ({ cssMap, cssVars, prevTokens, }?: CreateThemeVarsOptions) => {
    cssMap: CSSMap;
    cssVars: Dict;
};
type CreateThemeVars = ReturnType<ReturnType<typeof getCreateThemeVars>>;

interface HTMLElements {
    form: HTMLFormElement;
    style: HTMLStyleElement;
    base: HTMLBaseElement;
    a: HTMLAnchorElement;
    abbr: HTMLElement$1;
    address: HTMLElement$1;
    area: HTMLAreaElement;
    article: HTMLElement$1;
    aside: HTMLElement$1;
    audio: HTMLAudioElement;
    b: HTMLElement$1;
    bdi: HTMLElement$1;
    bdo: HTMLElement$1;
    big: HTMLElement$1;
    blockquote: HTMLQuoteElement;
    body: HTMLBodyElement;
    br: HTMLBRElement;
    button: HTMLButtonElement;
    canvas: HTMLCanvasElement;
    caption: HTMLElement$1;
    center: HTMLElement$1;
    cite: HTMLElement$1;
    code: HTMLElement$1;
    col: HTMLTableColElement;
    colgroup: HTMLTableColElement;
    data: HTMLDataElement;
    datalist: HTMLDataListElement;
    dd: HTMLElement$1;
    del: HTMLModElement;
    details: HTMLDetailsElement;
    dfn: HTMLElement$1;
    dialog: HTMLDialogElement;
    div: HTMLDivElement;
    dl: HTMLDListElement;
    dt: HTMLElement$1;
    em: HTMLElement$1;
    embed: HTMLEmbedElement;
    fieldset: HTMLFieldSetElement;
    figcaption: HTMLElement$1;
    figure: HTMLElement$1;
    footer: HTMLElement$1;
    h1: HTMLHeadingElement;
    h2: HTMLHeadingElement;
    h3: HTMLHeadingElement;
    h4: HTMLHeadingElement;
    h5: HTMLHeadingElement;
    h6: HTMLHeadingElement;
    head: HTMLHeadElement;
    header: HTMLElement$1;
    hgroup: HTMLElement$1;
    hr: HTMLHRElement;
    html: HTMLHtmlElement;
    i: HTMLElement$1;
    iframe: HTMLIFrameElement;
    img: HTMLImageElement;
    input: HTMLInputElement;
    ins: HTMLModElement;
    kbd: HTMLElement$1;
    keygen: HTMLElement$1;
    label: HTMLLabelElement;
    legend: HTMLLegendElement;
    li: HTMLLIElement;
    link: HTMLLinkElement;
    main: HTMLElement$1;
    map: HTMLMapElement;
    mark: HTMLElement$1;
    menu: HTMLElement$1;
    menuitem: HTMLElement$1;
    meta: HTMLMetaElement;
    meter: HTMLMeterElement;
    nav: HTMLElement$1;
    noindex: HTMLElement$1;
    noscript: HTMLElement$1;
    object: HTMLObjectElement;
    ol: HTMLOListElement;
    optgroup: HTMLOptGroupElement;
    option: HTMLOptionElement;
    output: HTMLOutputElement;
    p: HTMLParagraphElement;
    param: HTMLParamElement;
    picture: HTMLElement$1;
    pre: HTMLPreElement;
    progress: HTMLProgressElement;
    q: HTMLQuoteElement;
    rp: HTMLElement$1;
    rt: HTMLElement$1;
    ruby: HTMLElement$1;
    s: HTMLElement$1;
    samp: HTMLElement$1;
    script: HTMLScriptElement;
    search: HTMLElement$1;
    section: HTMLElement$1;
    select: HTMLSelectElement;
    slot: HTMLSlotElement;
    small: HTMLElement$1;
    source: HTMLSourceElement;
    span: HTMLSpanElement;
    strong: HTMLElement$1;
    sub: HTMLElement$1;
    summary: HTMLElement$1;
    sup: HTMLElement$1;
    table: HTMLTableElement;
    tbody: HTMLTableSectionElement;
    td: HTMLTableCellElement;
    template: HTMLTemplateElement;
    textarea: HTMLTextAreaElement;
    tfoot: HTMLTableSectionElement;
    th: HTMLTableCellElement;
    thead: HTMLTableSectionElement;
    time: HTMLTimeElement;
    title: HTMLTitleElement;
    tr: HTMLTableRowElement;
    track: HTMLTrackElement;
    u: HTMLElement$1;
    ul: HTMLUListElement;
    var: HTMLElement$1;
    video: HTMLVideoElement;
    wbr: HTMLElement$1;
    webview: HTMLWebViewElement;
}
type HTMLElement$1 = keyof HTMLElements;
interface SVGElements {
    animate: SVGElement;
    animateMotion: SVGElement;
    animateTransform: SVGElement;
    circle: SVGCircleElement;
    clipPath: SVGClipPathElement;
    defs: SVGDefsElement;
    desc: SVGDescElement;
    ellipse: SVGEllipseElement;
    feBlend: SVGFEBlendElement;
    feColorMatrix: SVGFEColorMatrixElement;
    feComponentTransfer: SVGFEComponentTransferElement;
    feComposite: SVGFECompositeElement;
    feConvolveMatrix: SVGFEConvolveMatrixElement;
    feDiffuseLighting: SVGFEDiffuseLightingElement;
    feDisplacementMap: SVGFEDisplacementMapElement;
    feDistantLight: SVGFEDistantLightElement;
    feDropShadow: SVGFEDropShadowElement;
    feFlood: SVGFEFloodElement;
    feFuncA: SVGFEFuncAElement;
    feFuncB: SVGFEFuncBElement;
    feFuncG: SVGFEFuncGElement;
    feFuncR: SVGFEFuncRElement;
    feGaussianBlur: SVGFEGaussianBlurElement;
    feImage: SVGFEImageElement;
    feMerge: SVGFEMergeElement;
    feMergeNode: SVGFEMergeNodeElement;
    feMorphology: SVGFEMorphologyElement;
    feOffset: SVGFEOffsetElement;
    fePointLight: SVGFEPointLightElement;
    feSpecularLighting: SVGFESpecularLightingElement;
    feSpotLight: SVGFESpotLightElement;
    feTile: SVGFETileElement;
    feTurbulence: SVGFETurbulenceElement;
    filter: SVGFilterElement;
    foreignObject: SVGForeignObjectElement;
    g: SVGGElement;
    image: SVGImageElement;
    line: SVGLineElement;
    linearGradient: SVGLinearGradientElement;
    marker: SVGMarkerElement;
    mask: SVGMaskElement;
    metadata: SVGMetadataElement;
    mpath: SVGElement;
    path: SVGPathElement;
    pattern: SVGPatternElement;
    polygon: SVGPolygonElement;
    polyline: SVGPolylineElement;
    radialGradient: SVGRadialGradientElement;
    rect: SVGRectElement;
    set: SVGSetElement;
    stop: SVGStopElement;
    svg: SVGSVGElement;
    switch: SVGSwitchElement;
    symbol: SVGSymbolElement;
    text: SVGTextElement;
    textPath: SVGTextPathElement;
    tspan: SVGTSpanElement;
    use: SVGUseElement;
    view: SVGViewElement;
}
type SVGElement = keyof SVGElements;
type DOMElement = HTMLElement$1 | SVGElement;
interface DOMElements extends HTMLElements, SVGElements {
}

type BaseStyle = ((props: InterpolationProps) => CSSUIObject) | CSSUIObject;
interface StyledOptions {
    baseStyle?: BaseStyle;
    disableStyleProp?: (prop: string) => boolean;
    label?: string;
    shouldForwardProp?: (prop: string) => boolean;
}
interface UIFactory {
    <Y extends As, M extends object = {}>(el: Y, options?: StyledOptions): UIComponent<Y, M>;
}
interface UIProps extends CSSProps, CSSUIProps {
    /**
     * The HTML element to render.
     */
    as?: As;
}
type WithoutAs<Y extends object> = Omit<Y, "as">;
type InterpolationProps = {
    theme: StyledTheme;
} & CSSProps & CSSUIObject;
type OmitProps<Y extends object = {}, M extends object = {}> = M & Omit<Y, "as" | keyof M>;
type ComponentConditionalProps<Y extends As, M extends As, D extends object = {}> = OmitProps<React.ComponentProps<M>, D> | OmitProps<React.ComponentProps<Y>, D>;
type ComponentProps<Y extends As, M extends As, D extends object = {}> = {
    as?: M;
} & ComponentConditionalProps<Y, M, D>;
interface ComponentArgs extends Pick<React.FunctionComponent, "contextTypes" | "defaultProps" | "displayName" | "propTypes"> {
    __ui__?: string;
}
interface Component<Y extends As, D extends object = {}> extends ComponentArgs {
    <M extends As = Y>(props: ComponentProps<Y, M, D>): React.ReactElement;
}
type FC<Y = {}> = FunctionComponent<Y>;
interface FunctionComponent<Y = {}> extends ComponentArgs {
    (props: Y, deprecatedLegacyContext?: any): React.ReactNode;
}
type As = React.ElementType;
type HTMLUIComponents = {
    [Y in DOMElement]: UIComponent<Y>;
};
interface UIComponent<Y extends As = As, M extends object = {}> extends Component<Y, Merge<UIProps, M>> {
}
type HTMLRef<Y extends DOMElement = "div"> = JSX.IntrinsicElements[Y]["ref"];
interface HTMLRefAttributes<Y extends DOMElement = "div"> {
    ref?: HTMLRef<Y> | undefined;
}
type HTMLProps<Y extends DOMElement = "div"> = Omit<JSX.IntrinsicElements[Y], "ref" | "size" | keyof UIProps>;
type HTMLUIProps<Y extends DOMElement = "div"> = Merge<HTMLProps<Y>, UIProps>;
type HTMLUIPropsWithoutAs<Y extends DOMElement = "div"> = WithoutAs<HTMLUIProps<Y>>;
type HTMLUIPropsWithRef<Y extends DOMElement = "div"> = HTMLUIProps<Y> & React.RefAttributes<any>;
type ConditionalProps<Y> = Y extends DOMElement ? HTMLProps<Y> : Y;
type DefinedProps<Y, M> = M extends undefined ? Y : M;
interface PropGetter<Y = "div", M = undefined> {
    (props?: ConditionalProps<Y>, ref?: React.Ref<any>): DefinedProps<ConditionalProps<Y>, M> & React.RefAttributes<any>;
}
interface RequiredPropGetter<Y = "div", M = undefined> {
    (props: ConditionalProps<Y>, ref?: React.Ref<any>): DefinedProps<ConditionalProps<Y>, M> & React.RefAttributes<any>;
}

declare function forwardRef<Y extends object, M extends As>(render: React.ForwardRefRenderFunction<any, {
    as?: As;
} & Merge<React.ComponentPropsWithoutRef<M>, WithoutAs<Y>>>): Component<M, Y>;

declare function memo<Y extends object>(Component: React.FunctionComponent<Y>, propsAreEqual?: (prevProps: Readonly<Y>, nextProps: Readonly<Y>) => boolean): ComponentArgs & React.NamedExoticComponent<Y>;

declare function shouldForwardProp(disableStyleProp?: (prop: string) => boolean): (prop: string) => boolean;

type Styles<Y extends boolean = false> = Y extends false ? CSSUIObject : {
    [key: string]: CSSUIObject | undefined;
};
interface UseStylesOptions<Y extends boolean = false> {
    isMulti?: Y;
    isProcessSkip?: boolean;
    styles?: Styles<Y>;
}
type UseComponentStyleOptions<Y extends boolean = false> = Omit<UseStylesOptions<Y>, "isMulti">;
declare function useComponentStyle<Y extends Dict = Dict>(name: string, props: Y, options?: UseComponentStyleOptions): [styles: CSSUIObject, props: Y];
declare function useComponentMultiStyle<Y extends Dict = Dict>(name: string, props: Y, options?: UseComponentStyleOptions<true>): [styles: {
    [key: string]: CSSUIObject | undefined;
}, props: Y];

declare function animation(value: any, theme: StyledTheme, css: CSSFunction, _prev?: Dict): any;

declare function generateCalc(token: ThemeToken): Transform;

declare function colorMix(value: any, theme: StyledTheme, _css?: CSSFunction, _prev?: Dict): any;

declare function generateFilter(type?: "backdrop" | "filter"): Transform;

declare function generateFunction(func: string): Transform;

declare function gradient(value: any, theme: StyledTheme, _css?: CSSFunction, _prev?: Dict): any;

declare function grid(value: any, theme: StyledTheme, css: CSSFunction, prev?: Dict): any;

declare function generateStyles(prefix?: string): Transform;

declare function generateToken(token: ThemeToken): Transform;

type CSSProperties = Union<keyof CSS.ObsoleteProperties | keyof CSS.StandardProperties | keyof CSS.SvgProperties>;
interface StyleConfig {
    isProcessResult?: boolean;
    isProcessSkip?: boolean;
    properties?: ((theme: StyledTheme) => CSSProperties) | CSSProperties | CSSProperties[];
    static?: CSSObject;
    token?: ThemeToken;
    transform?: Transform;
}
interface StyleConfigs {
    [key: string]: StyleConfig | true;
}
declare const transforms: {
    animation: typeof animation;
    bgClip: (value: any) => {
        backgroundClip: string;
        color: string;
    } | {
        backgroundClip: any;
        color?: undefined;
    };
    calc: typeof generateCalc;
    colorMix: typeof colorMix;
    container: Transform;
    content: (value: any) => any;
    deg: (value: any) => any;
    filter: typeof generateFilter;
    fraction: (value: any) => any;
    function: typeof generateFunction;
    gradient: typeof gradient;
    grid: typeof grid;
    isTruncated: (value: boolean) => {
        overflow: string;
        textOverflow: string;
        whiteSpace: string;
    } | undefined;
    media: Transform;
    px: (value: any) => any;
    styles: typeof generateStyles;
    supports: Transform;
    token: typeof generateToken;
    transform: typeof transform;
    vars: typeof vars;
};
type Transforms = keyof typeof transforms;

interface Factory extends UIFactory, HTMLUIComponents {
}
/**
 * `ui` is an object of JSX elements enabled with Yamada UI's style system,
 * and can also be used as a function for custom components to receive Yamada UI's style system.
 *
 * @see Docs https://yamada-ui.com/styled-system/ui
 */
declare const ui: Factory;

interface ColorModeManager {
    type: "cookie" | "localStorage";
    get: (initColorMode?: ColorModeWithSystem) => (storageKey?: string) => ColorModeWithSystem;
    set: (colorMode: ColorModeWithSystem) => (storageKey?: string) => void;
    ssr?: boolean;
}
declare const createColorModeManager: (type?: "cookie" | "local" | "ssr", cookie?: string) => ColorModeManager;
declare const colorModeManager: {
    cookieStorage: ColorModeManager;
    createCookieStorage: (defaultStorageKey: string, cookie?: string) => ColorModeManager;
    createLocalStorage: (defaultStorageKey: string) => ColorModeManager;
    localStorage: ColorModeManager;
    ssr: (cookie?: string) => ColorModeManager;
};

interface Environment {
    getDocument: () => Document | undefined;
    getWindow: () => undefined | Window;
}
declare const defaultEnvironment: Environment;
interface EnvironmentProviderProps {
    children: ReactNode;
    disabled?: boolean;
    environment?: Environment;
}
declare const EnvironmentProvider: FC$1<EnvironmentProviderProps>;
declare const useEnvironment: ({ isDefer }?: {
    isDefer?: boolean;
}) => Environment;

interface ColorModeContext {
    changeColorMode: (colorMode: ColorModeWithSystem) => void;
    colorMode: ColorMode;
    internalColorMode: ColorModeWithSystem;
    toggleColorMode: () => void;
    forced?: boolean;
}
declare const ColorModeContext: React.Context<ColorModeContext>;
interface ColorModeProviderProps {
    children?: ReactNode;
    colorMode?: ColorMode;
    /**
     * Manager to persist a user's color mode preference.
     *
     * Omit if you don't render server-side.
     * For SSR, choose `colorModeManager.ssr`.
     *
     * @default 'colorModeManager.localStorage'
     */
    colorModeManager?: ColorModeManager;
    /**
     * The config of the yamada ui.
     */
    config?: ThemeConfig;
    /**
     * Key of value saved in storage.
     * By default, it is saved to `local storage`.
     */
    storageKey?: string;
}
declare const ColorModeProvider: FC$1<ColorModeProviderProps>;
/**
 * `useColorMode` is a custom hook that returns the current color mode.
 *
 * @see Docs https://yamada-ui.com/hooks/use-color-mode
 */
declare const useColorMode: () => ColorModeContext;
interface UseSystemColorModeProps {
    callback?: (colorMode: ColorMode) => void;
    environment?: Environment;
    initialColorMode?: ColorMode;
}
/**
 * `useSystemColorMode` is a custom hook that returns the current system color mode.
 */
declare const useSystemColorMode: ({ callback, environment, initialColorMode, }?: UseSystemColorModeProps) => ColorMode | undefined;
/**
 * `useColorModeValue` is a custom hook that returns the value of the current color mode from the provided values.
 *
 * @see Docs https://yamada-ui.com/hooks/use-color-mode-value
 */
declare const useColorModeValue: <L, D>(light: L, dark: D) => D | L;
declare const getColorModeValue: <L, D>(light: L, dark: D) => (colorMode: ColorMode) => D | L;

interface ColorModeScriptProps {
    type?: "cookie" | "localStorage";
    initialColorMode?: ColorModeWithSystem;
    nonce?: string;
    storageKey?: string;
}
declare const COLOR_MODE_STORAGE_KEY = "ui-color-mode";
declare const getColorModeScript: ({ type, initialColorMode, storageKey, }?: Omit<ColorModeScriptProps, "nonce">) => string;
declare const ColorModeScript: ({ nonce, ...rest }: ColorModeScriptProps) => react_jsx_runtime.JSX.Element;

interface ThemeSchemeManager {
    type: "cookie" | "localStorage";
    get: (initialThemeScheme?: Theme["themeSchemes"]) => (storageKey?: string) => Theme["themeSchemes"];
    set: (themeScheme: Theme["themeSchemes"]) => (storageKey?: string) => void;
    ssr?: boolean;
}
declare const createThemeSchemeManager: (type?: "cookie" | "local" | "ssr", cookie?: string) => ThemeSchemeManager;
declare const themeSchemeManager: {
    cookieStorage: ThemeSchemeManager;
    createCookieStorage: (defaultStorageKey: string, cookie?: string) => ThemeSchemeManager;
    createLocalStorage: (defaultStorageKey: string) => ThemeSchemeManager;
    localStorage: ThemeSchemeManager;
    ssr: (cookie?: string) => ThemeSchemeManager;
};

interface ThemeProviderOptions {
    /**
     * The config of the yamada ui.
     */
    config?: ThemeConfig;
    /**
     * Key of value saved in storage.
     * By default, it is saved to `local storage`.
     */
    storageKey?: string;
    /**
     * The theme of the yamada ui.
     */
    theme?: Dict;
    /**
     * Manager to persist a user's theme scheme preference.
     *
     * Omit if you don't render server-side.
     * For SSR, choose `themeSchemeManager.ssr`.
     *
     * @default 'themeSchemeManager.localStorage'
     */
    themeSchemeManager?: ThemeSchemeManager;
}
interface ThemeProviderProps extends Omit<ThemeProviderProps$1, "theme">, ThemeProviderOptions {
}
declare const ThemeProvider: FC$1<ThemeProviderProps>;
declare const CSSVars: FC$1;
declare const ResetStyle: FC$1;
declare const GlobalStyle: FC$1;
/**
 * `useTheme` is a custom hook that returns a function for retrieving and switching themes.
 *
 * @see Docs https://yamada-ui.com/hooks/use-theme
 */
declare const useTheme: <T extends InternalTheme>() => {
    changeThemeScheme: ChangeThemeScheme;
    internalTheme: StyledTheme<T>;
    theme: StyledTheme<T>;
    themeScheme: "base" | ({} & string);
};

interface ThemeSchemeScriptProps {
    type?: "cookie" | "localStorage";
    initialThemeScheme?: Theme["themeSchemes"];
    nonce?: string;
    storageKey?: string;
}
declare const THEME_SCHEME_STORAGE_KEY = "ui-theme-scheme";
declare const getThemeSchemeScript: ({ type, initialThemeScheme: init, storageKey, }?: Omit<ThemeSchemeScriptProps, "nonce">) => string;
declare const ThemeSchemeScript: ({ nonce, ...rest }: ThemeSchemeScriptProps) => react_jsx_runtime.JSX.Element;

interface ToCSSObjectOptions extends Pick<StyledOptions, "baseStyle" | "disableStyleProp"> {
}
declare function toCSSObject({ baseStyle, disableStyleProp, }: ToCSSObjectOptions): FunctionInterpolation<InterpolationProps>;
declare function styled<T extends As, P extends object = {}>(el: T, { baseStyle, disableStyleProp, ...styledOptions }?: StyledOptions): UIComponent<T, P>;

export { type AlertStatus, type AlertStatuses, type AnalyzeBreakpointsReturn, type AnimationProperty, type AnimationStyle, type As, type AtRuleProperty, type AtRuleProps, type AtRuleSelector, type AtRuleStyleProperty, type AtRules, type AttributeProperty, type AttributeProps, type AttributeSelector, type Attributes, type BaseStyle, type BaseToken, type BlurProperty, type BorderProperty, type Breakpoint, type BreakpointDirection, type BreakpointOptions, type BreakpointQueries, type Breakpoints, COLOR_MODE_STORAGE_KEY, type CSSFunction, type CSSMap, type CSSObjectOrFunc, type CSSProps, type CSSUIObject, type CSSUIProps, CSSVars, type ChangeThemeScheme, type ColorMode, type ColorModeArray, ColorModeContext, type ColorModeManager, ColorModeProvider, type ColorModeProviderProps, ColorModeScript, type ColorModeScriptProps, type ColorModeToken, type ColorModeWithSystem, type ColorProperty, type Component, type ComponentArgs, type ComponentBaseStyle, type ComponentDefaultProps, type ComponentMultiBaseStyle, type ComponentMultiSizes, type ComponentMultiStyle, type ComponentMultiVariants, type ComponentOverrideProps, type ComponentSizes, type ComponentStyle, type ComponentVariants, type CreateThemeVars, type CustomInternalTheme, type CustomTheme, type DOMElement, type DOMElements, type Environment, EnvironmentProvider, type EnvironmentProviderProps, type FC, type FontProperty, type FunctionCSSInterpolation, type FunctionComponent, GeneratedTheme, GlobalStyle, type GradientProperty, type GroupAttributeProperty, type GroupAttributeProps, type GroupAttributeSelector, type GroupAttributes, type HTMLElement$1 as HTMLElement, type HTMLElements, type HTMLProps, type HTMLRef, type HTMLRefAttributes, type HTMLUIComponents, type HTMLUIProps, type HTMLUIPropsWithRef, type HTMLUIPropsWithoutAs, type InternalTheme, type InterpolationProps, type LayerStyles, type LayoutStyleProperty, type LoadingComponent, type LoadingComponentProps, type LoadingConfigOptions, type LoadingVariant, type NestedTheme, type NoticeComponentProps, type NoticeConfigOptions, type NoticePlacement, type OmitProps, type PeerAttributeProperty, type PeerAttributeProps, type PeerAttributeSelector, type PeerAttributes, type ProcessSkipProperty, type PropGetter, type PseudoClassProperty, type PseudoClassProps, type PseudoClassSelector, type PseudoClasses, type PseudoElementProperty, type PseudoElementProps, type PseudoElementSelector, type PseudoElements, type PseudoProperty, type PseudoProps, type PseudoSelector, type PseudoStyleProperty, type Pseudos, type RadiusProperty, type RecursiveStyles, type RequiredPropGetter, ResetStyle, type ResponsiveObject, type ResponsiveToken, type SVGElement, type SVGElements, type SemanticColorSchemes, type ShadowProperty, type ShorthandStyleProperty, type SizeProperty, type SnackComponentProps, type SnackConfigOptions, type SnackDirection, type SpaceProperty, type StandardStyleProperty, type StyleConfig, type StyleConfigs, type StyleProperties, type StyleProperty, type StyleProps, type StyledOptions, type StyledProps, type StyledTheme, type Styles$1 as Styles, THEME_SCHEME_STORAGE_KEY, type TextStyles, type Theme, type ThemeAnimationTokens, type ThemeBreakpointTokens, type ThemeComponents, type ThemeConfig, type ThemeProps, ThemeProvider, type ThemeProviderProps, type ThemeSchemeManager, ThemeSchemeScript, type ThemeSchemeScriptProps, type ThemeSchemes, type ThemeSemanticTokens, type ThemeSemantics, type ThemeToken, type ThemeTokens, type ThemeTransitionTokens, type ThemeValue, type Token, type TransformTheme, type Transforms, type TransitionProperty, type UIComponent, type UIFactory, type UIMultiStyle, type UIProps, type UIStyle, type UIStyleProperty, type UIStyleProps, type UIStyles, UITheme, type UIValue, type UsageTheme, type UseComponentStyleOptions, type UseSystemColorModeProps, type VariableColorModeValue, type VariableResponsiveValue, type VariableTokens, type VariableValue, type WithoutAs, type ZIndexProperty, analyzeBreakpoints, animation, animationProperties, atRuleProperties, atRuleSelectors, atRuleStyles, atRules, attributeProperties, attributeSelectors, attributes, blurProperties, borderProperties, colorModeManager, colorProperties, createColorModeManager, createQuery, createThemeSchemeManager, createVars, css, defaultEnvironment, fontProperties, forwardRef, getCSS, getColorModeScript, getColorModeValue, getCreateThemeVars, getMinMaxQuery, getThemeSchemeScript, getVar, gradient, gradientProperties, groupAttributeProperties, groupAttributeSelectors, groupAttributes, keyframes, layoutStyleProperties, memo, mergeMultiStyle, mergeStyle, mergeVars, mode, omitThemeProps, peerAttributeProperties, peerAttributeSelectors, peerAttributes, pickStyle, processSkipProperties, pseudoClassProperties, pseudoClassSelectors, pseudoClasses, pseudoElementProperties, pseudoElementSelectors, pseudoElements, pseudoProperties, pseudoSelectors, pseudoStyles, pseudos, radiusProperties, shadowProperties, shorthandStyles, shouldForwardProp, sizeProperties, spaceProperties, standardStyles, styleProperties, styled, styles, themeSchemeManager, toCSSObject, transformTheme, transforms, transitionProperties, ui, uiStyles, useCSS, useColorMode, useColorModeValue, useComponentMultiStyle, useComponentStyle, useCreateVars, useEnvironment, useSystemColorMode, useTheme, zIndexProperties };
