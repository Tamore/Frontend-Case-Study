"use client"
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AcceleratedAnimation: () => import_framer_motion3.AcceleratedAnimation,
  AnimatePresence: () => import_framer_motion3.AnimatePresence,
  AnimateSharedLayout: () => import_framer_motion3.AnimateSharedLayout,
  DeprecatedLayoutGroupContext: () => import_framer_motion3.DeprecatedLayoutGroupContext,
  DragControls: () => import_framer_motion3.DragControls,
  FlatTree: () => import_framer_motion3.FlatTree,
  LayoutGroup: () => import_framer_motion3.LayoutGroup,
  LayoutGroupContext: () => import_framer_motion3.LayoutGroupContext,
  LazyMotion: () => import_framer_motion3.LazyMotion,
  MOTION_TRANSITION_DEFAULTS: () => MOTION_TRANSITION_DEFAULTS,
  MOTION_TRANSITION_EASINGS: () => MOTION_TRANSITION_EASINGS,
  MOTION_TRANSITION_VARIANTS: () => MOTION_TRANSITION_VARIANTS,
  Motion: () => Motion,
  MotionConfig: () => import_framer_motion3.MotionConfig,
  MotionConfigContext: () => import_framer_motion3.MotionConfigContext,
  MotionContext: () => import_framer_motion3.MotionContext,
  MotionGlobalConfig: () => import_framer_motion3.MotionGlobalConfig,
  MotionReorder: () => import_framer_motion3.Reorder,
  PresenceContext: () => import_framer_motion3.PresenceContext,
  SwitchLayoutGroupContext: () => import_framer_motion3.SwitchLayoutGroupContext,
  VisualElement: () => import_framer_motion3.VisualElement,
  addPointerInfo: () => import_framer_motion3.addPointerInfo,
  addScaleCorrector: () => import_framer_motion3.addScaleCorrector,
  animate: () => import_framer_motion3.animate,
  animateValue: () => import_framer_motion3.animateValue,
  animateVisualElement: () => import_framer_motion3.animateVisualElement,
  animationControls: () => import_framer_motion3.animationControls,
  animations: () => import_framer_motion3.animations,
  anticipate: () => import_framer_motion3.anticipate,
  backIn: () => import_framer_motion3.backIn,
  backInOut: () => import_framer_motion3.backInOut,
  backOut: () => import_framer_motion3.backOut,
  buildTransform: () => import_framer_motion3.buildTransform,
  calcLength: () => import_framer_motion3.calcLength,
  cancelFrame: () => import_framer_motion3.cancelFrame,
  cancelSync: () => import_framer_motion3.cancelSync,
  circIn: () => import_framer_motion3.circIn,
  circInOut: () => import_framer_motion3.circInOut,
  circOut: () => import_framer_motion3.circOut,
  clamp: () => import_framer_motion3.clamp,
  color: () => import_framer_motion3.color,
  complex: () => import_framer_motion3.complex,
  createBox: () => import_framer_motion3.createBox,
  createDomMotionComponent: () => import_framer_motion3.createDomMotionComponent,
  createMotionComponent: () => import_framer_motion3.createMotionComponent,
  createScopedAnimate: () => import_framer_motion3.createScopedAnimate,
  cubicBezier: () => import_framer_motion3.cubicBezier,
  delay: () => import_framer_motion3.delay,
  disableInstantTransitions: () => import_framer_motion3.disableInstantTransitions,
  distance: () => import_framer_motion3.distance,
  distance2D: () => import_framer_motion3.distance2D,
  domAnimation: () => import_framer_motion3.domAnimation,
  domMax: () => import_framer_motion3.domMax,
  easeIn: () => import_framer_motion3.easeIn,
  easeInOut: () => import_framer_motion3.easeInOut,
  easeOut: () => import_framer_motion3.easeOut,
  filterProps: () => import_framer_motion3.filterProps,
  frame: () => import_framer_motion3.frame,
  frameData: () => import_framer_motion3.frameData,
  inView: () => import_framer_motion3.inView,
  interpolate: () => import_framer_motion3.interpolate,
  invariant: () => import_framer_motion3.invariant,
  isBrowser: () => import_framer_motion3.isBrowser,
  isDragActive: () => import_framer_motion3.isDragActive,
  isMotionComponent: () => import_framer_motion3.isMotionComponent,
  isMotionValue: () => import_framer_motion3.isMotionValue,
  isValidMotionProp: () => import_framer_motion3.isValidMotionProp,
  m: () => import_framer_motion3.m,
  makeUseVisualState: () => import_framer_motion3.makeUseVisualState,
  mirrorEasing: () => import_framer_motion3.mirrorEasing,
  mix: () => import_framer_motion3.mix,
  motion: () => motion,
  motionForwardRef: () => motionForwardRef,
  motionValue: () => import_framer_motion3.motionValue,
  optimizedAppearDataAttribute: () => import_framer_motion3.optimizedAppearDataAttribute,
  pipe: () => import_framer_motion3.pipe,
  progress: () => import_framer_motion3.progress,
  px: () => import_framer_motion3.px,
  resolveMotionValue: () => import_framer_motion3.resolveMotionValue,
  reverseEasing: () => import_framer_motion3.reverseEasing,
  scroll: () => import_framer_motion3.scroll,
  scrollInfo: () => import_framer_motion3.scrollInfo,
  spring: () => import_framer_motion3.spring,
  stagger: () => import_framer_motion3.stagger,
  startOptimizedAppearAnimation: () => import_framer_motion3.startOptimizedAppearAnimation,
  steps: () => import_framer_motion3.steps,
  sync: () => import_framer_motion3.sync,
  transform: () => import_framer_motion3.transform,
  transitionEnter: () => transitionEnter,
  transitionExit: () => transitionExit,
  unwrapMotionComponent: () => import_framer_motion3.unwrapMotionComponent,
  useAnimate: () => import_framer_motion3.useAnimate,
  useAnimationControls: () => import_framer_motion3.useAnimationControls,
  useAnimationFrame: () => import_framer_motion3.useAnimationFrame,
  useCycle: () => import_framer_motion3.useCycle,
  useDeprecatedAnimatedState: () => import_framer_motion3.useDeprecatedAnimatedState,
  useDeprecatedInvertedScale: () => import_framer_motion3.useDeprecatedInvertedScale,
  useDomEvent: () => import_framer_motion3.useDomEvent,
  useDragControls: () => import_framer_motion3.useDragControls,
  useElementScroll: () => import_framer_motion3.useElementScroll,
  useForceUpdate: () => import_framer_motion3.useForceUpdate,
  useInView: () => import_framer_motion3.useInView,
  useInstantLayoutTransition: () => import_framer_motion3.useInstantLayoutTransition,
  useInstantTransition: () => import_framer_motion3.useInstantTransition,
  useIsPresent: () => import_framer_motion3.useIsPresent,
  useIsomorphicLayoutEffect: () => import_framer_motion3.useIsomorphicLayoutEffect,
  useMotionAnimation: () => import_framer_motion3.useAnimation,
  useMotionTemplate: () => import_framer_motion3.useMotionTemplate,
  useMotionValue: () => import_framer_motion3.useMotionValue,
  useMotionValueEvent: () => import_framer_motion3.useMotionValueEvent,
  usePresence: () => import_framer_motion3.usePresence,
  useReducedMotion: () => import_framer_motion3.useReducedMotion,
  useReducedMotionConfig: () => import_framer_motion3.useReducedMotionConfig,
  useResetProjection: () => import_framer_motion3.useResetProjection,
  useScroll: () => import_framer_motion3.useScroll,
  useSpring: () => import_framer_motion3.useSpring,
  useTime: () => import_framer_motion3.useTime,
  useTransform: () => import_framer_motion3.useTransform,
  useVelocity: () => import_framer_motion3.useVelocity,
  useViewportScroll: () => import_framer_motion3.useViewportScroll,
  useWillChange: () => import_framer_motion3.useWillChange,
  visualElementStore: () => import_framer_motion3.visualElementStore,
  warning: () => import_framer_motion3.warning,
  wrap: () => import_framer_motion3.wrap
});
module.exports = __toCommonJS(src_exports);

// src/factory.ts
var import_core = require("@yamada-ui/core");
var import_framer_motion = require("framer-motion");
function factory() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(import_core.styled, {
    apply: (_target, _thisArg, [el, options]) => {
      return (0, import_framer_motion.motion)((0, import_core.styled)(el, options));
    },
    get: (_target, el) => {
      if (!cache.has(el)) cache.set(el, (0, import_framer_motion.motion)((0, import_core.styled)(el)));
      return cache.get(el);
    }
  });
}
var motion = factory();

// src/forward-ref.tsx
var React = __toESM(require("react"));
function motionForwardRef(render) {
  return React.forwardRef(
    render
  );
}

// src/motion.tsx
var import_core2 = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_framer_motion2 = require("framer-motion");
var import_jsx_runtime = require("react/jsx-runtime");
var disableStyleProps = ["transition"];
var disableStyleProp = (prop) => disableStyleProps.includes(prop);
var Component = (0, import_core2.ui)("div", { disableStyleProp });
var Motion = motionForwardRef(
  ({ as = "div", className, ...rest }, ref) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    Component,
    {
      ref,
      as: import_framer_motion2.motion[as],
      className: (0, import_utils.cx)("ui-motion", className),
      ...rest
    }
  )
);
Motion.displayName = "Motion";
Motion.__ui__ = "Motion";

// src/utils.ts
var import_utils2 = require("@yamada-ui/utils");
var MOTION_TRANSITION_EASINGS = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeInOut: [0.4, 0, 0.2, 1],
  easeOut: [0, 0, 0.2, 1]
};
var MOTION_TRANSITION_VARIANTS = {
  fade: {
    enter: { opacity: 1 },
    exit: { opacity: 0 }
  },
  pushDown: {
    enter: { y: "-100%" },
    exit: { y: "30%" }
  },
  pushLeft: {
    enter: { x: "100%" },
    exit: { x: "-30%" }
  },
  pushRight: {
    enter: { x: "-100%" },
    exit: { x: "30%" }
  },
  pushUp: {
    enter: { y: "100%" },
    exit: { y: "-30%" }
  },
  scale: {
    enter: { scale: 1 },
    exit: { scale: 0.95 }
  },
  slideDown: {
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "100%" },
    position: { bottom: 0, left: 0, maxWidth: "100vw", right: 0 }
  },
  slideLeft: {
    enter: { x: 0, y: 0 },
    exit: { x: "-100%", y: 0 },
    position: { bottom: 0, left: 0, top: 0, width: "100%" }
  },
  slideRight: {
    enter: { x: 0, y: 0 },
    exit: { x: "100%", y: 0 },
    position: { bottom: 0, right: 0, top: 0, width: "100%" }
  },
  slideUp: {
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "-100%" },
    position: { left: 0, maxWidth: "100vw", right: 0, top: 0 }
  }
};
var MOTION_TRANSITION_DEFAULTS = {
  enter: {
    duration: 0.25,
    ease: MOTION_TRANSITION_EASINGS.easeOut
  },
  exit: {
    duration: 0.2,
    ease: MOTION_TRANSITION_EASINGS.easeIn
  }
};
function transitionEnter(transition) {
  return function(delay2, duration) {
    return {
      ...transition != null ? transition : MOTION_TRANSITION_DEFAULTS.enter,
      ...duration ? { duration: (0, import_utils2.isNumber)(duration) ? duration : duration.enter } : {},
      delay: (0, import_utils2.isNumber)(delay2) ? delay2 : delay2 == null ? void 0 : delay2.enter
    };
  };
}
function transitionExit(transition) {
  return function(delay2, duration) {
    return {
      ...transition != null ? transition : MOTION_TRANSITION_DEFAULTS.exit,
      ...duration ? { duration: (0, import_utils2.isNumber)(duration) ? duration : duration.exit } : {},
      delay: (0, import_utils2.isNumber)(delay2) ? delay2 : delay2 == null ? void 0 : delay2.exit
    };
  };
}

// src/index.ts
var import_framer_motion3 = require("framer-motion");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AcceleratedAnimation,
  AnimatePresence,
  AnimateSharedLayout,
  DeprecatedLayoutGroupContext,
  DragControls,
  FlatTree,
  LayoutGroup,
  LayoutGroupContext,
  LazyMotion,
  MOTION_TRANSITION_DEFAULTS,
  MOTION_TRANSITION_EASINGS,
  MOTION_TRANSITION_VARIANTS,
  Motion,
  MotionConfig,
  MotionConfigContext,
  MotionContext,
  MotionGlobalConfig,
  MotionReorder,
  PresenceContext,
  SwitchLayoutGroupContext,
  VisualElement,
  addPointerInfo,
  addScaleCorrector,
  animate,
  animateValue,
  animateVisualElement,
  animationControls,
  animations,
  anticipate,
  backIn,
  backInOut,
  backOut,
  buildTransform,
  calcLength,
  cancelFrame,
  cancelSync,
  circIn,
  circInOut,
  circOut,
  clamp,
  color,
  complex,
  createBox,
  createDomMotionComponent,
  createMotionComponent,
  createScopedAnimate,
  cubicBezier,
  delay,
  disableInstantTransitions,
  distance,
  distance2D,
  domAnimation,
  domMax,
  easeIn,
  easeInOut,
  easeOut,
  filterProps,
  frame,
  frameData,
  inView,
  interpolate,
  invariant,
  isBrowser,
  isDragActive,
  isMotionComponent,
  isMotionValue,
  isValidMotionProp,
  m,
  makeUseVisualState,
  mirrorEasing,
  mix,
  motion,
  motionForwardRef,
  motionValue,
  optimizedAppearDataAttribute,
  pipe,
  progress,
  px,
  resolveMotionValue,
  reverseEasing,
  scroll,
  scrollInfo,
  spring,
  stagger,
  startOptimizedAppearAnimation,
  steps,
  sync,
  transform,
  transitionEnter,
  transitionExit,
  unwrapMotionComponent,
  useAnimate,
  useAnimationControls,
  useAnimationFrame,
  useCycle,
  useDeprecatedAnimatedState,
  useDeprecatedInvertedScale,
  useDomEvent,
  useDragControls,
  useElementScroll,
  useForceUpdate,
  useInView,
  useInstantLayoutTransition,
  useInstantTransition,
  useIsPresent,
  useIsomorphicLayoutEffect,
  useMotionAnimation,
  useMotionTemplate,
  useMotionValue,
  useMotionValueEvent,
  usePresence,
  useReducedMotion,
  useReducedMotionConfig,
  useResetProjection,
  useScroll,
  useSpring,
  useTime,
  useTransform,
  useVelocity,
  useViewportScroll,
  useWillChange,
  visualElementStore,
  warning,
  wrap
});
//# sourceMappingURL=index.js.map