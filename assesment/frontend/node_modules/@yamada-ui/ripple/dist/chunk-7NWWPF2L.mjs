"use client"

// src/use-ripple.ts
import { createId, handlerAll } from "@yamada-ui/utils";
import { useCallback, useState } from "react";
var useRipple = ({
  disabled,
  isDisabled,
  ...rest
} = {}) => {
  const [ripples, setRipples] = useState([]);
  const onPointerDown = useCallback(
    (ev) => {
      if (disabled || isDisabled) return setRipples([]);
      const trigger = ev.currentTarget;
      const size = Math.max(trigger.clientWidth, trigger.clientHeight);
      const rect = trigger.getBoundingClientRect();
      setRipples((prev) => [
        ...prev,
        {
          key: createId(prev.length.toString()),
          size,
          x: ev.clientX - rect.x - size / 2,
          y: ev.clientY - rect.y - size / 2
        }
      ]);
    },
    [disabled, isDisabled]
  );
  const onClear = useCallback((key) => {
    setRipples((prev) => prev.filter((item) => item.key !== key));
  }, []);
  return {
    ripples,
    onClear,
    onPointerDown: handlerAll(onPointerDown, rest.onPointerDown)
  };
};

export {
  useRipple
};
//# sourceMappingURL=chunk-7NWWPF2L.mjs.map