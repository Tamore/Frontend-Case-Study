import React, { PointerEventHandler, Key } from 'react';

interface RippleOptions {
    key: React.Key;
    size: number;
    x: number;
    y: number;
}
interface UseRippleProps<T = HTMLElement> {
    disabled?: boolean;
    isDisabled?: boolean;
    onPointerDown?: PointerEventHandler<T>;
}
declare const useRipple: <T = HTMLElement>({ disabled, isDisabled, ...rest }?: UseRippleProps<T>) => {
    ripples: RippleOptions[];
    onClear: (key: Key) => void;
    onPointerDown: (event: React.PointerEvent<T>) => void;
};
type UseRippleReturn = ReturnType<typeof useRipple>;

export { type RippleOptions, type UseRippleProps, type UseRippleReturn, useRipple };
