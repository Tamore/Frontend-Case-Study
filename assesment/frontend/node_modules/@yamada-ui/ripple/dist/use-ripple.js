"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/use-ripple.ts
var use_ripple_exports = {};
__export(use_ripple_exports, {
  useRipple: () => useRipple
});
module.exports = __toCommonJS(use_ripple_exports);
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var useRipple = ({
  disabled,
  isDisabled,
  ...rest
} = {}) => {
  const [ripples, setRipples] = (0, import_react.useState)([]);
  const onPointerDown = (0, import_react.useCallback)(
    (ev) => {
      if (disabled || isDisabled) return setRipples([]);
      const trigger = ev.currentTarget;
      const size = Math.max(trigger.clientWidth, trigger.clientHeight);
      const rect = trigger.getBoundingClientRect();
      setRipples((prev) => [
        ...prev,
        {
          key: (0, import_utils.createId)(prev.length.toString()),
          size,
          x: ev.clientX - rect.x - size / 2,
          y: ev.clientY - rect.y - size / 2
        }
      ]);
    },
    [disabled, isDisabled]
  );
  const onClear = (0, import_react.useCallback)((key) => {
    setRipples((prev) => prev.filter((item) => item.key !== key));
  }, []);
  return {
    ripples,
    onClear,
    onPointerDown: (0, import_utils.handlerAll)(onPointerDown, rest.onPointerDown)
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useRipple
});
//# sourceMappingURL=use-ripple.js.map