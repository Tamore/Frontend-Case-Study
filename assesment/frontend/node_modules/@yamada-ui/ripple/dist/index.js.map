{"version":3,"sources":["../src/index.ts","../src/ripple.tsx","../src/use-ripple.ts"],"sourcesContent":["export { Ripple } from \"./ripple\"\nexport type { RippleProps } from \"./ripple\"\nexport { useRipple } from \"./use-ripple\"\nexport type {\n  RippleOptions,\n  UseRippleProps,\n  UseRippleReturn,\n} from \"./use-ripple\"\n","import type { CSSUIObject, FC } from \"@yamada-ui/core\"\nimport type { MotionProps } from \"@yamada-ui/motion\"\nimport type { Key } from \"react\"\nimport type { RippleOptions } from \"./use-ripple\"\nimport { AnimatePresence, motion } from \"@yamada-ui/motion\"\nimport { cx, handlerAll } from \"@yamada-ui/utils\"\n\nconst clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min), max)\n\nexport interface RippleProps extends MotionProps<\"span\"> {\n  ripples: RippleOptions[]\n  onClear: (key: Key) => void\n  /**\n   * If `true`, disable ripple effects when pressing a element.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\n/**\n * `Ripple` is a component that adds a ripple effect to elements, allowing users to recognize when they have clicked.\n *\n * @see Docs https://yamada-ui.com/components/other/ripple\n */\nexport const Ripple: FC<RippleProps> = ({\n  className,\n  style,\n  color = \"currentColor\",\n  isDisabled,\n  ripples,\n  onAnimationComplete,\n  onClear,\n  ...rest\n}) => {\n  if (isDisabled) return null\n\n  const css: CSSUIObject = {\n    rounded: \"fallback(full, 9999px)\",\n    zIndex: \"fallback(kurillin, 9)\",\n  }\n\n  return (\n    <>\n      {ripples.map(({ key, size, x, y }) => {\n        const duration = clamp(0.01 * size, 0.2, size > 100 ? 0.75 : 0.5)\n\n        return (\n          <AnimatePresence key={key} mode=\"popLayout\">\n            <motion.span\n              className={cx(\"ui-ripple\", className)}\n              style={{\n                height: `${size}px`,\n                left: x,\n                pointerEvents: \"none\",\n                position: \"absolute\",\n                top: y,\n                transformOrigin: \"center\",\n                width: `${size}px`,\n                ...style,\n              }}\n              animate={{ opacity: 0, transform: \"scale(2)\" }}\n              bgColor={color}\n              exit={{ opacity: 0 }}\n              initial={{ opacity: 0.35, transform: \"scale(0)\" }}\n              transition={{ duration }}\n              __css={css}\n              {...rest}\n              onAnimationComplete={handlerAll(onAnimationComplete, () =>\n                onClear(key),\n              )}\n            />\n          </AnimatePresence>\n        )\n      })}\n    </>\n  )\n}\n\nRipple.displayName = \"Ripple\"\nRipple.__ui__ = \"Ripple\"\n","import type React from \"react\"\nimport type { Key, PointerEventHandler } from \"react\"\nimport { createId, handlerAll } from \"@yamada-ui/utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface RippleOptions {\n  key: React.Key\n  size: number\n  x: number\n  y: number\n}\n\nexport interface UseRippleProps<T = HTMLElement> {\n  disabled?: boolean\n  isDisabled?: boolean\n  onPointerDown?: PointerEventHandler<T>\n}\n\nexport const useRipple = <T = HTMLElement>({\n  disabled,\n  isDisabled,\n  ...rest\n}: UseRippleProps<T> = {}) => {\n  const [ripples, setRipples] = useState<RippleOptions[]>([])\n\n  const onPointerDown: PointerEventHandler<T> = useCallback(\n    (ev) => {\n      if (disabled || isDisabled) return setRipples([])\n\n      const trigger = ev.currentTarget as unknown as Element\n\n      const size = Math.max(trigger.clientWidth, trigger.clientHeight)\n      const rect = trigger.getBoundingClientRect()\n\n      setRipples((prev) => [\n        ...prev,\n        {\n          key: createId(prev.length.toString()),\n          size,\n          x: ev.clientX - rect.x - size / 2,\n          y: ev.clientY - rect.y - size / 2,\n        },\n      ])\n    },\n    [disabled, isDisabled],\n  )\n\n  const onClear = useCallback((key: Key) => {\n    setRipples((prev) => prev.filter((item) => item.key !== key))\n  }, [])\n\n  return {\n    ripples,\n    onClear,\n    onPointerDown: handlerAll(onPointerDown, rest.onPointerDown),\n  }\n}\n\nexport type UseRippleReturn = ReturnType<typeof useRipple>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACIA,oBAAwC;AACxC,mBAA+B;AAuC3B;AArCJ,IAAM,QAAQ,CAAC,OAAe,KAAa,QACzC,KAAK,IAAI,KAAK,IAAI,OAAO,GAAG,GAAG,GAAG;AAkB7B,IAAM,SAA0B,CAAC;AAAA,EACtC;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAAM;AACJ,MAAI,WAAY,QAAO;AAEvB,QAAM,MAAmB;AAAA,IACvB,SAAS;AAAA,IACT,QAAQ;AAAA,EACV;AAEA,SACE,2EACG,kBAAQ,IAAI,CAAC,EAAE,KAAK,MAAM,GAAG,EAAE,MAAM;AACpC,UAAM,WAAW,MAAM,OAAO,MAAM,KAAK,OAAO,MAAM,OAAO,GAAG;AAEhE,WACE,4CAAC,iCAA0B,MAAK,aAC9B;AAAA,MAAC,qBAAO;AAAA,MAAP;AAAA,QACC,eAAW,iBAAG,aAAa,SAAS;AAAA,QACpC,OAAO;AAAA,UACL,QAAQ,GAAG,IAAI;AAAA,UACf,MAAM;AAAA,UACN,eAAe;AAAA,UACf,UAAU;AAAA,UACV,KAAK;AAAA,UACL,iBAAiB;AAAA,UACjB,OAAO,GAAG,IAAI;AAAA,UACd,GAAG;AAAA,QACL;AAAA,QACA,SAAS,EAAE,SAAS,GAAG,WAAW,WAAW;AAAA,QAC7C,SAAS;AAAA,QACT,MAAM,EAAE,SAAS,EAAE;AAAA,QACnB,SAAS,EAAE,SAAS,MAAM,WAAW,WAAW;AAAA,QAChD,YAAY,EAAE,SAAS;AAAA,QACvB,OAAO;AAAA,QACN,GAAG;AAAA,QACJ,yBAAqB;AAAA,UAAW;AAAA,UAAqB,MACnD,QAAQ,GAAG;AAAA,QACb;AAAA;AAAA,IACF,KAvBoB,GAwBtB;AAAA,EAEJ,CAAC,GACH;AAEJ;AAEA,OAAO,cAAc;AACrB,OAAO,SAAS;;;AC/EhB,IAAAA,gBAAqC;AACrC,mBAAsC;AAe/B,IAAM,YAAY,CAAkB;AAAA,EACzC;AAAA,EACA;AAAA,EACA,GAAG;AACL,IAAuB,CAAC,MAAM;AAC5B,QAAM,CAAC,SAAS,UAAU,QAAI,uBAA0B,CAAC,CAAC;AAE1D,QAAM,oBAAwC;AAAA,IAC5C,CAAC,OAAO;AACN,UAAI,YAAY,WAAY,QAAO,WAAW,CAAC,CAAC;AAEhD,YAAM,UAAU,GAAG;AAEnB,YAAM,OAAO,KAAK,IAAI,QAAQ,aAAa,QAAQ,YAAY;AAC/D,YAAM,OAAO,QAAQ,sBAAsB;AAE3C,iBAAW,CAAC,SAAS;AAAA,QACnB,GAAG;AAAA,QACH;AAAA,UACE,SAAK,wBAAS,KAAK,OAAO,SAAS,CAAC;AAAA,UACpC;AAAA,UACA,GAAG,GAAG,UAAU,KAAK,IAAI,OAAO;AAAA,UAChC,GAAG,GAAG,UAAU,KAAK,IAAI,OAAO;AAAA,QAClC;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,CAAC,UAAU,UAAU;AAAA,EACvB;AAEA,QAAM,cAAU,0BAAY,CAAC,QAAa;AACxC,eAAW,CAAC,SAAS,KAAK,OAAO,CAAC,SAAS,KAAK,QAAQ,GAAG,CAAC;AAAA,EAC9D,GAAG,CAAC,CAAC;AAEL,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,mBAAe,0BAAW,eAAe,KAAK,aAAa;AAAA,EAC7D;AACF;","names":["import_utils"]}